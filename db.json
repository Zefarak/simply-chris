[{"model": "contenttypes.contenttype", "pk": 1, "fields": {"app_label": "admin", "model": "logentry"}}, {"model": "contenttypes.contenttype", "pk": 2, "fields": {"app_label": "auth", "model": "permission"}}, {"model": "contenttypes.contenttype", "pk": 3, "fields": {"app_label": "auth", "model": "group"}}, {"model": "contenttypes.contenttype", "pk": 4, "fields": {"app_label": "auth", "model": "user"}}, {"model": "contenttypes.contenttype", "pk": 5, "fields": {"app_label": "contenttypes", "model": "contenttype"}}, {"model": "contenttypes.contenttype", "pk": 6, "fields": {"app_label": "sessions", "model": "session"}}, {"model": "contenttypes.contenttype", "pk": 7, "fields": {"app_label": "sites", "model": "site"}}, {"model": "contenttypes.contenttype", "pk": 8, "fields": {"app_label": "homepage", "model": "welcomepage"}}, {"model": "contenttypes.contenttype", "pk": 9, "fields": {"app_label": "homepage", "model": "mainbanner"}}, {"model": "contenttypes.contenttype", "pk": 10, "fields": {"app_label": "homepage", "model": "aboutme"}}, {"model": "contenttypes.contenttype", "pk": 11, "fields": {"app_label": "homepage", "model": "aboutmebar"}}, {"model": "contenttypes.contenttype", "pk": 12, "fields": {"app_label": "homepage", "model": "services"}}, {"model": "contenttypes.contenttype", "pk": 13, "fields": {"app_label": "homepage", "model": "contact"}}, {"model": "contenttypes.contenttype", "pk": 14, "fields": {"app_label": "homepage", "model": "aboutpage"}}, {"model": "contenttypes.contenttype", "pk": 15, "fields": {"app_label": "homepage", "model": "aboutmessages"}}, {"model": "contenttypes.contenttype", "pk": 16, "fields": {"app_label": "homepage", "model": "abouttecho"}}, {"model": "contenttypes.contenttype", "pk": 17, "fields": {"app_label": "homepage", "model": "aboutclients"}}, {"model": "contenttypes.contenttype", "pk": 18, "fields": {"app_label": "newsletter", "model": "join"}}, {"model": "contenttypes.contenttype", "pk": 19, "fields": {"app_label": "projects", "model": "projectcategory"}}, {"model": "contenttypes.contenttype", "pk": 20, "fields": {"app_label": "projects", "model": "projects"}}, {"model": "contenttypes.contenttype", "pk": 21, "fields": {"app_label": "projects", "model": "imageproject"}}, {"model": "contenttypes.contenttype", "pk": 22, "fields": {"app_label": "blog", "model": "posttags"}}, {"model": "contenttypes.contenttype", "pk": 23, "fields": {"app_label": "blog", "model": "postcategory"}}, {"model": "contenttypes.contenttype", "pk": 24, "fields": {"app_label": "blog", "model": "post"}}, {"model": "contenttypes.contenttype", "pk": 25, "fields": {"app_label": "blog", "model": "gallery"}}, {"model": "contenttypes.contenttype", "pk": 26, "fields": {"app_label": "short_url", "model": "shortingurl"}}, {"model": "contenttypes.contenttype", "pk": 27, "fields": {"app_label": "short_url", "model": "shorturlanalytics"}}, {"model": "contenttypes.contenttype", "pk": 28, "fields": {"app_label": "robots", "model": "url"}}, {"model": "contenttypes.contenttype", "pk": 29, "fields": {"app_label": "robots", "model": "rule"}}, {"model": "contenttypes.contenttype", "pk": 30, "fields": {"app_label": "funny_projects", "model": "gymperson"}}, {"model": "contenttypes.contenttype", "pk": 31, "fields": {"app_label": "backgammon", "model": "playerseason"}}, {"model": "contenttypes.contenttype", "pk": 32, "fields": {"app_label": "backgammon", "model": "game"}}, {"model": "contenttypes.contenttype", "pk": 33, "fields": {"app_label": "backgammon", "model": "season"}}, {"model": "contenttypes.contenttype", "pk": 34, "fields": {"app_label": "backgammon", "model": "player"}}, {"model": "contenttypes.contenttype", "pk": 35, "fields": {"app_label": "contact", "model": "contact"}}, {"model": "contenttypes.contenttype", "pk": 36, "fields": {"app_label": "sample_templates", "model": "category"}}, {"model": "contenttypes.contenttype", "pk": 37, "fields": {"app_label": "sample_templates", "model": "templatesample"}}, {"model": "sessions.session", "pk": "0lpdizo1worh0jj1kfqom6vgwrijrhwz", "fields": {"session_data": "N2M4MzQ5NGE3MGEwMWU1YWZkYmM5MzhiMGJlMGM5YjJhYjg3MThkZjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIxOTAzYzVjNTlhMDBiNDM5ZmIzNTNhMjAxMzM3ZTA3YmJkNjMwM2JhIn0=", "expire_date": "2018-05-04T16:33:48.841Z"}}, {"model": "sessions.session", "pk": "0vz0l6u98dudb46otznltg3mgcbziqba", "fields": {"session_data": "N2M4MzQ5NGE3MGEwMWU1YWZkYmM5MzhiMGJlMGM5YjJhYjg3MThkZjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIxOTAzYzVjNTlhMDBiNDM5ZmIzNTNhMjAxMzM3ZTA3YmJkNjMwM2JhIn0=", "expire_date": "2018-10-14T15:25:03.693Z"}}, {"model": "sessions.session", "pk": "1hgrndq2jk6lx3xymf62a39mgxn1ahxt", "fields": {"session_data": "NWZhM2UwZGY4NmUyYTkwMDE0NmY0Nzk0NmIyY2E4YTFkMTdjZTlhZDp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiI4ZDlmMjY4YzVjM2ZmYzVmMmMwNmIxNzkyYzk1NzQ5MDI5MGNlNDVlIn0=", "expire_date": "2017-10-16T04:11:52.213Z"}}, {"model": "sessions.session", "pk": "2ne2qgx8lc37399fpaoiiywrcbmokr1t", "fields": {"session_data": "N2M4MzQ5NGE3MGEwMWU1YWZkYmM5MzhiMGJlMGM5YjJhYjg3MThkZjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIxOTAzYzVjNTlhMDBiNDM5ZmIzNTNhMjAxMzM3ZTA3YmJkNjMwM2JhIn0=", "expire_date": "2018-07-29T07:39:57.095Z"}}, {"model": "sessions.session", "pk": "38zbty1b4hray5j0k5md06hrva3ch7nd", "fields": {"session_data": "N2M4MzQ5NGE3MGEwMWU1YWZkYmM5MzhiMGJlMGM5YjJhYjg3MThkZjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIxOTAzYzVjNTlhMDBiNDM5ZmIzNTNhMjAxMzM3ZTA3YmJkNjMwM2JhIn0=", "expire_date": "2019-04-22T16:55:43.351Z"}}, {"model": "sessions.session", "pk": "3qcxtbr96g9k8jqros2k8zojpz343v7m", "fields": {"session_data": "N2M4MzQ5NGE3MGEwMWU1YWZkYmM5MzhiMGJlMGM5YjJhYjg3MThkZjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIxOTAzYzVjNTlhMDBiNDM5ZmIzNTNhMjAxMzM3ZTA3YmJkNjMwM2JhIn0=", "expire_date": "2018-11-13T17:10:44.654Z"}}, {"model": "sessions.session", "pk": "3wlsx3x59eg1ibr1yj6tjarzgolgwjqk", "fields": {"session_data": "NWZhM2UwZGY4NmUyYTkwMDE0NmY0Nzk0NmIyY2E4YTFkMTdjZTlhZDp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiI4ZDlmMjY4YzVjM2ZmYzVmMmMwNmIxNzkyYzk1NzQ5MDI5MGNlNDVlIn0=", "expire_date": "2017-12-02T07:53:54.537Z"}}, {"model": "sessions.session", "pk": "41jrowyny0lwgdtgep64rxuo1ur3leqy", "fields": {"session_data": "N2M4MzQ5NGE3MGEwMWU1YWZkYmM5MzhiMGJlMGM5YjJhYjg3MThkZjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIxOTAzYzVjNTlhMDBiNDM5ZmIzNTNhMjAxMzM3ZTA3YmJkNjMwM2JhIn0=", "expire_date": "2019-06-16T09:58:25.343Z"}}, {"model": "sessions.session", "pk": "4t8cl36y1ui8svr33znbm9c3hdvkqdb3", "fields": {"session_data": "NWZhM2UwZGY4NmUyYTkwMDE0NmY0Nzk0NmIyY2E4YTFkMTdjZTlhZDp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiI4ZDlmMjY4YzVjM2ZmYzVmMmMwNmIxNzkyYzk1NzQ5MDI5MGNlNDVlIn0=", "expire_date": "2017-09-10T18:55:03.003Z"}}, {"model": "sessions.session", "pk": "5a9yycumbu60ude8p1r9j9n29i1o0m1m", "fields": {"session_data": "N2M4MzQ5NGE3MGEwMWU1YWZkYmM5MzhiMGJlMGM5YjJhYjg3MThkZjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIxOTAzYzVjNTlhMDBiNDM5ZmIzNTNhMjAxMzM3ZTA3YmJkNjMwM2JhIn0=", "expire_date": "2018-05-20T13:57:35.017Z"}}, {"model": "sessions.session", "pk": "5gasfev0h4b1m8gl6x3a6hr3dj0gxie4", "fields": {"session_data": "N2M4MzQ5NGE3MGEwMWU1YWZkYmM5MzhiMGJlMGM5YjJhYjg3MThkZjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIxOTAzYzVjNTlhMDBiNDM5ZmIzNTNhMjAxMzM3ZTA3YmJkNjMwM2JhIn0=", "expire_date": "2018-03-28T16:02:17.387Z"}}, {"model": "sessions.session", "pk": "5jnsww13jrv2jmwhd98p7v5nhpi4prv7", "fields": {"session_data": "MmY4ODRiNjU2OTU4NDMxOTExZmY4NTBjMDg3ZTJmNTQyYzhlM2Q5Zjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIwYmQyYmE2YjA4YmU5NDdiZTc5NjNhNDYwN2QxZDMyNTQ5YTdmODMxIn0=", "expire_date": "2017-08-04T05:12:57.218Z"}}, {"model": "sessions.session", "pk": "5m6sdi9r31mf77uqgp48nvlzqeqghndt", "fields": {"session_data": "NWZhM2UwZGY4NmUyYTkwMDE0NmY0Nzk0NmIyY2E4YTFkMTdjZTlhZDp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiI4ZDlmMjY4YzVjM2ZmYzVmMmMwNmIxNzkyYzk1NzQ5MDI5MGNlNDVlIn0=", "expire_date": "2017-12-05T07:52:44.435Z"}}, {"model": "sessions.session", "pk": "6gjki6jzw4ekmxplv9y2sbaesjd7hsu6", "fields": {"session_data": "MmY4ODRiNjU2OTU4NDMxOTExZmY4NTBjMDg3ZTJmNTQyYzhlM2Q5Zjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIwYmQyYmE2YjA4YmU5NDdiZTc5NjNhNDYwN2QxZDMyNTQ5YTdmODMxIn0=", "expire_date": "2017-08-04T17:45:20.866Z"}}, {"model": "sessions.session", "pk": "7c7u7dgbge8a3fiw94cs8sfn6q4bk4e8", "fields": {"session_data": "N2M4MzQ5NGE3MGEwMWU1YWZkYmM5MzhiMGJlMGM5YjJhYjg3MThkZjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIxOTAzYzVjNTlhMDBiNDM5ZmIzNTNhMjAxMzM3ZTA3YmJkNjMwM2JhIn0=", "expire_date": "2019-01-21T17:53:08.559Z"}}, {"model": "sessions.session", "pk": "7fsm6yerskdbre27ke7hvw7hi9mjr8py", "fields": {"session_data": "ZjY2MDJhYjk1MTBlYmFhNTFhNjBkNzZlODRiNDU1ZmMxMjdhYWZmOTp7Il9hdXRoX3VzZXJfaGFzaCI6IjBiZDJiYTZiMDhiZTk0N2JlNzk2M2E0NjA3ZDFkMzI1NDlhN2Y4MzEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=", "expire_date": "2017-08-04T15:10:12.388Z"}}, {"model": "sessions.session", "pk": "7oip5c9uazeuah6yd4ethz4a87isl4l3", "fields": {"session_data": "N2M4MzQ5NGE3MGEwMWU1YWZkYmM5MzhiMGJlMGM5YjJhYjg3MThkZjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIxOTAzYzVjNTlhMDBiNDM5ZmIzNTNhMjAxMzM3ZTA3YmJkNjMwM2JhIn0=", "expire_date": "2018-05-21T06:38:23.144Z"}}, {"model": "sessions.session", "pk": "8gikrr2ztbvqe5r4f4e0a7tei7akx49u", "fields": {"session_data": "N2Y1NTdiY2Q3NmU5YTZhNWYwNzRkNTE0MzEwYWY5YmY4OGE0ZjhjNzp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiI0ZDgwODE5YmI0MmYwYzNhOTFhNGM5YTU4OWU0OTUxNDBiOTg5ZWFlIn0=", "expire_date": "2017-12-26T15:11:57.171Z"}}, {"model": "sessions.session", "pk": "9bb23qzowl1uhdgrpd3z81gyw44bghcm", "fields": {"session_data": "NWZhM2UwZGY4NmUyYTkwMDE0NmY0Nzk0NmIyY2E4YTFkMTdjZTlhZDp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiI4ZDlmMjY4YzVjM2ZmYzVmMmMwNmIxNzkyYzk1NzQ5MDI5MGNlNDVlIn0=", "expire_date": "2017-09-13T19:40:06.705Z"}}, {"model": "sessions.session", "pk": "9ui46l3rgrx343vh2zjgs3zkyjnlz9zh", "fields": {"session_data": "NWZhM2UwZGY4NmUyYTkwMDE0NmY0Nzk0NmIyY2E4YTFkMTdjZTlhZDp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiI4ZDlmMjY4YzVjM2ZmYzVmMmMwNmIxNzkyYzk1NzQ5MDI5MGNlNDVlIn0=", "expire_date": "2017-09-06T04:59:59.250Z"}}, {"model": "sessions.session", "pk": "a0yldi6t451qt13yaj1ku28zsnt09vfu", "fields": {"session_data": "N2M4MzQ5NGE3MGEwMWU1YWZkYmM5MzhiMGJlMGM5YjJhYjg3MThkZjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIxOTAzYzVjNTlhMDBiNDM5ZmIzNTNhMjAxMzM3ZTA3YmJkNjMwM2JhIn0=", "expire_date": "2018-04-05T06:12:29.197Z"}}, {"model": "sessions.session", "pk": "ac8qahuojvwlhgy05vbvdhk6gpqq0g8g", "fields": {"session_data": "NWZhM2UwZGY4NmUyYTkwMDE0NmY0Nzk0NmIyY2E4YTFkMTdjZTlhZDp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiI4ZDlmMjY4YzVjM2ZmYzVmMmMwNmIxNzkyYzk1NzQ5MDI5MGNlNDVlIn0=", "expire_date": "2017-09-06T05:40:43.049Z"}}, {"model": "sessions.session", "pk": "aewndedc8msz69no8uo2zxaiqbt35dxv", "fields": {"session_data": "NWZhM2UwZGY4NmUyYTkwMDE0NmY0Nzk0NmIyY2E4YTFkMTdjZTlhZDp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiI4ZDlmMjY4YzVjM2ZmYzVmMmMwNmIxNzkyYzk1NzQ5MDI5MGNlNDVlIn0=", "expire_date": "2017-10-12T07:21:41.725Z"}}, {"model": "sessions.session", "pk": "aff5li378jis8a3py96575sskbk3yqjm", "fields": {"session_data": "N2M4MzQ5NGE3MGEwMWU1YWZkYmM5MzhiMGJlMGM5YjJhYjg3MThkZjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIxOTAzYzVjNTlhMDBiNDM5ZmIzNTNhMjAxMzM3ZTA3YmJkNjMwM2JhIn0=", "expire_date": "2019-06-16T12:24:55.924Z"}}, {"model": "sessions.session", "pk": "aoy0gz1yqgx2n8283rez0638rou9yxfi", "fields": {"session_data": "N2M4MzQ5NGE3MGEwMWU1YWZkYmM5MzhiMGJlMGM5YjJhYjg3MThkZjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIxOTAzYzVjNTlhMDBiNDM5ZmIzNTNhMjAxMzM3ZTA3YmJkNjMwM2JhIn0=", "expire_date": "2019-10-10T04:45:55.046Z"}}, {"model": "sessions.session", "pk": "b02bh5zyt698b729logjrhqa96lutmu7", "fields": {"session_data": "N2M4MzQ5NGE3MGEwMWU1YWZkYmM5MzhiMGJlMGM5YjJhYjg3MThkZjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIxOTAzYzVjNTlhMDBiNDM5ZmIzNTNhMjAxMzM3ZTA3YmJkNjMwM2JhIn0=", "expire_date": "2018-04-26T05:25:18.834Z"}}, {"model": "sessions.session", "pk": "cbg2gulex13n00i8i5edhapldatnh9ey", "fields": {"session_data": "MmY4ODRiNjU2OTU4NDMxOTExZmY4NTBjMDg3ZTJmNTQyYzhlM2Q5Zjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIwYmQyYmE2YjA4YmU5NDdiZTc5NjNhNDYwN2QxZDMyNTQ5YTdmODMxIn0=", "expire_date": "2017-08-05T17:02:03.561Z"}}, {"model": "sessions.session", "pk": "fbou93iwh8oqjhtx6mxvhpm7yn4bi6h3", "fields": {"session_data": "N2M4MzQ5NGE3MGEwMWU1YWZkYmM5MzhiMGJlMGM5YjJhYjg3MThkZjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIxOTAzYzVjNTlhMDBiNDM5ZmIzNTNhMjAxMzM3ZTA3YmJkNjMwM2JhIn0=", "expire_date": "2019-07-08T13:30:18.470Z"}}, {"model": "sessions.session", "pk": "gad1npp919inexomhx0agzzreiy9bvza", "fields": {"session_data": "NWZhM2UwZGY4NmUyYTkwMDE0NmY0Nzk0NmIyY2E4YTFkMTdjZTlhZDp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiI4ZDlmMjY4YzVjM2ZmYzVmMmMwNmIxNzkyYzk1NzQ5MDI5MGNlNDVlIn0=", "expire_date": "2017-09-28T14:23:23.112Z"}}, {"model": "sessions.session", "pk": "gftd6ozbgezvzcbdjo0p2hyoab2mwp54", "fields": {"session_data": "N2M4MzQ5NGE3MGEwMWU1YWZkYmM5MzhiMGJlMGM5YjJhYjg3MThkZjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIxOTAzYzVjNTlhMDBiNDM5ZmIzNTNhMjAxMzM3ZTA3YmJkNjMwM2JhIn0=", "expire_date": "2019-02-26T06:25:59.495Z"}}, {"model": "sessions.session", "pk": "ghofz4cwgomfri7tho28t1dcsvvnxqf1", "fields": {"session_data": "NWZhM2UwZGY4NmUyYTkwMDE0NmY0Nzk0NmIyY2E4YTFkMTdjZTlhZDp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiI4ZDlmMjY4YzVjM2ZmYzVmMmMwNmIxNzkyYzk1NzQ5MDI5MGNlNDVlIn0=", "expire_date": "2017-09-11T05:41:09.984Z"}}, {"model": "sessions.session", "pk": "gqbgujngcxwwoxoq5ti5xw4nnysaiozc", "fields": {"session_data": "N2M4MzQ5NGE3MGEwMWU1YWZkYmM5MzhiMGJlMGM5YjJhYjg3MThkZjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIxOTAzYzVjNTlhMDBiNDM5ZmIzNTNhMjAxMzM3ZTA3YmJkNjMwM2JhIn0=", "expire_date": "2018-06-07T12:17:54.551Z"}}, {"model": "sessions.session", "pk": "gvgo8t3ar3xk4i1hpsh51zyc6kisgkb3", "fields": {"session_data": "N2M4MzQ5NGE3MGEwMWU1YWZkYmM5MzhiMGJlMGM5YjJhYjg3MThkZjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIxOTAzYzVjNTlhMDBiNDM5ZmIzNTNhMjAxMzM3ZTA3YmJkNjMwM2JhIn0=", "expire_date": "2018-05-21T14:55:28.633Z"}}, {"model": "sessions.session", "pk": "hgapk089u45zztgyqaj98e0xdzzp6t4m", "fields": {"session_data": "N2M4MzQ5NGE3MGEwMWU1YWZkYmM5MzhiMGJlMGM5YjJhYjg3MThkZjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIxOTAzYzVjNTlhMDBiNDM5ZmIzNTNhMjAxMzM3ZTA3YmJkNjMwM2JhIn0=", "expire_date": "2019-05-31T12:53:54.591Z"}}, {"model": "sessions.session", "pk": "i31ipuv3rs805abxxyq55r6tbrnbfree", "fields": {"session_data": "N2M4MzQ5NGE3MGEwMWU1YWZkYmM5MzhiMGJlMGM5YjJhYjg3MThkZjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIxOTAzYzVjNTlhMDBiNDM5ZmIzNTNhMjAxMzM3ZTA3YmJkNjMwM2JhIn0=", "expire_date": "2018-11-09T09:35:24.911Z"}}, {"model": "sessions.session", "pk": "i3kx413b9hcn9zazoiqwsa4u5nnylm5y", "fields": {"session_data": "NWZhM2UwZGY4NmUyYTkwMDE0NmY0Nzk0NmIyY2E4YTFkMTdjZTlhZDp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiI4ZDlmMjY4YzVjM2ZmYzVmMmMwNmIxNzkyYzk1NzQ5MDI5MGNlNDVlIn0=", "expire_date": "2017-09-25T07:13:57.799Z"}}, {"model": "sessions.session", "pk": "ih87g3iyir76bqwk7ttj7nncczmy9uun", "fields": {"session_data": "N2M4MzQ5NGE3MGEwMWU1YWZkYmM5MzhiMGJlMGM5YjJhYjg3MThkZjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIxOTAzYzVjNTlhMDBiNDM5ZmIzNTNhMjAxMzM3ZTA3YmJkNjMwM2JhIn0=", "expire_date": "2019-01-20T19:02:27.919Z"}}, {"model": "sessions.session", "pk": "jjokrbojlnulk2z6sxasz33sempx7f01", "fields": {"session_data": "N2M4MzQ5NGE3MGEwMWU1YWZkYmM5MzhiMGJlMGM5YjJhYjg3MThkZjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIxOTAzYzVjNTlhMDBiNDM5ZmIzNTNhMjAxMzM3ZTA3YmJkNjMwM2JhIn0=", "expire_date": "2019-04-12T13:54:10.264Z"}}, {"model": "sessions.session", "pk": "jxe9f4d6ow8h7fxkl8kuilfdp6fhlp6p", "fields": {"session_data": "N2M4MzQ5NGE3MGEwMWU1YWZkYmM5MzhiMGJlMGM5YjJhYjg3MThkZjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIxOTAzYzVjNTlhMDBiNDM5ZmIzNTNhMjAxMzM3ZTA3YmJkNjMwM2JhIn0=", "expire_date": "2018-09-28T14:16:15.598Z"}}, {"model": "sessions.session", "pk": "kcibazjktdlkn019pew9sw9ytdgyex84", "fields": {"session_data": "N2M4MzQ5NGE3MGEwMWU1YWZkYmM5MzhiMGJlMGM5YjJhYjg3MThkZjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIxOTAzYzVjNTlhMDBiNDM5ZmIzNTNhMjAxMzM3ZTA3YmJkNjMwM2JhIn0=", "expire_date": "2018-09-22T19:26:32.666Z"}}, {"model": "sessions.session", "pk": "kpgfdfy75tntshi3wszh1d9yv304gxo5", "fields": {"session_data": "N2M4MzQ5NGE3MGEwMWU1YWZkYmM5MzhiMGJlMGM5YjJhYjg3MThkZjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIxOTAzYzVjNTlhMDBiNDM5ZmIzNTNhMjAxMzM3ZTA3YmJkNjMwM2JhIn0=", "expire_date": "2018-05-17T06:33:26.481Z"}}, {"model": "sessions.session", "pk": "kx1y9k7kleyl324it4gj9bgwq3y8knnl", "fields": {"session_data": "N2M4MzQ5NGE3MGEwMWU1YWZkYmM5MzhiMGJlMGM5YjJhYjg3MThkZjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIxOTAzYzVjNTlhMDBiNDM5ZmIzNTNhMjAxMzM3ZTA3YmJkNjMwM2JhIn0=", "expire_date": "2019-04-17T10:25:23.942Z"}}, {"model": "sessions.session", "pk": "naees87hyoxg2chmd6hlrut53btxgkmf", "fields": {"session_data": "N2M4MzQ5NGE3MGEwMWU1YWZkYmM5MzhiMGJlMGM5YjJhYjg3MThkZjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIxOTAzYzVjNTlhMDBiNDM5ZmIzNTNhMjAxMzM3ZTA3YmJkNjMwM2JhIn0=", "expire_date": "2019-07-15T04:20:48.092Z"}}, {"model": "sessions.session", "pk": "o3d5ahxfc6k9l1i8kgdx56wn2511b7iq", "fields": {"session_data": "NWZhM2UwZGY4NmUyYTkwMDE0NmY0Nzk0NmIyY2E4YTFkMTdjZTlhZDp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiI4ZDlmMjY4YzVjM2ZmYzVmMmMwNmIxNzkyYzk1NzQ5MDI5MGNlNDVlIn0=", "expire_date": "2017-11-23T18:29:30.361Z"}}, {"model": "sessions.session", "pk": "ooqpj99qgnsjroamjdiw51xslcl65wtw", "fields": {"session_data": "N2M4MzQ5NGE3MGEwMWU1YWZkYmM5MzhiMGJlMGM5YjJhYjg3MThkZjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIxOTAzYzVjNTlhMDBiNDM5ZmIzNTNhMjAxMzM3ZTA3YmJkNjMwM2JhIn0=", "expire_date": "2018-06-05T14:32:58.183Z"}}, {"model": "sessions.session", "pk": "q4ehxk8gyyyfvunosdiorjrkkclnqwtg", "fields": {"session_data": "N2M4MzQ5NGE3MGEwMWU1YWZkYmM5MzhiMGJlMGM5YjJhYjg3MThkZjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIxOTAzYzVjNTlhMDBiNDM5ZmIzNTNhMjAxMzM3ZTA3YmJkNjMwM2JhIn0=", "expire_date": "2018-03-19T06:46:46.686Z"}}, {"model": "sessions.session", "pk": "q63qa6dzvfydufk96funvl6t6z3jvkzc", "fields": {"session_data": "N2M4MzQ5NGE3MGEwMWU1YWZkYmM5MzhiMGJlMGM5YjJhYjg3MThkZjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIxOTAzYzVjNTlhMDBiNDM5ZmIzNTNhMjAxMzM3ZTA3YmJkNjMwM2JhIn0=", "expire_date": "2018-09-21T06:49:34.121Z"}}, {"model": "sessions.session", "pk": "qropgtrctjnesgfs1jfldrezmn9o6l4o", "fields": {"session_data": "NWZhM2UwZGY4NmUyYTkwMDE0NmY0Nzk0NmIyY2E4YTFkMTdjZTlhZDp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiI4ZDlmMjY4YzVjM2ZmYzVmMmMwNmIxNzkyYzk1NzQ5MDI5MGNlNDVlIn0=", "expire_date": "2017-09-06T13:23:42.512Z"}}, {"model": "sessions.session", "pk": "qw7d8hx770rq8g08u2x333sibw05nrez", "fields": {"session_data": "N2M4MzQ5NGE3MGEwMWU1YWZkYmM5MzhiMGJlMGM5YjJhYjg3MThkZjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIxOTAzYzVjNTlhMDBiNDM5ZmIzNTNhMjAxMzM3ZTA3YmJkNjMwM2JhIn0=", "expire_date": "2019-02-16T11:19:48.588Z"}}, {"model": "sessions.session", "pk": "rb0v6x3jemu5r5mkim6s35rzkkohf0m2", "fields": {"session_data": "NWZhM2UwZGY4NmUyYTkwMDE0NmY0Nzk0NmIyY2E4YTFkMTdjZTlhZDp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiI4ZDlmMjY4YzVjM2ZmYzVmMmMwNmIxNzkyYzk1NzQ5MDI5MGNlNDVlIn0=", "expire_date": "2017-09-06T13:46:02.575Z"}}, {"model": "sessions.session", "pk": "thq5noimclhg9uwut7uxebkcuovwgwo0", "fields": {"session_data": "NWZhM2UwZGY4NmUyYTkwMDE0NmY0Nzk0NmIyY2E4YTFkMTdjZTlhZDp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiI4ZDlmMjY4YzVjM2ZmYzVmMmMwNmIxNzkyYzk1NzQ5MDI5MGNlNDVlIn0=", "expire_date": "2017-10-11T04:43:24.800Z"}}, {"model": "sessions.session", "pk": "u5538tmpz4dcleosndbw321ffho0yjgn", "fields": {"session_data": "N2M4MzQ5NGE3MGEwMWU1YWZkYmM5MzhiMGJlMGM5YjJhYjg3MThkZjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIxOTAzYzVjNTlhMDBiNDM5ZmIzNTNhMjAxMzM3ZTA3YmJkNjMwM2JhIn0=", "expire_date": "2018-08-01T04:54:39.759Z"}}, {"model": "sessions.session", "pk": "ul7lrn7nagd63b5jw4ecl4s4zk7zde0y", "fields": {"session_data": "N2M4MzQ5NGE3MGEwMWU1YWZkYmM5MzhiMGJlMGM5YjJhYjg3MThkZjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIxOTAzYzVjNTlhMDBiNDM5ZmIzNTNhMjAxMzM3ZTA3YmJkNjMwM2JhIn0=", "expire_date": "2018-06-26T15:01:45.433Z"}}, {"model": "sessions.session", "pk": "wmm64la4f5b6n7pgp3p6cwitnoif5xsu", "fields": {"session_data": "N2M4MzQ5NGE3MGEwMWU1YWZkYmM5MzhiMGJlMGM5YjJhYjg3MThkZjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIxOTAzYzVjNTlhMDBiNDM5ZmIzNTNhMjAxMzM3ZTA3YmJkNjMwM2JhIn0=", "expire_date": "2019-06-18T13:02:41.513Z"}}, {"model": "sessions.session", "pk": "xaq8smbsqbleq7vv2prxoplqqe8ji2ei", "fields": {"session_data": "ZGQxNzU3NjcyZmRjZWZkNDVlNGZjMGYyMzNkMzM5NDg5ZjIwMzI1ZTp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2hhc2giOiI3NTI1NmI5MjJhNTYwMjdiOTJkY2VjNTU4MzUzY2QwZjc1OTgyZDJjIn0=", "expire_date": "2017-09-05T06:58:37.678Z"}}, {"model": "sessions.session", "pk": "xtslmnnd0hydvl09rkx8e6o731uaijyh", "fields": {"session_data": "NWZhM2UwZGY4NmUyYTkwMDE0NmY0Nzk0NmIyY2E4YTFkMTdjZTlhZDp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiI4ZDlmMjY4YzVjM2ZmYzVmMmMwNmIxNzkyYzk1NzQ5MDI5MGNlNDVlIn0=", "expire_date": "2017-10-17T13:54:11.826Z"}}, {"model": "sessions.session", "pk": "xyaqe3avork4yfjf5ohhuzih1k4mo1t4", "fields": {"session_data": "NWZhM2UwZGY4NmUyYTkwMDE0NmY0Nzk0NmIyY2E4YTFkMTdjZTlhZDp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiI4ZDlmMjY4YzVjM2ZmYzVmMmMwNmIxNzkyYzk1NzQ5MDI5MGNlNDVlIn0=", "expire_date": "2017-09-06T13:30:10.544Z"}}, {"model": "sessions.session", "pk": "zeoeevwhmsm420zyf21emwm7u5ow5nj0", "fields": {"session_data": "N2M4MzQ5NGE3MGEwMWU1YWZkYmM5MzhiMGJlMGM5YjJhYjg3MThkZjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIxOTAzYzVjNTlhMDBiNDM5ZmIzNTNhMjAxMzM3ZTA3YmJkNjMwM2JhIn0=", "expire_date": "2018-04-12T06:55:29.433Z"}}, {"model": "sessions.session", "pk": "zy0rw6c6krrpqtzo5owq5s7rujhkpl44", "fields": {"session_data": "N2M4MzQ5NGE3MGEwMWU1YWZkYmM5MzhiMGJlMGM5YjJhYjg3MThkZjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIxOTAzYzVjNTlhMDBiNDM5ZmIzNTNhMjAxMzM3ZTA3YmJkNjMwM2JhIn0=", "expire_date": "2018-05-25T17:58:15.264Z"}}, {"model": "sites.site", "pk": 1, "fields": {"domain": "www.simply-chris.com", "name": "www.simply-chris.com"}}, {"model": "homepage.welcomepage", "pk": 1, "fields": {"active": true, "title": "simply-chris", "seo_keywords": "Python, django,  web developing,  html,  css,  javascript", "seo_description": "\u03a0\u03bb\u03b7\u03c1\u03bf\u03c6\u03bf\u03c1\u03af\u03b5\u03c2 \u03b3\u03b9\u03b1 \u03b4\u03b7\u03bc\u03b9\u03bf\u03c5\u03c1\u03b3\u03af\u03b1 site \u03bc\u03ad\u03c3\u03c9 django, \u03ba\u03b1\u03b9 \u03b3\u03b5\u03bd\u03b9\u03ba\u03ac \u03b3\u03b9\u03b1 Python programming.", "title_eng": "simply-chris", "seo_keywords_eng": "blog,tips,Python, django,  web developing,  html,  css,  javascript", "seo_description_eng": "A blog about Django programming, Web developing and python"}}, {"model": "homepage.aboutme", "pk": 1, "fields": {"title": "Info", "text": "\u039f\u03bd\u03bf\u03bc\u03ac\u03b6\u03bf\u03bc\u03b1\u03b9 \u03a3\u03c4\u03b1\u03b8\u03ac\u03ba\u03b7\u03c2 \u03a7\u03c1\u03ae\u03c3\u03c4\u03bf\u03c2 \u03ba\u03b1\u03b9\r\n\u03b5\u03be\u03b5\u03b9\u03b4\u03b9\u03ba\u03b5\u03cd\u03bf\u03bc\u03b1\u03b9 \u03c3\u03c4\u03b7\u03bd \u03b4\u03b7\u03bc\u03b9\u03bf\u03c5\u03c1\u03b3\u03af\u03b1 \u03b9\u03c3\u03c4\u03bf\u03c3\u03b5\u03bb\u03af\u03b4\u03c9\u03bd \u03bc\u03b5 \u03c4\u03b7\u03bd \u03c7\u03c1\u03ae\u03c3\u03b7 \u03c4\u03b7\u03c2 Python \u03ba\u03b1\u03b9 \u03c4\u03bf\u03c5 Django.\r\n\u03a7\u03c1\u03b7\u03c3\u03b9\u03bc\u03bf\u03c0\u03bf\u03b9\u03ce\u03bd\u03c4\u03b1\u03c2 \u03c4\u03b9\u03c2 \u03c0\u03b9\u03bf \u03c3\u03cd\u03b3\u03c7\u03c1\u03bf\u03bd\u03ad\u03c2 \u03c4\u03b5\u03c7\u03bd\u03bf\u03bb\u03bf\u03b3\u03af\u03b5\u03c2,  \u03ad\u03c7\u03c9 \u03c4\u03b7\u03bd \u03b4\u03c5\u03bd\u03b1\u03c4\u03cc\u03c4\u03b7\u03c4\u03b1 \u03bd\u03b1 \u03c3\u03b1\u03c2 \u03c0\u03b1\u03c1\u03ad\u03c7\u03c9\r\n\u03b3\u03c1\u03ae\u03b3\u03bf\u03c1\u03b5\u03c2 \u03ba\u03b1\u03b9 \u03b1\u03be\u03b9\u03cc\u03c0\u03b9\u03c3\u03c4\u03b5\u03c2 \u03bb\u03cd\u03c3\u03b5\u03b9\u03c2 \u03c3\u03b5 \u03ba\u03ac\u03b8\u03b5 \u03c0\u03c1\u03cc\u03b2\u03bb\u03b7\u03bc\u03ac \u03c3\u03b1\u03c2.", "title_eng": "Info", "text_eng": "Hello , i am a self taught learner", "page_related": 1}}, {"model": "homepage.aboutpage", "pk": 1, "fields": {"active": true, "title": "About", "keywords": "", "description": "", "title_eng": "About", "keywords_eng": "", "description_eng": ""}}, {"model": "homepage.abouttecho", "pk": 1, "fields": {"active": true, "image": "tech/Github/GitHub-Logo.jpg", "title": "Github", "text": "Github", "title_eng": "Github", "text_eng": "<a href='https://github.com/Zefarak'> Saw my profile here!</a>", "page_related": 1, "delay": ".3s"}}, {"model": "homepage.abouttecho", "pk": 2, "fields": {"active": true, "image": "tech/Shorting url/url.png", "title": "Shorting url", "text": "<a href='/shorting-url/'> \u0394\u03b5\u03af\u03c4\u03b5 \u03c4\u03bf module </a>", "title_eng": "Shorting url", "text_eng": "<a href='/shorting-url/'> \u0394\u03b5\u03af\u03c4\u03b5 \u03c4\u03bf module </a>", "page_related": 1, "delay": ".5s"}}, {"model": "newsletter.join", "pk": 2, "fields": {"email": "magkaschris15@gmail.com", "timestamp": "2017-08-23T04:56:56.765Z"}}, {"model": "newsletter.join", "pk": 5, "fields": {"email": "kuu@gg.gr", "timestamp": "2017-08-27T19:51:44.533Z"}}, {"model": "newsletter.join", "pk": 6, "fields": {"email": "magdkaschris15@gmail.com", "timestamp": "2017-08-27T19:52:44.517Z"}}, {"model": "newsletter.join", "pk": 8, "fields": {"email": "lirageika@hotmail.gr", "timestamp": "2017-09-27T04:44:09.250Z"}}, {"model": "newsletter.join", "pk": 9, "fields": {"email": "fdff@fdf.gr", "timestamp": "2018-05-24T13:03:15.701Z"}}, {"model": "newsletter.join", "pk": 10, "fields": {"email": "fgvfg@gmail.com", "timestamp": "2018-05-24T13:04:25.944Z"}}, {"model": "newsletter.join", "pk": 11, "fields": {"email": "liragheika@hotmail.gr", "timestamp": "2018-07-15T07:32:02.099Z"}}, {"model": "newsletter.join", "pk": 12, "fields": {"email": "flemmer@outlook.com", "timestamp": "2020-02-17T23:13:13.140Z"}}, {"model": "projects.projectcategory", "pk": 1, "fields": {"title": "Backend", "title_eng": "Backend"}}, {"model": "projects.projectcategory", "pk": 2, "fields": {"title": "Website", "title_eng": "website"}}, {"model": "projects.projectcategory", "pk": 3, "fields": {"title": "\u0392\u03b9\u03bf\u03b3\u03c1\u03b1\u03c6\u03b9\u03ba\u03cc Site", "title_eng": "Portfolio"}}, {"model": "projects.projectcategory", "pk": 4, "fields": {"title": "E-Commerce", "title_eng": "E-Commerce"}}, {"model": "projects.projects", "pk": 1, "fields": {"active": false, "show_first_page": false, "active_eng": true, "title": "Warehouse Management", "short_description": "Web app \u03b3\u03b9\u03b1 \u03b4\u03b9\u03b1\u03c7\u03b5\u03af\u03c1\u03b9\u03c3\u03b7 \u03bb\u03b9\u03b1\u03bd\u03b9\u03ba\u03bf\u03cd \u03ba\u03b1\u03c4\u03b1\u03c3\u03c4\u03ae\u03bc\u03b1\u03c4\u03bf\u03c2, \u03a7\u03c1\u03b7\u03c3\u03b9\u03bc\u03bf\u03c0\u03bf\u03b9\u03b5\u03af\u03c4\u03b1\u03b9 \u03ba\u03b1\u03b9 \u03c3\u03b1\u03bd \u03b5\u03c0\u03ad\u03ba\u03c4\u03b1\u03c3\u03b7 \u03c3\u03b5 ecommerce website", "description": "<p>&Sigma;&epsilon; &alpha;&upsilon;&tau;\u03cc &tau;&omicron; app &theta;&alpha; &beta;&rho;&epsilon;\u03af&tau;&epsilon;</p>\r\n<ul>\r\n<li>&Delta;&iota;&alpha;&chi;&epsilon;\u03af&rho;&iota;&sigma;&eta; &tau;&iota;&mu;&omicron;&lambda;&omicron;&gamma;\u03af&omega;&nu;, &pi;&rho;&omicron;\u03ca\u03cc&nu;&tau;&omega;&nu;, &mu;&iota;&sigma;&theta;&omicron;&delta;&omicron;&sigma;\u03af&alpha;&sigmaf; &kappa;&alpha;&iota; &Pi;\u03ac&gamma;&iota;&omega;&nu; &Epsilon;&xi;\u03cc&delta;&omega;&nu;</li>\r\n<li>&Kappa;&alpha;&tau;\u03ac&lambda;&omicron;&gamma;&omicron;&iota; &Pi;&epsilon;&lambda;&alpha;&tau;\u03ce&nu; &kappa;&alpha;&iota; &Pi;&rho;&omicron;&mu;&eta;&theta;&epsilon;&upsilon;&tau;\u03ce&nu;</li>\r\n<li>&Alpha;&nu;\u03ac&lambda;&upsilon;&sigma;&eta; &Pi;&omega;&lambda;\u03ae&sigma;&epsilon;&omega;&nu;</li>\r\n<li>&Iota;&sigma;&tau;&omicron;&rho;&iota;&kappa;&omicron; &Pi;&omega;&lambda;\u03ae&sigma;&epsilon;&omega;&nu; - &Alpha;&gamma;&omicron;&rho;\u03ce&nu; &Pi;&rho;&omicron;\u03ca\u03cc&nu;&tau;&omega;&nu;</li>\r\n<li>&Alpha;&pi;&omicron;&gamma;&rho;&alpha;&phi;\u03ae</li>\r\n<li>Point of Sale</li>\r\n</ul>", "seo_description": null, "seo_keywords": null, "slug": "warehouse", "title_eng": "Warehouse Management.", "short_description_eng": "False", "description_eng": "<p>This is a app that, can be added on the main eshop and here you can get reports&nbsp;</p>\r\n<p>and management for</p>\r\n<ul>\r\n<li>Management Warehouse Invoice, Payroll and bills,</li>\r\n<li>Costumers analysis</li>\r\n<li>Product History and Analysis.</li>\r\n<li>Retail Orders and Invoices and Sells analysis</li>\r\n<li>Point of Sale&nbsp;</li>\r\n</ul>", "seo_description_eng": "A django app about managment warehouse", "seo_keywords_eng": "warehouse, backend,", "image": "ware.jpg", "category": 1, "day_added": "2017-08-23", "href": "http://christosstath.pythonanywhere.com/reports/isologismos/", "github": "https://github.com/Zefarak/warehouse", "demo": true}}, {"model": "projects.projects", "pk": 2, "fields": {"active": true, "show_first_page": true, "active_eng": true, "title": "diamantis.gr", "short_description": "Blog app \u03b3\u03b9\u03b1 \u03c4\u03b7\u03bd \u03c0\u03b1\u03c1\u03bf\u03c5\u03c3\u03af\u03b1\u03c3\u03b7 \u03a8\u03b1\u03c1\u03bf\u03c4\u03b1\u03b2\u03ad\u03c1\u03bd\u03b1\u03c2, \u03bc\u03b5 \u03b5\u03c0\u03b9\u03bb\u03bf\u03b3\u03ae \u03ba\u03bb\u03b5\u03b9\u03c3\u03af\u03bc\u03b1\u03c4\u03bf\u03c2 \u03c4\u03c1\u03b1\u03c0\u03b5\u03b6\u03b9\u03bf\u03cd, \u03ba\u03b1\u03b9 \u03c0\u03b1\u03c1\u03bf\u03c5\u03c3\u03af\u03b1\u03c3\u03b7 \u03c0\u03c1\u03bf\u03ca\u03cc\u03bd\u03c4\u03c9\u03bd.", "description": "<p>This is a website project for restaurant portfolio.</p>\r\n<p>In this project we created for the costumer</p>\r\n<ul>\r\n<li><strong>A blog app.</strong></li>\r\n</ul>\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;On this blog app he can use the posts to create some announcements or making some cooking advices</p>\r\n<ul>\r\n<li><strong>A recipe app.</strong></li>\r\n</ul>\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; On this section the costumer can describe the recipe add the price, the&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; category and add any photo he wants</p>\r\n<ul>\r\n<li><strong>A newsletter app.</strong></li>\r\n</ul>\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Connects the website with the people interest, feeding them the news&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; or&nbsp; some events. We can connect it with mailchip (there is on the blog&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; section a tutorial)</p>", "seo_description": "\u0388\u03bd\u03b1 \u03b4\u03b5\u03af\u03b3\u03bc\u03b1 \u03c0\u03c1\u03bf\u03b2\u03bf\u03bb\u03ae\u03c2 \u03c3\u03b5\u03bb\u03af\u03b4\u03b1\u03c2 \u03b5\u03c3\u03c4\u03b9\u03b1\u03c4\u03bf\u03c1\u03af\u03bf\u03c5", "seo_keywords": "restaurant website, django, python, programming, html, css, javacript, backend", "slug": "restaurant-website", "title_eng": "diamantis.gr", "short_description_eng": "Website created for a fish restaurant in Greece", "description_eng": "<p>This is a website project for restaurant portfolio.</p>\r\n<p>In this project we created for the costumer.</p>\r\n<ul>\r\n<li><strong>A blog app.</strong></li>\r\n</ul>\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;On this blog app he can use the posts to create some announcements&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;or making some cooking advices</p>\r\n<ul>\r\n<li><strong>A recipe app.</strong></li>\r\n</ul>\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; On this section the costumer can describe the recipe add the price, the&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; category and add any photo he wants</p>\r\n<ul>\r\n<li><strong>A newsletter app.</strong></li>\r\n</ul>\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Connects the website with the people interest, feeding them the news&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; or&nbsp; some events. We can connect it with mailchip (there is on the blog&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; section a tutorial)</p>", "seo_description_eng": "Restaurant Website", "seo_keywords_eng": "Restaurant, website, django, backend,", "image": "diamantis_1.jpg", "category": 2, "day_added": "2017-08-28", "href": "http://www.diamanths.gr/", "github": "https://github.com/Zefarak/laggis-test", "demo": true}}, {"model": "projects.projects", "pk": 3, "fields": {"active": true, "show_first_page": false, "active_eng": true, "title": "Art Design PortFolio", "short_description": "\u0394\u03bf\u03ba\u03b9\u03bc\u03b1\u03c3\u03c4\u03b9\u03ba\u03cc Site \u03b3\u03b9\u03b1 portfolio , \u03ba\u03b1\u03b9 \u03c0\u03b1\u03c1\u03bf\u03c5\u03c3\u03b9\u03ac\u03c3\u03b5\u03b9 project \u03b3\u03b9\u03b1 Art Designer", "description": "<p>&Tau;his is a portfolio website which have some different&nbsp;aproaches. The main approach is the project app&nbsp;which differs the projects having their own style Every project have his mini page which the costumer can add color styles or different fonts giving a special tone to it Offcourse don't forget the art app which contains different collections of the costumer creations On top on that we focused created a enviroment&nbsp;can the costumer can control the site and the newsletter app that connects the site onwer&nbsp;with his people.</p>", "seo_description": "\u0388\u03bd\u03b1 portfolio \u03b3\u03b9\u03b1 \u03ad\u03bd\u03b1 \u03b4\u03b7\u03bc\u03b9\u03bf\u03c5\u03c1\u03b3\u03cc videogames.", "seo_keywords": "django, python ,portfolio, programming, art,  videogames", "slug": "game-design-levavour", "title_eng": "Art Design PortFolio", "short_description_eng": "False", "description_eng": "<p>This is a demo website which created with images and files of a friend proffesional game designer. One highlight is&nbsp;<a href=\"http://levavour.herokuapp.com/project/project-test/\" target=\"_blank\">this</a>&nbsp;.</p>\r\n<p>&nbsp;</p>\r\n<p>Some feautures have</p>\r\n<ol>\r\n<li>Different aproach for art and project design</li>\r\n<li>Newsletter mechanism</li>\r\n<li>Email Contact mechanism</li>\r\n</ol>\r\n<p>&nbsp;</p>", "seo_description_eng": "A site for a game art designer.", "seo_keywords_eng": "django, python ,portfolio, programming, art,  videogames", "image": "levavour.jpg", "category": 3, "day_added": "2017-10-03", "href": "http://levavour.herokuapp.com/", "github": "https://github.com/Zefarak/levavour", "demo": true}}, {"model": "projects.projects", "pk": 4, "fields": {"active": true, "show_first_page": true, "active_eng": true, "title": "A Blog about a e commerce!", "short_description": "Blog \u03a0\u03bf\u03c5 \u03c0\u03b1\u03c1\u03bf\u03c5\u03c3\u03b9\u03ac\u03b6\u03b5\u03b9 \u03c0\u03c1\u03bf\u03ca\u03cc\u03bd\u03c4\u03b1 \u03bb\u03b9\u03b1\u03bd\u03b9\u03ba\u03bf\u03cd \u039a\u03b1\u03c4\u03b1\u03c3\u03c4\u03ae\u03bc\u03b1\u03c4\u03bf\u03c2.", "description": "<p>This site is made with django 1.10, a bit old project. Its a site that contains some posts about a greek eshop and informations for every local store on different page. One nice feature is the continues load on posts.</p>", "seo_description": null, "seo_keywords": "tt", "slug": "a-blog-about-a-eshop", "title_eng": "Simply blog made for promoting a Eshop", "short_description_eng": "Created for promotion use.", "description_eng": "<p>This site is made with django 1.10, a bit old project. Its a site that contains some posts about a greek eshop and informations for every local store on different page. One nice feature is the continues load on posts.</p>", "seo_description_eng": "A blog made with python and Django", "seo_keywords_eng": "Blog, python, django, app,", "image": "lagrace.jpg", "category": 2, "day_added": "2017-11-18", "href": "https://www.lagrace.gr", "github": "https://github.com/Zefarak/lagrace_blog", "demo": false}}, {"model": "projects.projects", "pk": 5, "fields": {"active": false, "show_first_page": false, "active_eng": true, "title": "Cafe Shop", "short_description": "\u0388\u03bd\u03b1 app \u03c0\u03bf\u03c5 \u03b4\u03b9\u03b1\u03c7\u03b5\u03b9\u03c1\u03af\u03b6\u03b5\u03c4\u03b1\u03b9 online \u03c0\u03b1\u03c1\u03b1\u03b3\u03b3\u03b5\u03bb\u03af\u03b5\u03c2 \u03b3\u03b9\u03b1 \u03ba\u03b1\u03c6\u03b5\u03c4\u03ad\u03c1\u03b9\u03b1.", "description": "<p>&Sigma;&epsilon; &alpha;&upsilon;&tau;\u03cc &tau;&omicron; app &theta;&alpha; &pi;&alpha;&rho;&omicron;\u03cd&sigma;&iota;\u03ac&zeta;&omega; &mu;\u03af&alpha; &epsilon;\u03cd&kappa;&omicron;&lambda;&eta; &lambda;\u03cd&sigma;&eta; &gamma;&iota;&alpha; &delta;&iota;&alpha;&chi;&epsilon;\u03af&rho;&eta;&sigma;&eta; &epsilon;&sigma;&tau;&iota;&alpha;&tau;&omicron;&rho;\u03af&omicron;&upsilon; \u03ae &kappa;&alpha;&phi;&epsilon;&tau;\u03ad&rho;&iota;&alpha;&sigmaf; &mu;&epsilon; &pi;&alpha;&rho;&omicron;&upsilon;&sigma;\u03af&alpha;&sigma;&eta; Online Content &tau;&omega;&nu; &pi;&rho;&omicron;\u03ca\u03cc&nu;&tau;&omega;&nu; &kappa;&alpha;&iota; &epsilon;\u03cd&kappa;&omicron;&lambda;&eta; &delta;&iota;&alpha;&delta;&iota;&kappa;&alpha;&sigma;\u03af&alpha; &pi;&alpha;&rho;&alpha;&gamma;&gamma;&epsilon;&lambda;\u03af&alpha;&sigmaf;</p>\r\n<p>&Tau;&alpha; &beta;&alpha;&sigma;&iota;&kappa;\u03ac &sigma;&tau;&omicron;\u03af&chi;&epsilon;&iota;&alpha; &pi;&omicron;&theta; &pi;&alpha;&rho;&omicron;&upsilon;&sigma;&iota;\u03ac&zeta;&omega; &epsilon;\u03af&nu;&alpha;&iota; &tau;&alpha; &epsilon;&xi;\u03ae&sigmaf;:</p>\r\n<ul>\r\n<li>&Epsilon;&pi;&iota;&lambda;&omicron;&gamma;\u03ae &epsilon;&pi;&alpha;&nu;&alpha;&lambda;&alpha;&beta;\u03cc&mu;&epsilon;&nu;&eta;&sigmaf; &pi;&alpha;&rho;&alpha;&gamma;&gamma;&epsilon;&lambda;\u03af&alpha;&sigmaf; &alpha;&pi;\u03cc &tau;&omicron;&nu; &Chi;&rho;\u03ae&sigma;&tau;&eta;</li>\r\n<li>&Epsilon;\u03cd&kappa;&omicron;&lambda;&eta; &delta;&eta;&mu;&iota;&omicron;&upsilon;&rho;&gamma;\u03af&alpha; &pi;&rho;&omicron;\u03ca\u03cc&nu;&tau;&omega;&nu; &kappa;&alpha;&iota; &pi;&alpha;&rho;&omicron;&upsilon;&sigma;\u03af&alpha;&sigma;&eta;&sigmaf; &sigma;&tau;&omicron;&nu; &tau;&epsilon;&lambda;&iota;&kappa;\u03cc &Chi;&rho;\u03ae&sigma;&tau;&eta;</li>\r\n<li>Cart &kappa;&alpha;&iota; &Iota;nvoices</li>\r\n<li>&Epsilon;&pi;&iota;&lambda;&omicron;&gamma;\u03ae &delta;&eta;&mu;&iota;&omicron;&upsilon;&rho;&gamma;&iota;&alpha;&sigmaf; &Pi;&rho;&omicron;&sigma;&phi;\u03cc&rho;&omega;&nu;</li>\r\n<li>\u0388&pi;&epsilon;&kappa;&tau;&alpha;&sigma;&eta; &mu;&epsilon; module &gamma;&iota;&alpha; &delta;&iota;&alpha;&chi;&epsilon;\u03af&rho;&eta;&sigma;&eta; &pi;&rho;&omicron;&sigma;&omega;&pi;&iota;&kappa;&omicron;\u03cd &kappa;&alpha;&iota; &alpha;&pi;&omicron;&theta;\u03ae&kappa;&eta;&sigmaf;</li>\r\n</ul>", "seo_description": null, "seo_keywords": null, "slug": "cafe-shop", "title_eng": "Cafe shop eCommerce", "short_description_eng": "False", "description_eng": "<p>A simple site tha <strong>contains</strong></p>\r\n<ul>\r\n<li><span style=\"font-size: 10px;\"><em>Cart.</em>&nbsp;Easy use and remembers user previous choice for faster re-ordering.</span></li>\r\n<li><span style=\"font-size: 10px;\">Facebook and google login. Easy login and creating account.</span></li>\r\n<li><span style=\"font-size: 10px;\">Easy ordering management. The staff get warnings about new orders and they can easy managment from admin</span></li>\r\n<li>Products with or not ingriendements like sugar etc..</li>\r\n<li>Gift system, if&nbsp; you want to add a free bottle of water with your coffee</li>\r\n<li>Fast Re-ordering</li>\r\n<li></li>\r\n</ul>", "seo_description_eng": "Insert Text", "seo_keywords_eng": "Insert Text", "image": "codee.png", "category": 4, "day_added": "2017-12-12", "href": "http://christosstath.pythonanywhere.com", "github": "https://github.com/Zefarak/cafe-resto", "demo": true}}, {"model": "projects.projects", "pk": 6, "fields": {"active": false, "show_first_page": false, "active_eng": true, "title": "Gym Site Demo", "short_description": "Gym Site Demo", "description": "<p>fdgdfgf</p>", "seo_description": null, "seo_keywords": null, "slug": "gym-site-demo", "title_eng": "Gym Site Demo", "short_description_eng": "False", "description_eng": "<p>Insert Text</p>", "seo_description_eng": "Insert Text", "seo_keywords_eng": "Insert Text", "image": "gym.jpg", "category": 2, "day_added": "2018-05-07", "href": "http://lirageika.pythonanywhere.com", "github": "https://github.com/Zefarak/gym_site", "demo": true}}, {"model": "projects.projects", "pk": 7, "fields": {"active": true, "show_first_page": false, "active_eng": true, "title": "E-commerce", "short_description": "\u0388\u03bd\u03b1 app \u03c0\u03bf\u03c5 \u03b4\u03b9\u03b1\u03c7\u03b5\u03b9\u03c1\u03af\u03b6\u03b5\u03c4\u03b1\u03b9 online \u03c0\u03b1\u03c1\u03b1\u03b3\u03b3\u03b5\u03bb\u03af\u03b5\u03c2 \u03b3\u03b9\u03b1 \u03ba\u03b1\u03c6\u03b5\u03c4\u03ad\u03c1\u03b9\u03b1.", "description": "<p>df</p>", "seo_description": null, "seo_keywords": null, "slug": "e-commerce", "title_eng": "E-commerce", "short_description_eng": "False", "description_eng": "<p>This project contains alot of features. First is build with django 2.0 and for frontend i just used a simply template from --&gt;</p>\r\n<p>&nbsp;</p>\r\n<p><strong>Now the backend</strong></p>\r\n<p>&nbsp;</p>\r\n<p>The app contains 3 major parts</p>\r\n<ul>\r\n<li>The part that control the eshop and frontend</li>\r\n<li>The part that you can do warehouse managment and its optional</li>\r\n<li>And final the part that contains the reports for anything happens here</li>\r\n</ul>\r\n<p>&nbsp;</p>\r\n<p>Eshop and front End</p>\r\n<p>Front end have 7 pages, The main page, search page, categories page, brand, checkout, cart and user page.</p>\r\n<p>&nbsp;</p>\r\n<p>Backend where most work is done have some nice drag and drop image feature, copy a product, add Characteristics and Size Manager.&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"text-decoration: underline;\"><strong>Not Ready yet</strong></span></p>", "seo_description_eng": "Demo site for E-commerce", "seo_keywords_eng": "python , django, jquery, Programming", "image": "no-photo.jpg", "category": 4, "day_added": "2018-09-14", "href": "http://christosstath.pythonanywhere.com/new_products/", "github": "https://github.com/Zefarak/my_shop", "demo": true}}, {"model": "projects.projects", "pk": 8, "fields": {"active": true, "show_first_page": true, "active_eng": true, "title": "Catalogue for a local store", "short_description": "test_1", "description": "<p>This was created using Django 2.0.7, and bootstrap 4</p>\r\n<p>About the templates theme i used you can find more details here -&gt;&nbsp;<a href=\"https://www.creative-tim.com/\" target=\"_blank\">https://www.creative-tim.com/</a></p>\r\n<p>&nbsp;</p>\r\n<p>In this project i created, contains</p>\r\n<ul>\r\n<li>A app for product managment</li>\r\n<li>A app for control the offer page</li>\r\n</ul>\r\n<p>&nbsp;</p>\r\n<p>And its also contains a custom cache managment. This cache managment will clean and reload with spefific actions added on admin.</p>\r\n<p>And every view have its own cache. I am currectly using a server with memcache</p>", "seo_description": null, "seo_keywords": null, "slug": "catalogue-for-multishop", "title_eng": "Website for a local store", "short_description_eng": "The site is made for the Store Monastiraki in Greece", "description_eng": "<p>This was created using Django 2.0.7, and bootstrap 4</p>\r\n<p>About the templates theme i used you can find more details here -&gt;&nbsp;<a href=\"https://www.creative-tim.com/\" target=\"_blank\">https://www.creative-tim.com/</a></p>\r\n<p>&nbsp;</p>\r\n<p>In this project i created, contains</p>\r\n<ul>\r\n<li>A app for product managment</li>\r\n<li>A app for control the offer page</li>\r\n</ul>\r\n<p>&nbsp;</p>\r\n<p>And its also contains a custom cache managment. This cache managment will clean and reload with spefific actions added on admin.</p>\r\n<p>And every view have its own cache. I am currectly using a server with memcache. If you want to use it for your own you can either&nbsp;</p>\r\n<p>change the on the settings the&nbsp; USE_REAL_DB,&nbsp; and on the cache_manager file&nbsp;<span class=\"pl-c1\">LOCAL_CACHE to False or add your own credentials to the project.</span></p>\r\n<p>&nbsp;</p>", "seo_description_eng": "Insert Text", "seo_keywords_eng": "Insert Text", "image": "monastiraki_promo.jpg", "category": 4, "day_added": "2019-03-29", "href": "https://monastiraki.herokuapp.com/", "github": "https://github.com/Zefarak/mikro_monastiraki", "demo": false}}, {"model": "projects.projects", "pk": 9, "fields": {"active": true, "show_first_page": true, "active_eng": true, "title": "stamatakos", "short_description": "stamatakos", "description": "<p>stamatakos</p>", "seo_description": null, "seo_keywords": null, "slug": "stamatakos", "title_eng": "Stamatakos Farm", "short_description_eng": "Website Created for a organic Farm", "description_eng": "<p>Insert Text</p>", "seo_description_eng": "Insert Text", "seo_keywords_eng": "Insert Text", "image": "stamatakos.jpg", "category": 4, "day_added": "2019-04-03", "href": null, "github": null, "demo": false}}, {"model": "projects.projects", "pk": 10, "fields": {"active": true, "show_first_page": true, "active_eng": true, "title": "Simply-You", "short_description": "Eshop for woman cloth and accessories", "description": "<p>j</p>", "seo_description": null, "seo_keywords": null, "slug": "simply-you", "title_eng": "Simply-You", "short_description_eng": "Eshop for woman cloth and accessories", "description_eng": "<p>This site contains</p>\r\n<ol>\r\n<li>Product Catalogue</li>\r\n<li>Cart</li>\r\n<li>Order Managment</li>\r\n<li>Vouchers</li>\r\n<li>Contanct Form</li>\r\n<li>NewsLetter Manager</li>\r\n<li>Mass discount</li>\r\n<li>Seo and GDPR&nbsp; etc</li>\r\n</ol>", "seo_description_eng": "Insert Text", "seo_keywords_eng": "Insert Text", "image": "14718680_1683075708579738_7562744195006236613_n.jpg", "category": 4, "day_added": "2019-10-04", "href": "http://simply-you.herokuapp.com/", "github": null, "demo": false}}, {"model": "projects.projects", "pk": 11, "fields": {"active": true, "show_first_page": true, "active_eng": true, "title": "Optika kotsalis", "short_description": "Eshop created for Sunglasses & Prescription Eyeglasses", "description": "<p>This site contains</p>\r\n<ol>\r\n<li>Product Catalogue</li>\r\n<li>Cart</li>\r\n<li>Order Managment</li>\r\n<li>Vouchers</li>\r\n<li>Contanct Form</li>\r\n<li>NewsLetter Manager</li>\r\n<li>Mass discount</li>\r\n<li>Seo and GDPR&nbsp; etc</li>\r\n</ol>", "seo_description": null, "seo_keywords": null, "slug": "optika-kotsalis", "title_eng": "Optika kotsalis", "short_description_eng": "Eshop created for Sunglasses & Prescription", "description_eng": "<p>This site contains</p>\r\n<ol>\r\n<li>Product Catalogue</li>\r\n<li>Cart</li>\r\n<li>Order Managment</li>\r\n<li>Vouchers</li>\r\n<li>Contanct Form</li>\r\n<li>NewsLetter Manager</li>\r\n<li>Mass discount</li>\r\n<li>Seo and GDPR&nbsp; etc</li>\r\n</ol>", "seo_description_eng": "Insert Text", "seo_keywords_eng": "Insert Text", "image": "eyeglasses.jpg", "category": 4, "day_added": "2019-10-04", "href": null, "github": null, "demo": false}}, {"model": "projects.imageproject", "pk": 1, "fields": {"title": "Admin Main Page", "alt": "", "image": "order_admin.jpg", "text": "", "project_related": 5, "active": true}}, {"model": "projects.imageproject", "pk": 2, "fields": {"title": "New Products", "alt": "", "image": "new_products.jpg", "text": "", "project_related": 5, "active": true}}, {"model": "blog.postcategory", "pk": 1, "fields": {"title": "Django", "slug": "django", "content": "", "parent": null, "lft": 1, "rght": 2, "tree_id": 4, "level": 0}}, {"model": "blog.postcategory", "pk": 2, "fields": {"title": "Javascript", "slug": "javascript", "content": "", "parent": null, "lft": 1, "rght": 2, "tree_id": 6, "level": 0}}, {"model": "blog.postcategory", "pk": 3, "fields": {"title": "Programming", "slug": "programming", "content": "", "parent": null, "lft": 1, "rght": 2, "tree_id": 3, "level": 0}}, {"model": "blog.postcategory", "pk": 4, "fields": {"title": "Django-Blog", "slug": "django-blog", "content": "", "parent": null, "lft": 1, "rght": 2, "tree_id": 5, "level": 0}}, {"model": "blog.gallery", "pk": 1, "fields": {"title": "Gallery", "file": "gallery/Gallery/BETATESTINGsquareStampRed.jpg"}}, {"model": "blog.gallery", "pk": 2, "fields": {"title": "Gallery", "file": "gallery/Gallery/liophos.jpg"}}, {"model": "short_url.shortingurl", "pk": 1, "fields": {"url": "https://www.youtube.com/watch?v=KO4TLTsoAjw", "costumer_code": "emily", "shortcode": "emily", "timestamp": "2017-07-21T05:01:36.241Z", "update": "2017-07-21T05:01:36.241Z", "active": true}}, {"model": "short_url.shortingurl", "pk": 2, "fields": {"url": "https://www.youtube.com/watch?v=KO4TLTsoAjw", "costumer_code": "jhhjhjhj", "shortcode": "jhhjhjhj", "timestamp": "2017-07-21T05:04:08.635Z", "update": "2017-07-21T05:04:09.123Z", "active": true}}, {"model": "short_url.shortingurl", "pk": 3, "fields": {"url": "https://www.youtube.com/watch?v=KO4TLTsoAjw", "costumer_code": "", "shortcode": "jfk2b5", "timestamp": "2017-07-21T05:04:27.498Z", "update": "2017-07-21T05:04:27.999Z", "active": true}}, {"model": "short_url.shortingurl", "pk": 4, "fields": {"url": "https://www.youtube.com/watch?v=z3YMxM1_S48", "costumer_code": "jhhjhjhjhj", "shortcode": "jhhjhjhjhj", "timestamp": "2017-07-21T05:15:50.720Z", "update": "2017-07-21T05:15:50.970Z", "active": true}}, {"model": "short_url.shortingurl", "pk": 5, "fields": {"url": "https://www.youtube.com/watch?v=ICjyAe9S54c", "costumer_code": "fertyu", "shortcode": "fertyu", "timestamp": "2017-07-21T05:18:26.362Z", "update": "2017-07-21T05:18:26.599Z", "active": true}}, {"model": "short_url.shortingurl", "pk": 6, "fields": {"url": "https://www.facebook.com/", "costumer_code": "", "shortcode": "t6uhwx", "timestamp": "2017-07-21T05:21:30.234Z", "update": "2017-07-21T05:21:30.485Z", "active": true}}, {"model": "short_url.shortingurl", "pk": 7, "fields": {"url": "https://www.youtube.com/watch?v=nKNMuF9z9Bk&list=PLlV4L_kJ5bxyt9sRtnK80p4HDy7TIE86O&index=11", "costumer_code": null, "shortcode": "q3ktk2", "timestamp": "2017-07-21T06:10:35.370Z", "update": "2017-07-21T06:10:35.707Z", "active": true}}, {"model": "short_url.shortingurl", "pk": 8, "fields": {"url": "http://37.59.32.115:6224/stream", "costumer_code": null, "shortcode": "b556eb", "timestamp": "2017-07-21T06:42:30.591Z", "update": "2017-07-21T06:42:30.614Z", "active": true}}, {"model": "short_url.shortingurl", "pk": 9, "fields": {"url": "https://www.google.gr/search?q=jquery+document.ready&ie=utf-8&oe=utf-8&client=firefox-b-ab&gfe_rd=cr&ei=xyVyWfWqCIeO8Qe7xoWgDg", "costumer_code": null, "shortcode": "tenddk", "timestamp": "2017-07-21T16:25:17.173Z", "update": "2017-07-21T16:25:17.181Z", "active": true}}, {"model": "short_url.shortingurl", "pk": 10, "fields": {"url": "http://try.jquery.com/levels/1/challenges/12", "costumer_code": null, "shortcode": "xc8e1l", "timestamp": "2017-07-21T16:26:05.949Z", "update": "2017-07-21T16:26:05.952Z", "active": true}}, {"model": "short_url.shortingurl", "pk": 11, "fields": {"url": "http://www.youporn.com", "costumer_code": null, "shortcode": "ytxtkx", "timestamp": "2017-07-21T16:31:27.744Z", "update": "2017-07-21T16:31:27.751Z", "active": true}}, {"model": "short_url.shortingurl", "pk": 12, "fields": {"url": "http://37.59.32.115:6224/stream", "costumer_code": null, "shortcode": "r6cd2m", "timestamp": "2017-07-21T15:19:20.512Z", "update": "2017-07-21T15:19:20.930Z", "active": true}}, {"model": "short_url.shortingurl", "pk": 13, "fields": {"url": "http://37.59.32.115:6224/stream", "costumer_code": "", "shortcode": "1kr80a", "timestamp": "2017-07-21T15:20:05.038Z", "update": "2017-07-21T15:22:01.055Z", "active": true}}, {"model": "short_url.shortingurl", "pk": 14, "fields": {"url": "https://www.youtube.com/watch?v=B4Vmm3yZPgc", "costumer_code": "djangojs", "shortcode": "djangojs", "timestamp": "2017-07-21T15:23:21.479Z", "update": "2017-07-21T15:23:21.780Z", "active": true}}, {"model": "short_url.shortingurl", "pk": 15, "fields": {"url": "https://www.youtube.com/watch?v=3jX5OQUnywY&index=1&list=PLEsfXFp6DpzTgDieSvwKL3CakR8XyKkBk", "costumer_code": "djangojs", "shortcode": "bbrqww", "timestamp": "2017-07-21T15:24:20.193Z", "update": "2017-07-21T15:24:20.497Z", "active": true}}, {"model": "short_url.shortingurl", "pk": 16, "fields": {"url": "https://www.youporn.com", "costumer_code": "radeon9800pro", "shortcode": "radeon9800pro", "timestamp": "2017-07-21T18:38:37.158Z", "update": "2017-07-21T18:38:37.161Z", "active": true}}, {"model": "short_url.shortingurl", "pk": 17, "fields": {"url": "https://www.pornhub.com/", "costumer_code": "fai-skorda-dora", "shortcode": "fai-skorda-dora", "timestamp": "2017-07-22T17:00:43.763Z", "update": "2017-07-22T17:00:43.770Z", "active": true}}, {"model": "short_url.shortingurl", "pk": 18, "fields": {"url": "https://www.coursera.org/specializations/deep-learning?siteID=SAyYsTvLiGQ-qi9r9oJM988.K_ejjpBsjA&utm_content=10&utm_medium=partners&utm_source=linkshare&utm_campaign=SAyYsTvLiGQ", "costumer_code": "AI-awesome", "shortcode": "AI-awesome", "timestamp": "2017-08-12T15:40:12.220Z", "update": "2017-08-12T15:40:12.228Z", "active": true}}, {"model": "short_url.shortingurl", "pk": 19, "fields": {"url": "https://www.facebook.com/", "costumer_code": "tryrty", "shortcode": "tryrty", "timestamp": "2017-08-30T20:14:45.014Z", "update": "2017-08-30T20:14:45.234Z", "active": true}}, {"model": "short_url.shortingurl", "pk": 20, "fields": {"url": "http://www.imagine897.gr/el/", "costumer_code": "servertas", "shortcode": "servertas", "timestamp": "2017-11-18T10:30:06.897Z", "update": "2017-11-18T10:30:06.900Z", "active": true}}, {"model": "short_url.shortingurl", "pk": 21, "fields": {"url": "https://www.xvideos.com", "costumer_code": "triantafila", "shortcode": "triantafila", "timestamp": "2018-01-30T08:10:19.740Z", "update": "2018-01-30T08:10:19.748Z", "active": true}}, {"model": "short_url.shortingurl", "pk": 22, "fields": {"url": "http://www.imagine897.gr/el/", "costumer_code": "hthhyhyh", "shortcode": "hthhyhyh", "timestamp": "2018-05-06T16:52:38.352Z", "update": "2018-05-06T16:52:38.571Z", "active": true}}, {"model": "short_url.shortingurl", "pk": 23, "fields": {"url": "http://www.imagine897.gr/el/", "costumer_code": "imagine", "shortcode": "imagine", "timestamp": "2018-05-06T16:55:35.942Z", "update": "2018-05-06T16:55:36.177Z", "active": true}}, {"model": "short_url.shortingurl", "pk": 24, "fields": {"url": "http://www.imagine897.gr/el/", "costumer_code": "imaginefm", "shortcode": "imaginefm", "timestamp": "2018-05-06T16:56:11.474Z", "update": "2018-05-06T16:56:11.687Z", "active": true}}, {"model": "short_url.shortingurl", "pk": 25, "fields": {"url": "http://www.imagine897.gr/el/", "costumer_code": "kanakis", "shortcode": "kanakis", "timestamp": "2018-05-06T16:56:58.863Z", "update": "2018-05-06T16:56:59.071Z", "active": true}}, {"model": "short_url.shortingurl", "pk": 26, "fields": {"url": "https://mymoda.gr/?utm_source=telephone&utm_medium=direct?utm_source=telephone&utm_medium=direct", "costumer_code": "mymoda/link/", "shortcode": "mymoda/link/", "timestamp": "2018-05-11T12:21:25.999Z", "update": "2018-05-11T12:21:26.007Z", "active": true}}, {"model": "short_url.shortingurl", "pk": 27, "fields": {"url": "https://mymoda.gr/?utm_source=telephone&utm_medium=direct?utm_source=telephone&utm_medium=direct", "costumer_code": "mymoda-link", "shortcode": "mymoda-link", "timestamp": "2018-05-11T12:21:57.227Z", "update": "2018-05-11T12:21:57.231Z", "active": true}}, {"model": "short_url.shortingurl", "pk": 28, "fields": {"url": "https://www.mikro-monastiraki.gr/%CF%80%CF%81%CE%BF%CF%8A%CE%BF%CE%BD%CF%84%CE%B1-%CE%BA%CE%B1%CF%84%CE%B7%CE%B3%CE%BF%CF%81%CE%AF%CE%B1%CF%82/%CF%81%CE%BF%CE%BB%CE%BF%CE%B3%CE%B9%CE%B1/", "costumer_code": "\u03c1\u03bf\u03bb\u03bf\u03b3\u03b9\u03b1-\u03c7\u03b5\u03b9\u03c1\u03c9\u03c2", "shortcode": "\u03c1\u03bf\u03bb\u03bf\u03b3\u03b9\u03b1-\u03c7\u03b5\u03b9\u03c1\u03c9\u03c2", "timestamp": "2019-10-25T08:23:21.288Z", "update": "2019-10-25T08:23:21.301Z", "active": true}}, {"model": "short_url.shortingurl", "pk": 29, "fields": {"url": "https://www.pirate-bay.net/search?q=photoshop?q=photoshop", "costumer_code": "photoshop", "shortcode": "photoshop", "timestamp": "2020-04-26T20:33:52.736Z", "update": "2020-04-26T20:33:52.750Z", "active": true}}, {"model": "short_url.shortingurl", "pk": 30, "fields": {"url": "https://www.xvideos.com/", "costumer_code": "i-love-you", "shortcode": "i-love-you", "timestamp": "2020-05-11T20:42:51.807Z", "update": "2020-05-11T20:42:51.824Z", "active": true}}, {"model": "funny_projects.gymperson", "pk": 1, "fields": {"name": "Christos Stathakis", "slugfield": "", "deadlift": "150.00", "squats": "90.00", "bench_press": "62.50", "shoulder_press": "50.00"}}, {"model": "funny_projects.gymperson", "pk": 2, "fields": {"name": "John Aliferis", "slugfield": "a", "deadlift": "140.00", "squats": "105.00", "bench_press": "60.00", "shoulder_press": "45.00"}}, {"model": "funny_projects.gymperson", "pk": 3, "fields": {"name": "Antonis Stathakis", "slugfield": "ds", "deadlift": "40.00", "squats": "40.00", "bench_press": "30.00", "shoulder_press": "20.00"}}, {"model": "funny_projects.gymperson", "pk": 4, "fields": {"name": "John doukas", "slugfield": "Doukas", "deadlift": "195.00", "squats": "140.00", "bench_press": "100.00", "shoulder_press": "70.00"}}, {"model": "funny_projects.gymperson", "pk": 5, "fields": {"name": "Thodoris", "slugfield": "thodoris", "deadlift": "110.00", "squats": "100.00", "bench_press": "90.00", "shoulder_press": "75.00"}}, {"model": "backgammon.player", "pk": 1, "fields": {"title": "Christos Stathakis", "games_played": 138, "games_won": 62, "win_ratio": "0.45"}}, {"model": "backgammon.player", "pk": 2, "fields": {"title": "Takis Machairas", "games_played": 185, "games_won": 110, "win_ratio": "0.59"}}, {"model": "backgammon.player", "pk": 3, "fields": {"title": "John Aliferis", "games_played": 273, "games_won": 123, "win_ratio": "0.45"}}, {"model": "backgammon.player", "pk": 4, "fields": {"title": "Stefanos Apostolakis", "games_played": 32, "games_won": 19, "win_ratio": "0.59"}}, {"model": "backgammon.season", "pk": 1, "fields": {"title": "Season 1, 2018", "active": true, "minimum_games": 30, "date_start": "2018-05-01", "date_end": "2018-07-01", "winner": null}}, {"model": "backgammon.playerseason", "pk": 3, "fields": {"player": 1, "season": 1, "games_played": 138, "games_won": 62, "win_ratio": "0.45"}}, {"model": "backgammon.playerseason", "pk": 4, "fields": {"player": 2, "season": 1, "games_played": 185, "games_won": 110, "win_ratio": "0.59"}}, {"model": "backgammon.playerseason", "pk": 5, "fields": {"player": 3, "season": 1, "games_played": 273, "games_won": 123, "win_ratio": "0.45"}}, {"model": "backgammon.playerseason", "pk": 6, "fields": {"player": 4, "season": 1, "games_played": 32, "games_won": 19, "win_ratio": "0.59"}}, {"model": "backgammon.game", "pk": 1, "fields": {"date": "2018-05-01", "season": 1, "home": 3, "opponent": 4, "home_score": 7, "opponent_score": 6, "total_games": 13}}, {"model": "backgammon.game", "pk": 2, "fields": {"date": "2018-05-02", "season": 1, "home": 5, "opponent": 3, "home_score": 4, "opponent_score": 6, "total_games": 10}}, {"model": "backgammon.game", "pk": 4, "fields": {"date": "2018-05-11", "season": 1, "home": 5, "opponent": 3, "home_score": 6, "opponent_score": 2, "total_games": 8}}, {"model": "backgammon.game", "pk": 5, "fields": {"date": "2018-05-12", "season": 1, "home": 4, "opponent": 5, "home_score": 5, "opponent_score": 3, "total_games": 8}}, {"model": "backgammon.game", "pk": 6, "fields": {"date": "2018-05-12", "season": 1, "home": 5, "opponent": 3, "home_score": 5, "opponent_score": 1, "total_games": 6}}, {"model": "backgammon.game", "pk": 7, "fields": {"date": "2018-05-15", "season": 1, "home": 3, "opponent": 5, "home_score": 6, "opponent_score": 3, "total_games": 9}}, {"model": "backgammon.game", "pk": 8, "fields": {"date": "2018-05-15", "season": 1, "home": 6, "opponent": 5, "home_score": 5, "opponent_score": 1, "total_games": 6}}, {"model": "backgammon.game", "pk": 9, "fields": {"date": "2018-05-17", "season": 1, "home": 3, "opponent": 6, "home_score": 5, "opponent_score": 2, "total_games": 7}}, {"model": "backgammon.game", "pk": 10, "fields": {"date": "2018-05-17", "season": 1, "home": 5, "opponent": 3, "home_score": 5, "opponent_score": 0, "total_games": 5}}, {"model": "backgammon.game", "pk": 11, "fields": {"date": "2018-05-17", "season": 1, "home": 6, "opponent": 5, "home_score": 5, "opponent_score": 0, "total_games": 5}}, {"model": "backgammon.game", "pk": 12, "fields": {"date": "2018-05-20", "season": 1, "home": 4, "opponent": 5, "home_score": 6, "opponent_score": 3, "total_games": 9}}, {"model": "backgammon.game", "pk": 13, "fields": {"date": "2018-05-20", "season": 1, "home": 4, "opponent": 5, "home_score": 5, "opponent_score": 1, "total_games": 6}}, {"model": "backgammon.game", "pk": 14, "fields": {"date": "2018-05-21", "season": 1, "home": 4, "opponent": 5, "home_score": 6, "opponent_score": 2, "total_games": 8}}, {"model": "backgammon.game", "pk": 15, "fields": {"date": "2018-05-21", "season": 1, "home": 4, "opponent": 6, "home_score": 2, "opponent_score": 6, "total_games": 8}}, {"model": "backgammon.game", "pk": 16, "fields": {"date": "2018-05-21", "season": 1, "home": 5, "opponent": 6, "home_score": 5, "opponent_score": 1, "total_games": 6}}, {"model": "backgammon.game", "pk": 17, "fields": {"date": "2018-05-21", "season": 1, "home": 5, "opponent": 4, "home_score": 2, "opponent_score": 0, "total_games": 2}}, {"model": "backgammon.game", "pk": 18, "fields": {"date": "2018-05-25", "season": 1, "home": 4, "opponent": 5, "home_score": 6, "opponent_score": 3, "total_games": 9}}, {"model": "backgammon.game", "pk": 19, "fields": {"date": "2018-05-25", "season": 1, "home": 3, "opponent": 5, "home_score": 1, "opponent_score": 5, "total_games": 6}}, {"model": "backgammon.game", "pk": 20, "fields": {"date": "2018-05-27", "season": 1, "home": 4, "opponent": 5, "home_score": 10, "opponent_score": 5, "total_games": 15}}, {"model": "backgammon.game", "pk": 21, "fields": {"date": "2018-05-30", "season": 1, "home": 5, "opponent": 3, "home_score": 5, "opponent_score": 2, "total_games": 7}}, {"model": "backgammon.game", "pk": 22, "fields": {"date": "2018-05-30", "season": 1, "home": 4, "opponent": 5, "home_score": 6, "opponent_score": 2, "total_games": 8}}, {"model": "backgammon.game", "pk": 23, "fields": {"date": "2018-06-03", "season": 1, "home": 4, "opponent": 3, "home_score": 5, "opponent_score": 4, "total_games": 9}}, {"model": "backgammon.game", "pk": 24, "fields": {"date": "2018-06-03", "season": 1, "home": 5, "opponent": 3, "home_score": 5, "opponent_score": 2, "total_games": 7}}, {"model": "backgammon.game", "pk": 25, "fields": {"date": "2018-06-04", "season": 1, "home": 5, "opponent": 3, "home_score": 2, "opponent_score": 1, "total_games": 3}}, {"model": "backgammon.game", "pk": 26, "fields": {"date": "2018-06-07", "season": 1, "home": 4, "opponent": 5, "home_score": 9, "opponent_score": 7, "total_games": 16}}, {"model": "backgammon.game", "pk": 27, "fields": {"date": "2018-06-08", "season": 1, "home": 5, "opponent": 3, "home_score": 6, "opponent_score": 4, "total_games": 10}}, {"model": "backgammon.game", "pk": 28, "fields": {"date": "2018-06-09", "season": 1, "home": 4, "opponent": 5, "home_score": 7, "opponent_score": 1, "total_games": 8}}, {"model": "backgammon.game", "pk": 29, "fields": {"date": "2018-06-10", "season": 1, "home": 5, "opponent": 4, "home_score": 6, "opponent_score": 5, "total_games": 11}}, {"model": "backgammon.game", "pk": 30, "fields": {"date": "2018-06-15", "season": 1, "home": 4, "opponent": 5, "home_score": 10, "opponent_score": 6, "total_games": 16}}, {"model": "backgammon.game", "pk": 31, "fields": {"date": "2018-06-15", "season": 1, "home": 4, "opponent": 3, "home_score": 3, "opponent_score": 1, "total_games": 4}}, {"model": "backgammon.game", "pk": 32, "fields": {"date": "2018-06-18", "season": 1, "home": 3, "opponent": 5, "home_score": 7, "opponent_score": 4, "total_games": 11}}, {"model": "backgammon.game", "pk": 33, "fields": {"date": "2018-06-19", "season": 1, "home": 4, "opponent": 5, "home_score": 10, "opponent_score": 8, "total_games": 18}}, {"model": "backgammon.game", "pk": 34, "fields": {"date": "2018-06-20", "season": 1, "home": 4, "opponent": 5, "home_score": 5, "opponent_score": 0, "total_games": 5}}, {"model": "backgammon.game", "pk": 35, "fields": {"date": "2018-06-22", "season": 1, "home": 5, "opponent": 4, "home_score": 8, "opponent_score": 4, "total_games": 12}}, {"model": "backgammon.game", "pk": 36, "fields": {"date": "2018-06-23", "season": 1, "home": 5, "opponent": 3, "home_score": 6, "opponent_score": 4, "total_games": 10}}, {"model": "backgammon.game", "pk": 37, "fields": {"date": "2018-06-26", "season": 1, "home": 3, "opponent": 5, "home_score": 9, "opponent_score": 4, "total_games": 13}}, {"model": "contact.contact", "pk": 1, "fields": {"name": "Christos sta", "email": "lirageika@hotmail.gr", "message": "fdfdf", "timestamp": "2018-05-07T06:38:03.888Z", "is_readed": true}}, {"model": "contact.contact", "pk": 2, "fields": {"name": "test", "email": "lirageika@hotmail.gr", "message": "test oe oe oeoe o", "timestamp": "2019-04-03T14:17:04.420Z", "is_readed": false}}, {"model": "contact.contact", "pk": 3, "fields": {"name": "test from site", "email": "lirageika@hotmail.gr", "message": "test re si", "timestamp": "2019-04-03T14:28:06.401Z", "is_readed": false}}, {"model": "contact.contact", "pk": 4, "fields": {"name": "Gerda Navo", "email": "navo@interactivewise.com", "message": "Get The Best Value in Pro Email Marketing Tools.$0 to Start!\r\n\r\nTry GetResponse risk-free for 30 days: https://www.interactivewise.com/bestvalue\r\n\r\nIt's never been easier to connect with your audience and drive success for your business.\r\n\r\nFor 20 years, GetResponse has been a market leader helping over 1,000,000 entrepreneurs and small businesses accelerate their growth through powerfully-simple email marketing tools and expertise.\r\n\r\nStart accelerating your growth today: https://www.interactivewise.com/bestvalue\r\n\r\nBest regards,\r\n\r\nGerda Navo\r\n\r\n\r\n* Unsubscribe: send text \"don't\"", "timestamp": "2019-08-13T13:49:31.467Z", "is_readed": false}}, {"model": "contact.contact", "pk": 5, "fields": {"name": "Dawn Frasure", "email": "frasure@centtip.xyz", "message": "Invite Bloggers and Webmasters to Fill out Paid Surveys\r\n\r\nI'm Dawn from Centtip. \r\n\r\nWe are working with Inboxdollars to provide bloggers another opportunity to  earn cash or get rewards.\r\n\r\nAfter joining Inboxdollars, you will be able to get rewards by sharing your opinions online.\r\n\r\nPaid surveys have been prepared for you: https://www.centtip.xyz/paidsurvey \r\n\r\nRegards,\r\n\r\nDawn Frasure\r\n\r\n\r\nUnsubscribe: https://www.centtip.xyz/unsubscribe", "timestamp": "2019-10-18T12:25:22.767Z", "is_readed": false}}, {"model": "contact.contact", "pk": 6, "fields": {"name": "Ross Reynolds", "email": "reynolds@perfectmedialab.com", "message": "Inquiry from San Diego\r\n\r\nHello,\r\n\r\nMy name is Reynolds from Perfectmedialab, and we partner with Gotorro to help small business grow.\r\n\r\nAre you dissatisfied with the difficult loan application process? \r\n\r\nAre you dissatisfied with a lengthy wait for a credit decision?\r\n\r\nDo you think the process lacks transparency? \r\n\r\nGotorro offers easy access to fast, transparency and simply-priced small business loans to help you grow your business. The dedicated support staff ensure your total satisfaction\r\n\r\nTake 5 minutes to apply, and get funds within 24 hours of approval: https://www.perfectmedialab.com/getfunds\r\n\r\nRoss Reynolds\r\n\r\nCompany: Perfectmedialab\r\nAddress: 2448 Historic Decatur Rd #210, San Diego, CA 92106\r\nUnsubscribe: https://www.perfectmedialab.com/unsubscribe", "timestamp": "2019-12-17T17:10:37.348Z", "is_readed": false}}, {"model": "contact.contact", "pk": 7, "fields": {"name": "Concepcion Stimson", "email": "concepcion@centtip.com", "message": "Invite you to review our services\r\n\r\nHello,\r\n\r\nI'm is Stimson from Centtip.\r\nCenttip cooperates with Automattic, Google adsense, etc., provides them with data that webmasters' opinions on their product.\r\n\r\nI am contacting you because we are looking for webmaster/blogger/business owner like you to test our service.\r\n\r\nThe companies spend billions of dollars each year to obtain survey data. \r\nCenttip pays each member *** dollars daily for their opinions.\r\n\r\nIf you are interested, please visit: https://centtip.com/cashsurvey/ \r\n\r\nThank you for your time,\r\n\r\nConcepcion Stimson\r\n\r\n^^^^^^^^^^^^\r\nUnsubscribe: https://www.centtip.com/unsubscribe/", "timestamp": "2020-02-13T23:28:13.845Z", "is_readed": false}}, {"model": "sample_templates.category", "pk": 1, "fields": {"title": "Portfolio"}}, {"model": "sample_templates.category", "pk": 2, "fields": {"title": "Catalogue"}}, {"model": "sample_templates.category", "pk": 3, "fields": {"title": "E- Commerce"}}, {"model": "sample_templates.category", "pk": 4, "fields": {"title": "General Template"}}, {"model": "sample_templates.category", "pk": 5, "fields": {"title": "Ui KIt"}}, {"model": "sample_templates.templatesample", "pk": 1, "fields": {"active": true, "url": "https://demos.creative-tim.com/material-kit-pro/examples/ecommerce.html", "category": 3, "title": "Creative Tim Material Kit", "notes": "", "image": "products/1/maerial.jpg", "price": "80.00", "free_option": true}}, {"model": "sample_templates.templatesample", "pk": 2, "fields": {"active": true, "url": "https://demos.creative-tim.com/now-ui-kit/index.html", "category": 5, "title": "Now UI KIT", "notes": "", "image": "products/None/now_ui_kit.jpg", "price": "0.00", "free_option": true}}, {"model": "sample_templates.templatesample", "pk": 3, "fields": {"active": true, "url": "http://www.ansonika.com/panagea/", "category": 3, "title": "Panagea", "notes": "", "image": "products/None/panagea.jpg", "price": "28.00", "free_option": false}}, {"model": "sample_templates.templatesample", "pk": 4, "fields": {"active": true, "url": "https://portotheme.com/html/porto_ecommerce/", "category": 3, "title": "Porto", "notes": "", "image": "products/None/porto.jpg", "price": "17.00", "free_option": false}}, {"model": "sample_templates.templatesample", "pk": 5, "fields": {"active": true, "url": "http://demo.hasthemes.com/mimosa-v1/mimosa.html", "category": 3, "title": "Mimosa", "notes": "", "image": "products/None/mimosa.png", "price": "17.00", "free_option": false}}, {"model": "sample_templates.templatesample", "pk": 6, "fields": {"active": true, "url": "http://nouthemes.com/html/exist/index.html", "category": 3, "title": "exist", "notes": "", "image": "products/6/exist.png", "price": "25.00", "free_option": false}}, {"model": "sample_templates.templatesample", "pk": 7, "fields": {"active": true, "url": "https://themeforest.net/item/multikart-responsive-ecommerce-html-template/22809967", "category": 3, "title": "multicart", "notes": "", "image": "products/7/no_image.png", "price": "19.00", "free_option": false}}, {"model": "sample_templates.templatesample", "pk": 8, "fields": {"active": true, "url": "https://preview.themeforest.net/item/lezada-multipurpose-ecommerce-bootstrap-4-template/full_screen_preview/23106201?_ga=2.18404793.1491780067.1569474319-1097876698.1543893993", "category": 4, "title": "Lezada", "notes": "", "image": "products/8/no_image.png", "price": "17.00", "free_option": false}}, {"model": "sample_templates.templatesample", "pk": 9, "fields": {"active": true, "url": "https://themeforest.net/item/mirora-watch-luxury-store-opencart-theme/21700982", "category": 3, "title": "Mirora", "notes": "", "image": "products/9/no_image.png", "price": "48.00", "free_option": false}}, {"model": "auth.permission", "pk": 1, "fields": {"name": "Can add log entry", "content_type": 1, "codename": "add_logentry"}}, {"model": "auth.permission", "pk": 2, "fields": {"name": "Can change log entry", "content_type": 1, "codename": "change_logentry"}}, {"model": "auth.permission", "pk": 3, "fields": {"name": "Can delete log entry", "content_type": 1, "codename": "delete_logentry"}}, {"model": "auth.permission", "pk": 4, "fields": {"name": "Can add permission", "content_type": 2, "codename": "add_permission"}}, {"model": "auth.permission", "pk": 5, "fields": {"name": "Can change permission", "content_type": 2, "codename": "change_permission"}}, {"model": "auth.permission", "pk": 6, "fields": {"name": "Can delete permission", "content_type": 2, "codename": "delete_permission"}}, {"model": "auth.permission", "pk": 7, "fields": {"name": "Can add group", "content_type": 3, "codename": "add_group"}}, {"model": "auth.permission", "pk": 8, "fields": {"name": "Can change group", "content_type": 3, "codename": "change_group"}}, {"model": "auth.permission", "pk": 9, "fields": {"name": "Can delete group", "content_type": 3, "codename": "delete_group"}}, {"model": "auth.permission", "pk": 10, "fields": {"name": "Can add user", "content_type": 4, "codename": "add_user"}}, {"model": "auth.permission", "pk": 11, "fields": {"name": "Can change user", "content_type": 4, "codename": "change_user"}}, {"model": "auth.permission", "pk": 12, "fields": {"name": "Can delete user", "content_type": 4, "codename": "delete_user"}}, {"model": "auth.permission", "pk": 13, "fields": {"name": "Can add content type", "content_type": 5, "codename": "add_contenttype"}}, {"model": "auth.permission", "pk": 14, "fields": {"name": "Can change content type", "content_type": 5, "codename": "change_contenttype"}}, {"model": "auth.permission", "pk": 15, "fields": {"name": "Can delete content type", "content_type": 5, "codename": "delete_contenttype"}}, {"model": "auth.permission", "pk": 16, "fields": {"name": "Can add session", "content_type": 6, "codename": "add_session"}}, {"model": "auth.permission", "pk": 17, "fields": {"name": "Can change session", "content_type": 6, "codename": "change_session"}}, {"model": "auth.permission", "pk": 18, "fields": {"name": "Can delete session", "content_type": 6, "codename": "delete_session"}}, {"model": "auth.permission", "pk": 19, "fields": {"name": "Can add site", "content_type": 7, "codename": "add_site"}}, {"model": "auth.permission", "pk": 20, "fields": {"name": "Can change site", "content_type": 7, "codename": "change_site"}}, {"model": "auth.permission", "pk": 21, "fields": {"name": "Can delete site", "content_type": 7, "codename": "delete_site"}}, {"model": "auth.permission", "pk": 22, "fields": {"name": "Can add welcome page", "content_type": 8, "codename": "add_welcomepage"}}, {"model": "auth.permission", "pk": 23, "fields": {"name": "Can change welcome page", "content_type": 8, "codename": "change_welcomepage"}}, {"model": "auth.permission", "pk": 24, "fields": {"name": "Can delete welcome page", "content_type": 8, "codename": "delete_welcomepage"}}, {"model": "auth.permission", "pk": 25, "fields": {"name": "Can add main banner", "content_type": 9, "codename": "add_mainbanner"}}, {"model": "auth.permission", "pk": 26, "fields": {"name": "Can change main banner", "content_type": 9, "codename": "change_mainbanner"}}, {"model": "auth.permission", "pk": 27, "fields": {"name": "Can delete main banner", "content_type": 9, "codename": "delete_mainbanner"}}, {"model": "auth.permission", "pk": 28, "fields": {"name": "Can add about me", "content_type": 10, "codename": "add_aboutme"}}, {"model": "auth.permission", "pk": 29, "fields": {"name": "Can change about me", "content_type": 10, "codename": "change_aboutme"}}, {"model": "auth.permission", "pk": 30, "fields": {"name": "Can delete about me", "content_type": 10, "codename": "delete_aboutme"}}, {"model": "auth.permission", "pk": 31, "fields": {"name": "Can add about me bar", "content_type": 11, "codename": "add_aboutmebar"}}, {"model": "auth.permission", "pk": 32, "fields": {"name": "Can change about me bar", "content_type": 11, "codename": "change_aboutmebar"}}, {"model": "auth.permission", "pk": 33, "fields": {"name": "Can delete about me bar", "content_type": 11, "codename": "delete_aboutmebar"}}, {"model": "auth.permission", "pk": 34, "fields": {"name": "Can add services", "content_type": 12, "codename": "add_services"}}, {"model": "auth.permission", "pk": 35, "fields": {"name": "Can change services", "content_type": 12, "codename": "change_services"}}, {"model": "auth.permission", "pk": 36, "fields": {"name": "Can delete services", "content_type": 12, "codename": "delete_services"}}, {"model": "auth.permission", "pk": 37, "fields": {"name": "Can add contact", "content_type": 13, "codename": "add_contact"}}, {"model": "auth.permission", "pk": 38, "fields": {"name": "Can change contact", "content_type": 13, "codename": "change_contact"}}, {"model": "auth.permission", "pk": 39, "fields": {"name": "Can delete contact", "content_type": 13, "codename": "delete_contact"}}, {"model": "auth.permission", "pk": 40, "fields": {"name": "Can add about page", "content_type": 14, "codename": "add_aboutpage"}}, {"model": "auth.permission", "pk": 41, "fields": {"name": "Can change about page", "content_type": 14, "codename": "change_aboutpage"}}, {"model": "auth.permission", "pk": 42, "fields": {"name": "Can delete about page", "content_type": 14, "codename": "delete_aboutpage"}}, {"model": "auth.permission", "pk": 43, "fields": {"name": "Can add about messages", "content_type": 15, "codename": "add_aboutmessages"}}, {"model": "auth.permission", "pk": 44, "fields": {"name": "Can change about messages", "content_type": 15, "codename": "change_aboutmessages"}}, {"model": "auth.permission", "pk": 45, "fields": {"name": "Can delete about messages", "content_type": 15, "codename": "delete_aboutmessages"}}, {"model": "auth.permission", "pk": 46, "fields": {"name": "Can add about techo", "content_type": 16, "codename": "add_abouttecho"}}, {"model": "auth.permission", "pk": 47, "fields": {"name": "Can change about techo", "content_type": 16, "codename": "change_abouttecho"}}, {"model": "auth.permission", "pk": 48, "fields": {"name": "Can delete about techo", "content_type": 16, "codename": "delete_abouttecho"}}, {"model": "auth.permission", "pk": 49, "fields": {"name": "Can add about clients", "content_type": 17, "codename": "add_aboutclients"}}, {"model": "auth.permission", "pk": 50, "fields": {"name": "Can change about clients", "content_type": 17, "codename": "change_aboutclients"}}, {"model": "auth.permission", "pk": 51, "fields": {"name": "Can delete about clients", "content_type": 17, "codename": "delete_aboutclients"}}, {"model": "auth.permission", "pk": 52, "fields": {"name": "Can add join", "content_type": 18, "codename": "add_join"}}, {"model": "auth.permission", "pk": 53, "fields": {"name": "Can change join", "content_type": 18, "codename": "change_join"}}, {"model": "auth.permission", "pk": 54, "fields": {"name": "Can delete join", "content_type": 18, "codename": "delete_join"}}, {"model": "auth.permission", "pk": 55, "fields": {"name": "Can add project category", "content_type": 19, "codename": "add_projectcategory"}}, {"model": "auth.permission", "pk": 56, "fields": {"name": "Can change project category", "content_type": 19, "codename": "change_projectcategory"}}, {"model": "auth.permission", "pk": 57, "fields": {"name": "Can delete project category", "content_type": 19, "codename": "delete_projectcategory"}}, {"model": "auth.permission", "pk": 58, "fields": {"name": "Can add projects", "content_type": 20, "codename": "add_projects"}}, {"model": "auth.permission", "pk": 59, "fields": {"name": "Can change projects", "content_type": 20, "codename": "change_projects"}}, {"model": "auth.permission", "pk": 60, "fields": {"name": "Can delete projects", "content_type": 20, "codename": "delete_projects"}}, {"model": "auth.permission", "pk": 61, "fields": {"name": "Can add image project", "content_type": 21, "codename": "add_imageproject"}}, {"model": "auth.permission", "pk": 62, "fields": {"name": "Can change image project", "content_type": 21, "codename": "change_imageproject"}}, {"model": "auth.permission", "pk": 63, "fields": {"name": "Can delete image project", "content_type": 21, "codename": "delete_imageproject"}}, {"model": "auth.permission", "pk": 64, "fields": {"name": "Can add post tags", "content_type": 22, "codename": "add_posttags"}}, {"model": "auth.permission", "pk": 65, "fields": {"name": "Can change post tags", "content_type": 22, "codename": "change_posttags"}}, {"model": "auth.permission", "pk": 66, "fields": {"name": "Can delete post tags", "content_type": 22, "codename": "delete_posttags"}}, {"model": "auth.permission", "pk": 67, "fields": {"name": "Can add post category", "content_type": 23, "codename": "add_postcategory"}}, {"model": "auth.permission", "pk": 68, "fields": {"name": "Can change post category", "content_type": 23, "codename": "change_postcategory"}}, {"model": "auth.permission", "pk": 69, "fields": {"name": "Can delete post category", "content_type": 23, "codename": "delete_postcategory"}}, {"model": "auth.permission", "pk": 70, "fields": {"name": "Can add post", "content_type": 24, "codename": "add_post"}}, {"model": "auth.permission", "pk": 71, "fields": {"name": "Can change post", "content_type": 24, "codename": "change_post"}}, {"model": "auth.permission", "pk": 72, "fields": {"name": "Can delete post", "content_type": 24, "codename": "delete_post"}}, {"model": "auth.permission", "pk": 73, "fields": {"name": "Can add gallery", "content_type": 25, "codename": "add_gallery"}}, {"model": "auth.permission", "pk": 74, "fields": {"name": "Can change gallery", "content_type": 25, "codename": "change_gallery"}}, {"model": "auth.permission", "pk": 75, "fields": {"name": "Can delete gallery", "content_type": 25, "codename": "delete_gallery"}}, {"model": "auth.permission", "pk": 76, "fields": {"name": "Can add shorting url", "content_type": 26, "codename": "add_shortingurl"}}, {"model": "auth.permission", "pk": 77, "fields": {"name": "Can change shorting url", "content_type": 26, "codename": "change_shortingurl"}}, {"model": "auth.permission", "pk": 78, "fields": {"name": "Can delete shorting url", "content_type": 26, "codename": "delete_shortingurl"}}, {"model": "auth.permission", "pk": 79, "fields": {"name": "Can add short url analytics", "content_type": 27, "codename": "add_shorturlanalytics"}}, {"model": "auth.permission", "pk": 80, "fields": {"name": "Can change short url analytics", "content_type": 27, "codename": "change_shorturlanalytics"}}, {"model": "auth.permission", "pk": 81, "fields": {"name": "Can delete short url analytics", "content_type": 27, "codename": "delete_shorturlanalytics"}}, {"model": "auth.permission", "pk": 82, "fields": {"name": "Can add url", "content_type": 28, "codename": "add_url"}}, {"model": "auth.permission", "pk": 83, "fields": {"name": "Can change url", "content_type": 28, "codename": "change_url"}}, {"model": "auth.permission", "pk": 84, "fields": {"name": "Can delete url", "content_type": 28, "codename": "delete_url"}}, {"model": "auth.permission", "pk": 85, "fields": {"name": "Can add rule", "content_type": 29, "codename": "add_rule"}}, {"model": "auth.permission", "pk": 86, "fields": {"name": "Can change rule", "content_type": 29, "codename": "change_rule"}}, {"model": "auth.permission", "pk": 87, "fields": {"name": "Can delete rule", "content_type": 29, "codename": "delete_rule"}}, {"model": "auth.permission", "pk": 88, "fields": {"name": "Can add gym person", "content_type": 30, "codename": "add_gymperson"}}, {"model": "auth.permission", "pk": 89, "fields": {"name": "Can change gym person", "content_type": 30, "codename": "change_gymperson"}}, {"model": "auth.permission", "pk": 90, "fields": {"name": "Can delete gym person", "content_type": 30, "codename": "delete_gymperson"}}, {"model": "auth.permission", "pk": 91, "fields": {"name": "Can add player season", "content_type": 31, "codename": "add_playerseason"}}, {"model": "auth.permission", "pk": 92, "fields": {"name": "Can change player season", "content_type": 31, "codename": "change_playerseason"}}, {"model": "auth.permission", "pk": 93, "fields": {"name": "Can delete player season", "content_type": 31, "codename": "delete_playerseason"}}, {"model": "auth.permission", "pk": 94, "fields": {"name": "Can add game", "content_type": 32, "codename": "add_game"}}, {"model": "auth.permission", "pk": 95, "fields": {"name": "Can change game", "content_type": 32, "codename": "change_game"}}, {"model": "auth.permission", "pk": 96, "fields": {"name": "Can delete game", "content_type": 32, "codename": "delete_game"}}, {"model": "auth.permission", "pk": 97, "fields": {"name": "Can add season", "content_type": 33, "codename": "add_season"}}, {"model": "auth.permission", "pk": 98, "fields": {"name": "Can change season", "content_type": 33, "codename": "change_season"}}, {"model": "auth.permission", "pk": 99, "fields": {"name": "Can delete season", "content_type": 33, "codename": "delete_season"}}, {"model": "auth.permission", "pk": 100, "fields": {"name": "Can add player", "content_type": 34, "codename": "add_player"}}, {"model": "auth.permission", "pk": 101, "fields": {"name": "Can change player", "content_type": 34, "codename": "change_player"}}, {"model": "auth.permission", "pk": 102, "fields": {"name": "Can delete player", "content_type": 34, "codename": "delete_player"}}, {"model": "auth.permission", "pk": 103, "fields": {"name": "Can add contact", "content_type": 35, "codename": "add_contact"}}, {"model": "auth.permission", "pk": 104, "fields": {"name": "Can change contact", "content_type": 35, "codename": "change_contact"}}, {"model": "auth.permission", "pk": 105, "fields": {"name": "Can delete contact", "content_type": 35, "codename": "delete_contact"}}, {"model": "auth.permission", "pk": 106, "fields": {"name": "Can add category", "content_type": 36, "codename": "add_category"}}, {"model": "auth.permission", "pk": 107, "fields": {"name": "Can change category", "content_type": 36, "codename": "change_category"}}, {"model": "auth.permission", "pk": 108, "fields": {"name": "Can delete category", "content_type": 36, "codename": "delete_category"}}, {"model": "auth.permission", "pk": 109, "fields": {"name": "Can add template sample", "content_type": 37, "codename": "add_templatesample"}}, {"model": "auth.permission", "pk": 110, "fields": {"name": "Can change template sample", "content_type": 37, "codename": "change_templatesample"}}, {"model": "auth.permission", "pk": 111, "fields": {"name": "Can delete template sample", "content_type": 37, "codename": "delete_templatesample"}}, {"model": "auth.user", "pk": 1, "fields": {"password": "pbkdf2_sha256$100000$NFjvXAUbMmj0$99ekEbf+kabKhgchuhmCznUvx7HCo1DxkaSND01YnBQ=", "last_login": "2019-09-26T04:45:55.036Z", "is_superuser": true, "username": "christos", "first_name": "Christos", "last_name": "Stathakis", "email": "lirageika@hotmail.gr", "is_staff": true, "is_active": true, "date_joined": "2017-07-21T05:00:22Z", "groups": [], "user_permissions": []}}, {"model": "blog.post", "pk": 1, "fields": {"active": true, "active_eng": true, "title": "\u039a\u03b1\u03bb\u03ce\u03c2 \u03ae\u03c1\u03b8\u03b1\u03c4\u03b5.", "content": "<p>Finally</p>\r\n<p>Works!</p>", "keywords": "", "description": "", "title_eng": "A welcome Post", "content_eng": "<p>Hello World!</p>", "keywords_eng": null, "description_eng": null, "user": 1, "publish": "2017-12-14", "updated": "2018-05-24T12:52:25.965Z", "slug": "hello-word", "category": 3, "file": "BETATESTINGsquareStampRed.jpg", "update": false, "likes": []}}, {"model": "blog.post", "pk": 2, "fields": {"active": true, "active_eng": true, "title": "Mailchip and django", "content": "<p>In this test subject</p>\r\n<p>hello world!</p>", "keywords": "", "description": "", "title_eng": "Mailchip and django", "content_eng": "<p>here is not working right?</p>", "keywords_eng": null, "description_eng": null, "user": 1, "publish": "2017-08-23", "updated": "2018-05-24T12:52:02.096Z", "slug": "mailchip-and-django", "category": 1, "file": "images.duckduckgo.com.jpg", "update": true, "likes": []}}, {"model": "blog.post", "pk": 3, "fields": {"active": true, "active_eng": true, "title": "Expenses App", "content": "<div class=\"section-divider\"><hr class=\"section-divider\" /></div>\r\n<div class=\"section-content\">\r\n<div class=\"section-inner sectionLayout--insetColumn\">\r\n<h3 class=\"graf graf--h3\">Django Expenses</h3>\r\n<img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*4Gn38CcUSyHW3JGfsvyGvw.png\" alt=\"\" data-image-id=\"1*4Gn38CcUSyHW3JGfsvyGvw.png\" data-width=\"1334\" data-height=\"461\" data-is-featured=\"true\" />\r\n<p class=\"graf graf--p graf--empty\">&nbsp;</p>\r\n<p class=\"graf graf--p\"><strong class=\"markup--strong markup--p-strong\">What we are gonna learn?</strong></p>\r\n<blockquote class=\"graf graf--blockquote\">We will learn who to create Abstract Models and how to use them on a app, we will configure the admin page, create actions, add features on save method, create costume managers and queries, creating views and urls, and making some examples on annotates and aggregate on database. On frontend we will use some basic of bootstrap framework and we will integrate chart.js and use a example how django can handle it. And final we will go live using heroku and github.</blockquote>\r\n<p class=\"graf graf--p graf--empty\">&nbsp;</p>\r\n<p class=\"graf graf--p\"><strong class=\"markup--strong markup--p-strong\">What will we use?</strong></p>\r\n<blockquote class=\"graf graf--blockquote\">We will use this libraries, django 2.0, bootstrap 4, chart.js, gitub and heroku. Django is a framework in python which we can create fast and reliable web apps, boostrap is a frontend framework which will handle our html and css&nbsp;,final chart.js the name say its all! Github is a version control&nbsp;, will be used to store on the cloud our project and detect easy the changes and heroku is a PaaS service which have a nice free tier to store our webapp.</blockquote>\r\n</div>\r\n</div>\r\n<div class=\"section-divider\"><hr class=\"section-divider\" /></div>\r\n<div class=\"section-content\">\r\n<div class=\"section-inner sectionLayout--insetColumn\">\r\n<p class=\"graf graf--p\">Enough with little talks lets create our first app. This example is made using windows&nbsp;, so i assume you have windows and you have installed python and django too, if not then follow this guide.Now we are ready! Open the cmd on any file you want and add this (ps. same commands etc works on linux etc so dont worry).</p>\r\n<pre class=\"graf graf--pre\">$ django-admin startproject my_expenses</pre>\r\n<p class=\"graf graf--p\">and then cd my_expenses and create our first app</p>\r\n<pre class=\"graf graf--pre\">$ python manage.py startapp expenses</pre>\r\n<p class=\"graf graf--p\">and add &lsquo;expenses&rsquo; on settings.py, you will find on my_expenses folder</p>\r\n<img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*LNIZwO1cmc9UtL_BzJr5sw.png\" alt=\"\" data-image-id=\"1*LNIZwO1cmc9UtL_BzJr5sw.png\" data-width=\"171\" data-height=\"253\" />\r\n<pre class=\"graf graf--pre\">INSTALLED_APPS = [<br />    <strong class=\"markup--strong markup--pre-strong\">'django.contrib.admin'</strong>,<br />    <strong class=\"markup--strong markup--pre-strong\">'django.contrib.auth'</strong>,<br />    <strong class=\"markup--strong markup--pre-strong\">'django.contrib.contenttypes'</strong>,<br />    <strong class=\"markup--strong markup--pre-strong\">'django.contrib.sessions'</strong>,<br />    <strong class=\"markup--strong markup--pre-strong\">'django.contrib.messages'</strong>,<br />    <strong class=\"markup--strong markup--pre-strong\">'django.contrib.staticfiles'</strong>,<br /><br />    <strong class=\"markup--strong markup--pre-strong\">'expenses',<br /></strong>]</pre>\r\n<p class=\"graf graf--p\">Thats it, django handled anything smooth and fast, and now lets go on expenses folder there is a model.py file, lets add some code there, you can find the code here on <a class=\"markup--anchor markup--p-anchor\" href=\"https://github.com/Zefarak/blog-expense-app/blob/master/expenses/models.py\" rel=\"noopener\" target=\"_blank\" data-href=\"https://github.com/Zefarak/blog-expense-app/blob/master/expenses/models.py\"><em class=\"markup--em markup--p-em\">github</em></a>.</p>\r\n<img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*jFAFW4TXfHkbY9E87f_zAA.png\" alt=\"\" data-image-id=\"1*jFAFW4TXfHkbY9E87f_zAA.png\" data-width=\"147\" data-height=\"387\" />\r\n<pre class=\"graf graf--pre\"><strong class=\"markup--strong markup--pre-strong\">from </strong>django.db <strong class=\"markup--strong markup--pre-strong\">import </strong>models<br /><strong class=\"markup--strong markup--pre-strong\">from </strong>django.db.models <strong class=\"markup--strong markup--pre-strong\">import </strong>Sum, F<br /><br /><strong class=\"markup--strong markup--pre-strong\">from </strong>.managers <strong class=\"markup--strong markup--pre-strong\">import </strong>GeneralManager<br /><br />CURRENCY = <strong class=\"markup--strong markup--pre-strong\">'&euro;'<br /><br /><br />class </strong>PaymentMethod(models.Model):<br />    title = models.CharField(unique=<strong class=\"markup--strong markup--pre-strong\">True</strong>, max_length=150)<br /><br />    <strong class=\"markup--strong markup--pre-strong\">def </strong>__str__(self):<br />        <strong class=\"markup--strong markup--pre-strong\">return </strong>self.title<br /><br />    <strong class=\"markup--strong markup--pre-strong\">class </strong>Meta:<br />        verbose_name_plural = <strong class=\"markup--strong markup--pre-strong\">'0. Payment Method'<br /><br /><br />class </strong>DefaultExpenseModel(models.Model):<br />    title = models.CharField(max_length=100, blank=<strong class=\"markup--strong markup--pre-strong\">True</strong>, null=<strong class=\"markup--strong markup--pre-strong\">True</strong>)<br />    date_expired = models.DateField()<br />    final_value = models.DecimalField(default=0, decimal_places=2, max_digits=20)<br />    paid_value = models.DecimalField(default=0, decimal_places=2, max_digits=20)<br />    is_paid = models.BooleanField(default=<strong class=\"markup--strong markup--pre-strong\">False</strong>)<br />    payment_method = models.ForeignKey(PaymentMethod, null=<strong class=\"markup--strong markup--pre-strong\">True</strong>, on_delete=models.SET_NULL)<br />    objects = models.Manager()<br />    my_query = GeneralManager()<br /><br />    <strong class=\"markup--strong markup--pre-strong\">class </strong>Meta:<br />        abstract = <strong class=\"markup--strong markup--pre-strong\">True<br /><br />    def </strong>save(self, *args, **kwargs):<br />        <strong class=\"markup--strong markup--pre-strong\">if </strong>self.is_paid:<br />            self.paid_value = self.final_value<br />        <strong class=\"markup--strong markup--pre-strong\">else</strong>:<br />            self.paid_value = 0<br />        super(DefaultExpenseModel, self).save(*args, **kwargs)<br /><br />    <strong class=\"markup--strong markup--pre-strong\">def </strong>__str__(self):<br />        <strong class=\"markup--strong markup--pre-strong\">return </strong>self.title<br /><br />    <strong class=\"markup--strong markup--pre-strong\">def </strong>tag_final_value(self):<br />        <strong class=\"markup--strong markup--pre-strong\">return f'{self.final_value} {CURRENCY}'<br /><br />    </strong>tag_final_value.short_description = <strong class=\"markup--strong markup--pre-strong\">'Value'<br /><br />    def </strong>tag_is_paid(self):<br />        <strong class=\"markup--strong markup--pre-strong\">return 'Is Paid' if </strong>self.is_paid <strong class=\"markup--strong markup--pre-strong\">else 'Not Paid'<br /><br />    </strong>tag_is_paid.short_description = <strong class=\"markup--strong markup--pre-strong\">'Paid'<br /><br />    </strong>@staticmethod<br />    <strong class=\"markup--strong markup--pre-strong\">def </strong>analysis(queryset):<br />        total_value = queryset.aggregate(Sum(<strong class=\"markup--strong markup--pre-strong\">'final_value'</strong>))[<strong class=\"markup--strong markup--pre-strong\">'final_value__sum'</strong>] <strong class=\"markup--strong markup--pre-strong\">if </strong>queryset <strong class=\"markup--strong markup--pre-strong\">else </strong>0<br />        paid_value = queryset.filter(is_paid=<strong class=\"markup--strong markup--pre-strong\">False</strong>).aggregate(Sum(<strong class=\"markup--strong markup--pre-strong\">'final_value'</strong>))[<strong class=\"markup--strong markup--pre-strong\">'final_value__sum'</strong>]\\<br />            <strong class=\"markup--strong markup--pre-strong\">if </strong>queryset.filter(is_paid=<strong class=\"markup--strong markup--pre-strong\">False</strong>) <strong class=\"markup--strong markup--pre-strong\">else </strong>0<br />        diff = total_value - paid_value<br />        category_analysis = queryset.values(<strong class=\"markup--strong markup--pre-strong\">'category__title'</strong>).annotate(total_value=Sum(<strong class=\"markup--strong markup--pre-strong\">'final_value'</strong>),<br />                                                                       remaining=Sum(F(<strong class=\"markup--strong markup--pre-strong\">'final_value'</strong>)-F(<strong class=\"markup--strong markup--pre-strong\">'paid_value'</strong>))<br />                                                                       ).order_by(<strong class=\"markup--strong markup--pre-strong\">'remaining'</strong>)<br />        <strong class=\"markup--strong markup--pre-strong\">return </strong>[total_value, paid_value, diff, category_analysis]<br /><br />    @staticmethod<br />    <strong class=\"markup--strong markup--pre-strong\">def </strong>filters_data(request, queryset):<br />        search_name = request.GET.get(<strong class=\"markup--strong markup--pre-strong\">'search_name'</strong>, <strong class=\"markup--strong markup--pre-strong\">None</strong>)<br />        cate_name = request.GET.getlist(<strong class=\"markup--strong markup--pre-strong\">'cate_name'</strong>, <strong class=\"markup--strong markup--pre-strong\">None</strong>)<br />        paid_name = request.GET.getlist(<strong class=\"markup--strong markup--pre-strong\">'paid_name'</strong>, <strong class=\"markup--strong markup--pre-strong\">None</strong>)<br />        person_name = request.GET.getlist(<strong class=\"markup--strong markup--pre-strong\">'person_name'</strong>, <strong class=\"markup--strong markup--pre-strong\">None</strong>)<br /><br />        queryset = queryset.filter(title__icontains=search_name) <strong class=\"markup--strong markup--pre-strong\">if </strong>search_name <strong class=\"markup--strong markup--pre-strong\">else </strong>queryset<br />        queryset = queryset.filter(category__id__in=cate_name) <strong class=\"markup--strong markup--pre-strong\">if </strong>cate_name <strong class=\"markup--strong markup--pre-strong\">else </strong>queryset<br />        queryset = queryset.filter(is_paid=<strong class=\"markup--strong markup--pre-strong\">True</strong>) <strong class=\"markup--strong markup--pre-strong\">if 'paid' </strong>== paid_name <strong class=\"markup--strong markup--pre-strong\">else </strong>queryset.filter(is_paid=<strong class=\"markup--strong markup--pre-strong\">False</strong>)\\<br />            <strong class=\"markup--strong markup--pre-strong\">if 'not_paid' </strong>== paid_name <strong class=\"markup--strong markup--pre-strong\">else </strong>queryset<br />        <strong class=\"markup--strong markup--pre-strong\">if </strong>person_name:<br />            <strong class=\"markup--strong markup--pre-strong\">try</strong>:<br />                queryset = queryset.filter(person__id__in=person_name)<br />            <strong class=\"markup--strong markup--pre-strong\">except</strong>:<br />                queryset = queryset<br />        <strong class=\"markup--strong markup--pre-strong\">return </strong>queryset</pre>\r\n<p class=\"graf graf--p\">Here we will use the CURRENCY to change easy currency likeon dollar, euro etc. On PaymentMethod model will we store the payment options like PayPal, Cash, Visa etc. And final the DefaultExpenseModel we will use it as a base for the Bill, Payroll and Expense models. Using&nbsp;</p>\r\n<pre class=\"graf graf--pre\"><strong class=\"markup--strong markup--pre-strong\">class </strong>Meta:<br />    abstract = <strong class=\"markup--strong markup--pre-strong\">True</strong></pre>\r\n<p class=\"graf graf--p\">ensures the inheritance models will get all the fields, functions etc from this model. Next code snippet is for the admin page, with that setting we can change the head value on the admin table.</p>\r\n<pre class=\"graf graf--pre\"><strong class=\"markup--strong markup--pre-strong\">def </strong>tag_final_value(self):<br />        <strong class=\"markup--strong markup--pre-strong\">return f'{self.final_value} {CURRENCY}'<br /><br /></strong>tag_final_value.short_description = <strong class=\"markup--strong markup--pre-strong\">'Value'</strong></pre>\r\n<p class=\"graf graf--p\">After that, we twink little the save method, we said to our models check if user have paid the instance and if is true then make paid value equal to no final value if no ensure paid value is 0. We will not use more option for simplicity of the app.</p>\r\n<pre class=\"graf graf--pre\"><strong class=\"markup--strong markup--pre-strong\">def </strong>save(self, *args, **kwargs):<br />    <strong class=\"markup--strong markup--pre-strong\">if </strong>self.is_paid:<br />        self.paid_value = self.final_value<br />    <strong class=\"markup--strong markup--pre-strong\">else</strong>:<br />        self.paid_value = 0<br />    super(DefaultExpenseModel, self).save(*args, **kwargs)</pre>\r\n<p class=\"graf graf--p\">The super&hellip; on last line ensures that anything default happens on save method will continue to happen, the analysis and filter_data method we will explain later. Now our Bill and BillCategory model</p>\r\n<pre class=\"graf graf--pre\"><strong class=\"markup--strong markup--pre-strong\">class </strong>BillCategory(models.Model):<br />    title = models.CharField(unique=<strong class=\"markup--strong markup--pre-strong\">True</strong>, max_length=150)<br />    balance = models.DecimalField(default=0, max_digits=20, decimal_places=2)<br /><br />    <strong class=\"markup--strong markup--pre-strong\">class </strong>Meta:<br />        verbose_name_plural = <strong class=\"markup--strong markup--pre-strong\">'1. Bill Category'<br /><br />    def </strong>__str__(self):<br />        <strong class=\"markup--strong markup--pre-strong\">return </strong>self.title<br /><br />    <strong class=\"markup--strong markup--pre-strong\">def </strong>tag_balance(self):<br />        <strong class=\"markup--strong markup--pre-strong\">return f'{self.balance} {CURRENCY}'<br /><br />    </strong>tag_balance.short_description = <strong class=\"markup--strong markup--pre-strong\">'Value'<br /><br />    def </strong>update_category(self):<br />        queryset = self.bills.all()<br />        total_value = queryset.aggregate(Sum(<strong class=\"markup--strong markup--pre-strong\">'final_value'</strong>))[<strong class=\"markup--strong markup--pre-strong\">'final_value__sum'</strong>] <strong class=\"markup--strong markup--pre-strong\">if </strong>queryset <strong class=\"markup--strong markup--pre-strong\">else </strong>0<br />        paid_value = queryset.filter(is_paid=<strong class=\"markup--strong markup--pre-strong\">True</strong>).aggregate(Sum(<strong class=\"markup--strong markup--pre-strong\">'final_value'</strong>))[<strong class=\"markup--strong markup--pre-strong\">'final_value__sum'</strong>] \\<br />            <strong class=\"markup--strong markup--pre-strong\">if </strong>queryset.filter(is_paid=<strong class=\"markup--strong markup--pre-strong\">True</strong>) <strong class=\"markup--strong markup--pre-strong\">else </strong>0<br />        self.balance = total_value - paid_value<br />        self.save()<br /><br /><br /><strong class=\"markup--strong markup--pre-strong\">class </strong>Bill(DefaultExpenseModel):<br />    category = models.ForeignKey(BillCategory, null=<strong class=\"markup--strong markup--pre-strong\">True</strong>, on_delete=models.SET_NULL, related_name=<strong class=\"markup--strong markup--pre-strong\">'bills'</strong>)<br /><br />    <strong class=\"markup--strong markup--pre-strong\">class </strong>Meta:<br />        verbose_name_plural = <strong class=\"markup--strong markup--pre-strong\">'2. Bills'<br />        </strong>ordering = [<strong class=\"markup--strong markup--pre-strong\">'-date_expired'</strong>]<br /><br />    <strong class=\"markup--strong markup--pre-strong\">def </strong>save(self, *args, **kwargs):<br />        <strong class=\"markup--strong markup--pre-strong\">if not </strong>self.title:<br />            self.title = <strong class=\"markup--strong markup--pre-strong\">f'{self.category.title} - {self.id}'<br />        </strong>super(Bill, self).save(*args, **kwargs)<br />        self.category.update_category()<br /><br />    <strong class=\"markup--strong markup--pre-strong\">def </strong>tag_category(self):<br />        <strong class=\"markup--strong markup--pre-strong\">return f'{self.category}'</strong></pre>\r\n<p class=\"graf graf--p\">On BillCategory model we will define our bill categories like Netflix, AmazonPrime, CellPhone monthly payment.. Using this function update_category, we ensure the balance on bill category will be up to date. (Probably we be ineffiecient if have alot of records but is just a example).&nbsp;</p>\r\n<blockquote class=\"graf graf--blockquote\">How works? After a Bill instance is saved, on save method we call the update_category which belongs on category and then we create two queries in database. The first return the total value of all bills which is related on this category. The related_name on ForeignKey is resposible for this. The second query we do the same only for the paid. And after that we just do the maths and update the balance on our model!</blockquote>\r\n<pre class=\"graf graf--pre\"><strong class=\"markup--strong markup--pre-strong\">def </strong>update_category(self):<br />    queryset = self.bills.all()<br />    total_value = queryset.aggregate(Sum(<strong class=\"markup--strong markup--pre-strong\">'final_value'</strong>))[<strong class=\"markup--strong markup--pre-strong\">'final_value__sum'</strong>] <strong class=\"markup--strong markup--pre-strong\">if </strong>queryset <strong class=\"markup--strong markup--pre-strong\">else </strong>0<br />    paid_value = queryset.filter(is_paid=<strong class=\"markup--strong markup--pre-strong\">True</strong>).aggregate(Sum(<strong class=\"markup--strong markup--pre-strong\">'final_value'</strong>))[<strong class=\"markup--strong markup--pre-strong\">'final_value__sum'</strong>] \\<br />        <strong class=\"markup--strong markup--pre-strong\">if </strong>queryset.filter(is_paid=<strong class=\"markup--strong markup--pre-strong\">True</strong>) <strong class=\"markup--strong markup--pre-strong\">else </strong>0<br />    self.balance = total_value - paid_value<br />    self.save()</pre>\r\n<p class=\"graf graf--p\">With use the same logic on the next models</p>\r\n<pre class=\"graf graf--pre\"><strong class=\"markup--strong markup--pre-strong\">class </strong>PayrollCategory(models.Model):<br />    title = models.CharField(unique=<strong class=\"markup--strong markup--pre-strong\">True</strong>, max_length=150)<br />    balance = models.DecimalField(default=0, max_digits=20, decimal_places=2)<br /><br />    <strong class=\"markup--strong markup--pre-strong\">class </strong>Meta:<br />        verbose_name_plural = <strong class=\"markup--strong markup--pre-strong\">'3. Payroll Category'<br /><br />    def </strong>__str__(self):<br />        <strong class=\"markup--strong markup--pre-strong\">return </strong>self.title<br /><br />    <strong class=\"markup--strong markup--pre-strong\">def </strong>tag_balance(self):<br />        <strong class=\"markup--strong markup--pre-strong\">return f'{self.balance} {CURRENCY}'<br /><br />    </strong>tag_balance.short_description = <strong class=\"markup--strong markup--pre-strong\">'Value'<br /><br />    def </strong>update_category(self):<br />        queryset = self.category_payroll.all()<br />        total_value = queryset.aggregate(Sum(<strong class=\"markup--strong markup--pre-strong\">'final_value'</strong>))[<strong class=\"markup--strong markup--pre-strong\">'final_value__sum'</strong>] <strong class=\"markup--strong markup--pre-strong\">if </strong>queryset <strong class=\"markup--strong markup--pre-strong\">else </strong>0<br />        paid_value = queryset.filter(is_paid=<strong class=\"markup--strong markup--pre-strong\">True</strong>).aggregate(Sum(<strong class=\"markup--strong markup--pre-strong\">'final_value'</strong>))[<strong class=\"markup--strong markup--pre-strong\">'final_value__sum'</strong>] \\<br />            <strong class=\"markup--strong markup--pre-strong\">if </strong>queryset.filter(is_paid=<strong class=\"markup--strong markup--pre-strong\">True</strong>) <strong class=\"markup--strong markup--pre-strong\">else </strong>0<br />        self.balance = total_value - paid_value<br />        self.save()<br /><br /><br /><strong class=\"markup--strong markup--pre-strong\">class </strong>Person(models.Model):<br />    title = models.CharField(unique=<strong class=\"markup--strong markup--pre-strong\">True</strong>, max_length=150)<br />    occupation = models.CharField(max_length=100, blank=<strong class=\"markup--strong markup--pre-strong\">True</strong>, null=<strong class=\"markup--strong markup--pre-strong\">True</strong>)<br />    phone = models.CharField(max_length=10, blank=<strong class=\"markup--strong markup--pre-strong\">True</strong>, null=<strong class=\"markup--strong markup--pre-strong\">True</strong>)<br />    balance = models.DecimalField(default=0, max_digits=20, decimal_places=2)<br /><br />    <strong class=\"markup--strong markup--pre-strong\">class </strong>Meta:<br />        verbose_name_plural = <strong class=\"markup--strong markup--pre-strong\">'4. Persons'<br /><br />    def </strong>__str__(self):<br />        <strong class=\"markup--strong markup--pre-strong\">return </strong>self.title<br /><br />    <strong class=\"markup--strong markup--pre-strong\">def </strong>tag_balance(self):<br />        <strong class=\"markup--strong markup--pre-strong\">return f'{self.balance} {CURRENCY}'<br /><br />    </strong>tag_balance.short_description = <strong class=\"markup--strong markup--pre-strong\">'Value'<br /><br />    def </strong>update_person(self):<br />        queryset = self.person_payroll.all()<br />        total_value = queryset.aggregate(Sum(<strong class=\"markup--strong markup--pre-strong\">'final_value'</strong>))[<strong class=\"markup--strong markup--pre-strong\">'final_value__sum'</strong>] <strong class=\"markup--strong markup--pre-strong\">if </strong>queryset <strong class=\"markup--strong markup--pre-strong\">else </strong>0<br />        paid_value = queryset.filter(is_paid=<strong class=\"markup--strong markup--pre-strong\">True</strong>).aggregate(Sum(<strong class=\"markup--strong markup--pre-strong\">'final_value'</strong>))[<strong class=\"markup--strong markup--pre-strong\">'final_value__sum'</strong>] \\<br />            <strong class=\"markup--strong markup--pre-strong\">if </strong>queryset.filter(is_paid=<strong class=\"markup--strong markup--pre-strong\">True</strong>) <strong class=\"markup--strong markup--pre-strong\">else </strong>0<br />        self.balance = total_value - paid_value<br />        self.save()<br /><br /><br /><strong class=\"markup--strong markup--pre-strong\">class </strong>Payroll(DefaultExpenseModel):<br />    person = models.ForeignKey(Person, null=<strong class=\"markup--strong markup--pre-strong\">True</strong>, on_delete=models.SET_NULL, related_name=<strong class=\"markup--strong markup--pre-strong\">'person_payroll'</strong>)<br />    category = models.ForeignKey(PayrollCategory, null=<strong class=\"markup--strong markup--pre-strong\">True</strong>, on_delete=models.SET_NULL, related_name=<strong class=\"markup--strong markup--pre-strong\">'category_payroll'</strong>)<br /><br />    <strong class=\"markup--strong markup--pre-strong\">class </strong>Meta:<br />        verbose_name_plural = <strong class=\"markup--strong markup--pre-strong\">'5. Payroll'<br />        </strong>ordering = [<strong class=\"markup--strong markup--pre-strong\">'-date_expired'</strong>]<br /><br />    <strong class=\"markup--strong markup--pre-strong\">def </strong>save(self, *args, **kwargs):<br />        <strong class=\"markup--strong markup--pre-strong\">if not </strong>self.title:<br />            self.title = <strong class=\"markup--strong markup--pre-strong\">f'{self.person.title} - {self.id}'<br />        </strong>super(Payroll, self).save(*args, **kwargs)<br />        self.person.update_person()<br />        self.category.update_category()<br /><br />    <strong class=\"markup--strong markup--pre-strong\">def </strong>tag_category(self):<br />        <strong class=\"markup--strong markup--pre-strong\">return f'{self.person} - {self.category}'<br /><br /><br />class </strong>GenericExpenseCategory(models.Model):<br />    title = models.CharField(unique=<strong class=\"markup--strong markup--pre-strong\">True</strong>, max_length=150)<br />    balance = models.DecimalField(default=0, max_digits=20, decimal_places=2)<br /><br />    <strong class=\"markup--strong markup--pre-strong\">class </strong>Meta:<br />        verbose_name_plural = <strong class=\"markup--strong markup--pre-strong\">'6. Expense Category'<br /><br />    def </strong>__str__(self):<br />        <strong class=\"markup--strong markup--pre-strong\">return </strong>self.title<br /><br />    <strong class=\"markup--strong markup--pre-strong\">def </strong>tag_balance(self):<br />        <strong class=\"markup--strong markup--pre-strong\">return f'{self.balance} {CURRENCY}'<br /><br />    </strong>tag_balance.short_description = <strong class=\"markup--strong markup--pre-strong\">'Value'<br /><br />    def </strong>update_category(self):<br />        queryset = self.category_expenses.all()<br />        total_value = queryset.aggregate(Sum(<strong class=\"markup--strong markup--pre-strong\">'final_value'</strong>))[<strong class=\"markup--strong markup--pre-strong\">'final_value__sum'</strong>] <strong class=\"markup--strong markup--pre-strong\">if </strong>queryset <strong class=\"markup--strong markup--pre-strong\">else </strong>0<br />        paid_value = queryset.filter(is_paid=<strong class=\"markup--strong markup--pre-strong\">True</strong>).aggregate(Sum(<strong class=\"markup--strong markup--pre-strong\">'final_value'</strong>))[<strong class=\"markup--strong markup--pre-strong\">'final_value__sum'</strong>] \\<br />            <strong class=\"markup--strong markup--pre-strong\">if </strong>queryset.filter(is_paid=<strong class=\"markup--strong markup--pre-strong\">True</strong>) <strong class=\"markup--strong markup--pre-strong\">else </strong>0<br />        self.balance = total_value - paid_value<br />        self.save()<br /><br /><br /><strong class=\"markup--strong markup--pre-strong\">class </strong>GenericExpense(DefaultExpenseModel):<br />    category = models.ForeignKey(GenericExpenseCategory, null=<strong class=\"markup--strong markup--pre-strong\">True</strong>, on_delete=models.SET_NULL,<br />                                 related_name=<strong class=\"markup--strong markup--pre-strong\">'category_expenses'</strong>)<br /><br />    <strong class=\"markup--strong markup--pre-strong\">class </strong>Meta:<br />        verbose_name_plural = <strong class=\"markup--strong markup--pre-strong\">'7. Generic Expenses'<br />        </strong>ordering = [<strong class=\"markup--strong markup--pre-strong\">'-date_expired'</strong>]<br /><br />    <strong class=\"markup--strong markup--pre-strong\">def </strong>save(self, *args, **kwargs):<br />        <strong class=\"markup--strong markup--pre-strong\">if not </strong>self.title:<br />            self.title = <strong class=\"markup--strong markup--pre-strong\">f'{self.title}'<br />        </strong>super(GenericExpense, self).save(*args, **kwargs)<br />        self.category.update_category()<br /><br />    <strong class=\"markup--strong markup--pre-strong\">def </strong>tag_category(self):<br />        <strong class=\"markup--strong markup--pre-strong\">return f'{self.category}'</strong></pre>\r\n<p class=\"graf graf--p\">The only difference on Payroll model we update except category and the Person model. Now lets create the managers.py. Why? Because on this file we will handle our custom queries.</p>\r\n<pre class=\"graf graf--pre\"><strong class=\"markup--strong markup--pre-strong\">from </strong>django.db.models <strong class=\"markup--strong markup--pre-strong\">import </strong>QuerySet, Manager<br /><strong class=\"markup--strong markup--pre-strong\">import </strong>datetime<br /><br />date_start, date_end = datetime.datetime.today().replace(month=1, day=1), datetime.datetime.today()<br /><br /><br /><strong class=\"markup--strong markup--pre-strong\">class </strong>GenericQuerySet(QuerySet):<br />    <strong class=\"markup--strong markup--pre-strong\">def </strong>filter_by_date(self, date_start, date_end):<br />        <strong class=\"markup--strong markup--pre-strong\">return </strong>self.filter(date_expired__range=[date_start, date_end])<br /><br />    <strong class=\"markup--strong markup--pre-strong\">def </strong>unpaid(self):<br />        <strong class=\"markup--strong markup--pre-strong\">return </strong>self.filter(is_paid=<strong class=\"markup--strong markup--pre-strong\">False</strong>)<br /><br /><br /><strong class=\"markup--strong markup--pre-strong\">class </strong>GeneralManager(Manager):<br />    <strong class=\"markup--strong markup--pre-strong\">def </strong>get_queryset(self):<br />        <strong class=\"markup--strong markup--pre-strong\">return </strong>GenericQuerySet(self.model, using=self._db)</pre>\r\n<p class=\"graf graf--p\">So here we define the date_start and date_end as a default, and then we use the QuerySet which provide the django to use a generic query. There was a more simply way to do that, but i wanted to show this because is reuseable. If we wanted to create different managers we dont have to retype all that staff just call the GenericQuerySet.</p>\r\n<blockquote class=\"graf graf--blockquote\">&nbsp;How works? All the magic is on this line, the self is reference on the model will use it, so gets the queryset of this model and filter it with the parameters we gave, and after that we call it on the manager with the second part of code, more details you can found here.</blockquote>\r\n<pre class=\"graf graf--pre\"><strong class=\"markup--strong markup--pre-strong\">return </strong>self.filter(date_expired__range=[date_start, date_end])</pre>\r\n<pre class=\"graf graf--pre\"><strong class=\"markup--strong markup--pre-strong\">def </strong>get_queryset(self):<br />        <strong class=\"markup--strong markup--pre-strong\">return </strong>GenericQuerySet(self.model, using=self._db)</pre>\r\n<p class=\"graf graf--p\">Our code on models.py is allready ready for the managers. So now next move is the admin page!</p>\r\n</div>\r\n</div>\r\n<div class=\"section-divider\"><hr class=\"section-divider\" /></div>\r\n<div class=\"section-content\">\r\n<div class=\"section-inner sectionLayout--insetColumn\">\r\n<p class=\"graf graf--p\"><strong class=\"markup--strong markup--p-strong\">Admin Page</strong></p>\r\n<p class=\"graf graf--p\">Now lets create the admin.py. If you django dont have created this file you can create it and add this code</p>\r\n<pre class=\"graf graf--pre\"><strong class=\"markup--strong markup--pre-strong\">from </strong>django.contrib <strong class=\"markup--strong markup--pre-strong\">import </strong>admin<br /><strong class=\"markup--strong markup--pre-strong\">from </strong>.models <strong class=\"markup--strong markup--pre-strong\">import </strong>*<br /><br /><br /><strong class=\"markup--strong markup--pre-strong\">def </strong>action_paid(modeladmin, request, queryset):<br />    <strong class=\"markup--strong markup--pre-strong\">for </strong>ele <strong class=\"markup--strong markup--pre-strong\">in </strong>queryset:<br />        ele.is_paid=<strong class=\"markup--strong markup--pre-strong\">True<br />        </strong>ele.save()<br />action_paid.short_description = <strong class=\"markup--strong markup--pre-strong\">'Multiple Paid'<br /><br /><br /></strong>@admin.register(PaymentMethod)<br /><strong class=\"markup--strong markup--pre-strong\">class </strong>PaymentMethodAdmin(admin.ModelAdmin):<br />    <strong class=\"markup--strong markup--pre-strong\">pass<br /><br /><br /></strong>@admin.register(BillCategory)<br /><strong class=\"markup--strong markup--pre-strong\">class </strong>BillCategoryAdmin(admin.ModelAdmin):<br />    list_display = [<strong class=\"markup--strong markup--pre-strong\">'title'</strong>, <strong class=\"markup--strong markup--pre-strong\">'tag_balance'</strong>]<br />    fields = [<strong class=\"markup--strong markup--pre-strong\">'title'</strong>, ]<br />    search_fields = [<strong class=\"markup--strong markup--pre-strong\">'title'</strong>, ]<br /><br /><br />@admin.register(Bill)<br /><strong class=\"markup--strong markup--pre-strong\">class </strong>BillAdmin(admin.ModelAdmin):<br />    save_as = <strong class=\"markup--strong markup--pre-strong\">True<br />    </strong>save_on_top = <strong class=\"markup--strong markup--pre-strong\">True<br />    </strong>list_display = [<strong class=\"markup--strong markup--pre-strong\">'date_expired'</strong>, <strong class=\"markup--strong markup--pre-strong\">'category'</strong>, <strong class=\"markup--strong markup--pre-strong\">'tag_final_value'</strong>,<strong class=\"markup--strong markup--pre-strong\">'payment_method'</strong>, <strong class=\"markup--strong markup--pre-strong\">'is_paid'</strong>]<br />    list_filter = [<strong class=\"markup--strong markup--pre-strong\">'category'</strong>, <strong class=\"markup--strong markup--pre-strong\">'is_paid'</strong>, <strong class=\"markup--strong markup--pre-strong\">'date_expired'</strong>, <strong class=\"markup--strong markup--pre-strong\">'payment_method'</strong>]<br />    search_fields = [<strong class=\"markup--strong markup--pre-strong\">'title'</strong>, <strong class=\"markup--strong markup--pre-strong\">'category__title'</strong>]<br />    readonly_fields = [<strong class=\"markup--strong markup--pre-strong\">'paid_value'</strong>]<br />    fields = [<strong class=\"markup--strong markup--pre-strong\">'category'</strong>, <strong class=\"markup--strong markup--pre-strong\">'payment_method'</strong>, <strong class=\"markup--strong markup--pre-strong\">'date_expired'</strong>, <strong class=\"markup--strong markup--pre-strong\">'is_paid'</strong>, <strong class=\"markup--strong markup--pre-strong\">'final_value'</strong>, <strong class=\"markup--strong markup--pre-strong\">'title'</strong>, <strong class=\"markup--strong markup--pre-strong\">'paid_value'</strong>]<br />    actions = [action_paid, ]<br /><br /><br />@admin.register(PayrollCategory)<br /><strong class=\"markup--strong markup--pre-strong\">class </strong>PayrollCategoryAdmin(admin.ModelAdmin):<br />    list_display = [<strong class=\"markup--strong markup--pre-strong\">'title'</strong>, <strong class=\"markup--strong markup--pre-strong\">'tag_balance'</strong>]<br />    fields = [<strong class=\"markup--strong markup--pre-strong\">'title'</strong>, ]<br />    search_fields = [<strong class=\"markup--strong markup--pre-strong\">'title'</strong>, ]<br /><br /><br />@admin.register(Person)<br /><strong class=\"markup--strong markup--pre-strong\">class </strong>PersonAdmin(admin.ModelAdmin):<br />    list_display = [<strong class=\"markup--strong markup--pre-strong\">'title'</strong>, <strong class=\"markup--strong markup--pre-strong\">'phone'</strong>, <strong class=\"markup--strong markup--pre-strong\">'tag_balance'</strong>]<br />    fields = [<strong class=\"markup--strong markup--pre-strong\">'title'</strong>, <strong class=\"markup--strong markup--pre-strong\">'phone'</strong>]<br />    search_fields = [<strong class=\"markup--strong markup--pre-strong\">'title'</strong>, <strong class=\"markup--strong markup--pre-strong\">'phone'</strong>]<br /><br /><br />@admin.register(Payroll)<br /><strong class=\"markup--strong markup--pre-strong\">class </strong>PayrollAdmin(admin.ModelAdmin):<br />    list_display = [<strong class=\"markup--strong markup--pre-strong\">'person'</strong>, <strong class=\"markup--strong markup--pre-strong\">'category'</strong>, <strong class=\"markup--strong markup--pre-strong\">'date_expired'</strong>, <strong class=\"markup--strong markup--pre-strong\">'tag_final_value'</strong>, <strong class=\"markup--strong markup--pre-strong\">'payment_method'</strong>, <strong class=\"markup--strong markup--pre-strong\">'is_paid'</strong>]<br />    list_filter = [<strong class=\"markup--strong markup--pre-strong\">'category'</strong>, <strong class=\"markup--strong markup--pre-strong\">'person'</strong>, <strong class=\"markup--strong markup--pre-strong\">'is_paid'</strong>, <strong class=\"markup--strong markup--pre-strong\">'date_expired'</strong>, <strong class=\"markup--strong markup--pre-strong\">'payment_method'</strong>]<br />    search_fields = [<strong class=\"markup--strong markup--pre-strong\">'title'</strong>, <strong class=\"markup--strong markup--pre-strong\">'person__title'</strong>, <strong class=\"markup--strong markup--pre-strong\">'category__title'</strong>]<br />    fields = [<strong class=\"markup--strong markup--pre-strong\">'person'</strong>, <strong class=\"markup--strong markup--pre-strong\">'category'</strong>, <strong class=\"markup--strong markup--pre-strong\">'date_expired'</strong>, <strong class=\"markup--strong markup--pre-strong\">'is_paid'</strong>, <strong class=\"markup--strong markup--pre-strong\">'final_value'</strong>, <strong class=\"markup--strong markup--pre-strong\">'title'</strong>, <strong class=\"markup--strong markup--pre-strong\">'payment_method'</strong>]<br />    actions = [action_paid, ]<br /><br /><br />@admin.register(GenericExpenseCategory)<br /><strong class=\"markup--strong markup--pre-strong\">class </strong>GenericExpenseCategoryCategoryAdmin(admin.ModelAdmin):<br />    list_display = [<strong class=\"markup--strong markup--pre-strong\">'title'</strong>, <strong class=\"markup--strong markup--pre-strong\">'tag_balance'</strong>]<br />    fields = [<strong class=\"markup--strong markup--pre-strong\">'title'</strong>, ]<br />    search_fields = [<strong class=\"markup--strong markup--pre-strong\">'title'</strong>, ]<br /><br /><br />@admin.register(GenericExpense)<br /><strong class=\"markup--strong markup--pre-strong\">class </strong>GenericExpenseAdmin(admin.ModelAdmin):<br />    list_display = [<strong class=\"markup--strong markup--pre-strong\">'category'</strong>, <strong class=\"markup--strong markup--pre-strong\">'date_expired'</strong>, <strong class=\"markup--strong markup--pre-strong\">'tag_final_value'</strong>, <strong class=\"markup--strong markup--pre-strong\">'is_paid'</strong>, <strong class=\"markup--strong markup--pre-strong\">'payment_method'</strong>]<br />    list_filter = [<strong class=\"markup--strong markup--pre-strong\">'category'</strong>, <strong class=\"markup--strong markup--pre-strong\">'is_paid'</strong>, <strong class=\"markup--strong markup--pre-strong\">'date_expired'</strong>, <strong class=\"markup--strong markup--pre-strong\">'payment_method'</strong>]<br />    search_fields = [<strong class=\"markup--strong markup--pre-strong\">'title'</strong>, <strong class=\"markup--strong markup--pre-strong\">'category__title'</strong>]<br />    fields = [<strong class=\"markup--strong markup--pre-strong\">'category'</strong>, <strong class=\"markup--strong markup--pre-strong\">'date_expired'</strong>, <strong class=\"markup--strong markup--pre-strong\">'is_paid'</strong>, <strong class=\"markup--strong markup--pre-strong\">'final_value'</strong>, <strong class=\"markup--strong markup--pre-strong\">'title'</strong>, <strong class=\"markup--strong markup--pre-strong\">'payment_method'</strong>]<br />    actions = [action_paid, ]</pre>\r\n<p class=\"graf graf--p\">Lets explain anything now!</p>\r\n<p class=\"graf graf--p\">First we created our first action. This enable us on admin page to multi checkbox our instance and change the status is_paid with one click. When you check the instance its create a queryset and then the rest is easy!</p>\r\n<pre class=\"graf graf--pre\"><strong class=\"markup--strong markup--pre-strong\">def </strong>action_paid(modeladmin, request, queryset):<br />    <strong class=\"markup--strong markup--pre-strong\">for </strong>ele <strong class=\"markup--strong markup--pre-strong\">in </strong>queryset:<br />        ele.is_paid=<strong class=\"markup--strong markup--pre-strong\">True<br />        </strong>ele.save()<br />action_paid.short_description = <strong class=\"markup--strong markup--pre-strong\">'Multiple Paid'</strong></pre>\r\n<p class=\"graf graf--p\">Next how to register and why! When we register a model on admin using this&nbsp;</p>\r\n<pre class=\"graf graf--pre\">@admin.register(PaymentMethod)</pre>\r\n<p class=\"graf graf--p\">or</p>\r\n<pre class=\"graf graf--pre\">admin.site.register(PaymentMethod)</pre>\r\n<p class=\"graf graf--p\">the model is show up with the default settings on our admin page.</p>\r\n<p class=\"graf graf--p\">So next move is to edit that page, lets get this for example</p>\r\n<pre class=\"graf graf--pre\">@admin.register(Bill)<br /><strong class=\"markup--strong markup--pre-strong\">class </strong>BillAdmin(admin.ModelAdmin):<br />    save_as = <strong class=\"markup--strong markup--pre-strong\">True<br />    </strong>save_on_top = <strong class=\"markup--strong markup--pre-strong\">True<br />    </strong>list_display = [<strong class=\"markup--strong markup--pre-strong\">'date_expired'</strong>, <strong class=\"markup--strong markup--pre-strong\">'category'</strong>, <strong class=\"markup--strong markup--pre-strong\">'tag_final_value'</strong>,<strong class=\"markup--strong markup--pre-strong\">'payment_method'</strong>, <strong class=\"markup--strong markup--pre-strong\">'is_paid'</strong>]<br />    list_filter = [<strong class=\"markup--strong markup--pre-strong\">'category'</strong>, <strong class=\"markup--strong markup--pre-strong\">'is_paid'</strong>, <strong class=\"markup--strong markup--pre-strong\">'date_expired'</strong>, <strong class=\"markup--strong markup--pre-strong\">'payment_method'</strong>]<br />    search_fields = [<strong class=\"markup--strong markup--pre-strong\">'title'</strong>, <strong class=\"markup--strong markup--pre-strong\">'category__title'</strong>]<br />    readonly_fields = [<strong class=\"markup--strong markup--pre-strong\">'paid_value'</strong>]<br />    fields = [<strong class=\"markup--strong markup--pre-strong\">'category'</strong>, <strong class=\"markup--strong markup--pre-strong\">'payment_method'</strong>, <strong class=\"markup--strong markup--pre-strong\">'date_expired'</strong>, <strong class=\"markup--strong markup--pre-strong\">'is_paid'</strong>, <strong class=\"markup--strong markup--pre-strong\">'final_value'</strong>, <strong class=\"markup--strong markup--pre-strong\">'title'</strong>, <strong class=\"markup--strong markup--pre-strong\">'paid_value'</strong>]<br />    actions = [action_paid, ]</pre>\r\n<blockquote class=\"graf graf--blockquote\">The save_as will allow us to create the same instance with different id, which makes faster bills to create etc. On list_display we define what fields or function will be show on main table, list_filter defines our filters, preferably use here all the ForeignKey models, and when we use the search_fields we create a search bar and we define where to search and final on actions we register which action we want to use. The fields or fieldsets which will not use we define the fields on specific instance for editing, and the read_only we specific the values we want to show but not to edit!</blockquote>\r\n<p class=\"graf graf--p\">Thats its, django can create and handle easy admin pages like that. There is many options will not cover like inlines or custom form for admin page, but we will not use at all django forms on this app. So now th frontend part!</p>\r\n</div>\r\n</div>\r\n<div class=\"section-divider\"><hr class=\"section-divider\" /></div>\r\n<div class=\"section-content\">\r\n<div class=\"section-inner sectionLayout--insetColumn\">\r\n<p class=\"graf graf--p graf--empty\">&nbsp;</p>\r\n<p class=\"graf graf--p\"><strong class=\"markup--strong markup--p-strong\">Views and Urls!</strong></p>\r\n<p class=\"graf graf--p\">On this last part we create our urls, templates, register all on settings and final the views. On views.py we use all the logic and the models we needed so the templates have enough data to show what we want. But before that let configure the settings.py and urls.py. On settings.py we replace the code that exist with this&nbsp;</p>\r\n<pre class=\"graf graf--pre\">TEMPLATES = [<br />    {<br />        <strong class=\"markup--strong markup--pre-strong\">'BACKEND'</strong>: <strong class=\"markup--strong markup--pre-strong\">'django.template.backends.django.DjangoTemplates'</strong>,<br />        <strong class=\"markup--strong markup--pre-strong\">'DIRS'</strong>: [os.path.join(BASE_DIR, <strong class=\"markup--strong markup--pre-strong\">'templates'</strong>),],<br />        <strong class=\"markup--strong markup--pre-strong\">'APP_DIRS'</strong>: <strong class=\"markup--strong markup--pre-strong\">True</strong>,<br />        <strong class=\"markup--strong markup--pre-strong\">'OPTIONS'</strong>: {<br />            <strong class=\"markup--strong markup--pre-strong\">'context_processors'</strong>: [<br />                <strong class=\"markup--strong markup--pre-strong\">'django.template.context_processors.debug'</strong>,<br />                <strong class=\"markup--strong markup--pre-strong\">'django.template.context_processors.request'</strong>,<br />                <strong class=\"markup--strong markup--pre-strong\">'django.contrib.auth.context_processors.auth'</strong>,<br />                <strong class=\"markup--strong markup--pre-strong\">'django.contrib.messages.context_processors.messages'</strong>,<br />            ],<br />        },<br />    },<br />]</pre>\r\n<p class=\"graf graf--p\">Then on same folder on urls.py we replace the code with this&nbsp;</p>\r\n<pre class=\"graf graf--pre\"><strong class=\"markup--strong markup--pre-strong\">from </strong>django.contrib <strong class=\"markup--strong markup--pre-strong\">import </strong>admin<br /><strong class=\"markup--strong markup--pre-strong\">from </strong>django.urls <strong class=\"markup--strong markup--pre-strong\">import </strong>path<br /><strong class=\"markup--strong markup--pre-strong\">from </strong>expenses.views <strong class=\"markup--strong markup--pre-strong\">import </strong>(HomepageView, BillListView,<br />                            PayrollListView, ExpensesListView, <br />                            report_view<br />                            )<br /><br />urlpatterns = [<br />    path(<strong class=\"markup--strong markup--pre-strong\">'admin/'</strong>, admin.site.urls),<br />    path(<strong class=\"markup--strong markup--pre-strong\">''</strong>, HomepageView.as_view(), name=<strong class=\"markup--strong markup--pre-strong\">'homepage'</strong>),<br /><br />    path(<strong class=\"markup--strong markup--pre-strong\">'bills/'</strong>, BillListView.as_view(), name=<strong class=\"markup--strong markup--pre-strong\">'bills_view'</strong>),<br />    path(<strong class=\"markup--strong markup--pre-strong\">'payroll/'</strong>, PayrollListView.as_view(), name=<strong class=\"markup--strong markup--pre-strong\">'payroll_view'</strong>),<br />    path(<strong class=\"markup--strong markup--pre-strong\">'expenses/'</strong>, ExpensesListView.as_view(), name=<strong class=\"markup--strong markup--pre-strong\">'expenses_view'</strong>),<br />    path(<strong class=\"markup--strong markup--pre-strong\">'reports/'</strong>, report_view, name=<strong class=\"markup--strong markup--pre-strong\">'reports_view'</strong>)<br /><br />]</pre>\r\n<p class=\"graf graf--p\">Now lets handle the views.py!</p>\r\n<p class=\"graf graf--p\">We assume here that the templates are ready on template folder in our app. Don&rsquo;t worry we will add them later. So after the initial imports we will create our first view for the homepage.</p>\r\n<pre class=\"graf graf--pre\"><strong class=\"markup--strong markup--pre-strong\">from </strong>django.shortcuts <strong class=\"markup--strong markup--pre-strong\">import </strong>render, get_list_or_404<br /><strong class=\"markup--strong markup--pre-strong\">from </strong>django.views.generic <strong class=\"markup--strong markup--pre-strong\">import </strong>TemplateView, ListView<br /><strong class=\"markup--strong markup--pre-strong\">from </strong>django.conf <strong class=\"markup--strong markup--pre-strong\">import </strong>settings<br /><br /><strong class=\"markup--strong markup--pre-strong\">from </strong>.models <strong class=\"markup--strong markup--pre-strong\">import </strong>*<br /><br /><strong class=\"markup--strong markup--pre-strong\">from </strong>itertools <strong class=\"markup--strong markup--pre-strong\">import </strong>chain<br /><strong class=\"markup--strong markup--pre-strong\">from </strong>dateutil.relativedelta <strong class=\"markup--strong markup--pre-strong\">import </strong>relativedelta<br /><strong class=\"markup--strong markup--pre-strong\">import </strong>datetime<br />CURRENCY = settings.CURRENCY<br /><br /><br /><strong class=\"markup--strong markup--pre-strong\">class </strong>HomepageView(TemplateView):<br />    template_name = <strong class=\"markup--strong markup--pre-strong\">'index.html'<br /><br />    def </strong>get_context_data(self, **kwargs):<br />        context = super(HomepageView, self).get_context_data(**kwargs)<br />        bills = Bill.my_query.get_queryset().unpaid()[:10]<br />        payrolls = Payroll.my_query.get_queryset().unpaid()[:10]<br />        expenses = GenericExpense.my_query.get_queryset().unpaid()[:10]<br />        context.update({<strong class=\"markup--strong markup--pre-strong\">'bills'</strong>: bills,<br />                        <strong class=\"markup--strong markup--pre-strong\">'payroll'</strong>: payrolls,<br />                        <strong class=\"markup--strong markup--pre-strong\">'expenses'</strong>: expenses<br />                        })<br />        <strong class=\"markup--strong markup--pre-strong\">return </strong>context</pre>\r\n<blockquote class=\"graf graf--blockquote\">In this example we will use monstly ClassView and not function for our view. If the view you want is something simply is better to use class, maybe get more time to create but is more readable if you need to change something later. So we use our costum manager as you can see.</blockquote>\r\n<p class=\"graf graf--p\">Now lets add more views on views.py</p>\r\n<pre class=\"graf graf--pre\"><strong class=\"markup--strong markup--pre-strong\">class </strong>BillListView(ListView):<br />    model = Bill<br />    template_name = <strong class=\"markup--strong markup--pre-strong\">'page_list.html'<br />    </strong>paginate_by = 100<br /><br />    <strong class=\"markup--strong markup--pre-strong\">def </strong>get_queryset(self):<br />        queryset = Bill.objects.all()<br />        queryset = Bill.filters_data(self.request, queryset)<br />        <strong class=\"markup--strong markup--pre-strong\">return </strong>queryset<br /><br />    <strong class=\"markup--strong markup--pre-strong\">def </strong>get_context_data(self, **kwargs):<br />        context = super(BillListView, self).get_context_data(**kwargs)<br />        page_title = <strong class=\"markup--strong markup--pre-strong\">'Bills List'<br />        </strong>categories = BillCategory.objects.all()<br />        search_name, cate_name, paid_name = [self.request.GET.get(<strong class=\"markup--strong markup--pre-strong\">'search_name'</strong>, <strong class=\"markup--strong markup--pre-strong\">None</strong>),<br />                                             self.request.GET.getlist(<strong class=\"markup--strong markup--pre-strong\">'cate_name'</strong>, <strong class=\"markup--strong markup--pre-strong\">None</strong>),<br />                                             self.request.GET.getlist(<strong class=\"markup--strong markup--pre-strong\">'paid_name'</strong>)<br />                                             ]<br />        total_value, paid_value, diff, category_analysis = Bill.analysis(self.object_list)<br />        currency = CURRENCY<br />        context.update(locals())<br />        <strong class=\"markup--strong markup--pre-strong\">return </strong>context<br /><br /><br /><strong class=\"markup--strong markup--pre-strong\">class </strong>PayrollListView(ListView):<br />    model = Payroll<br />    template_name = <strong class=\"markup--strong markup--pre-strong\">'page_list.html'<br />    </strong>paginate_by = 100<br /><br />    <strong class=\"markup--strong markup--pre-strong\">def </strong>get_queryset(self):<br />        queryset = Payroll.objects.all()<br />        queryset = Payroll.filters_data(self.request, queryset)<br />        <strong class=\"markup--strong markup--pre-strong\">return </strong>queryset<br /><br />    <strong class=\"markup--strong markup--pre-strong\">def </strong>get_context_data(self, **kwargs):<br />        context = super(PayrollListView, self).get_context_data(**kwargs)<br />        page_title = <strong class=\"markup--strong markup--pre-strong\">'Payroll List'<br />        </strong>categories = PayrollCategory.objects.all()<br />        persons = Person.objects.all()<br />        search_name, cate_name, paid_name, person_name = [self.request.GET.get(<strong class=\"markup--strong markup--pre-strong\">'search_name'</strong>, <strong class=\"markup--strong markup--pre-strong\">None</strong>),<br />                                                          self.request.GET.getlist(<strong class=\"markup--strong markup--pre-strong\">'cate_name'</strong>, <strong class=\"markup--strong markup--pre-strong\">None</strong>),<br />                                                          self.request.GET.getlist(<strong class=\"markup--strong markup--pre-strong\">'paid_name'</strong>, <strong class=\"markup--strong markup--pre-strong\">None</strong>),<br />                                                          self.request.GET.getlist(<strong class=\"markup--strong markup--pre-strong\">'person_name'</strong>, <strong class=\"markup--strong markup--pre-strong\">None</strong>)<br />                                                          ]<br />        total_value, paid_value, diff, category_analysis = Payroll.analysis(self.object_list)<br />        currency = CURRENCY<br />        context.update(locals())<br />        <strong class=\"markup--strong markup--pre-strong\">return </strong>context<br /><br /><br /><strong class=\"markup--strong markup--pre-strong\">class </strong>ExpensesListView(ListView):<br />    model = GenericExpense<br />    template_name = <strong class=\"markup--strong markup--pre-strong\">'page_list.html'<br />    </strong>paginate_by = 100<br /><br />    <strong class=\"markup--strong markup--pre-strong\">def </strong>get_queryset(self):<br />        queryset = GenericExpense.objects.all()<br />        queryset = GenericExpense.filters_data(self.request, queryset)<br />        <strong class=\"markup--strong markup--pre-strong\">return </strong>queryset<br /><br />    <strong class=\"markup--strong markup--pre-strong\">def </strong>get_context_data(self, **kwargs):<br />        context = super(ExpensesListView, self).get_context_data(**kwargs)<br />        page_title = <strong class=\"markup--strong markup--pre-strong\">'Expenses List'<br />        </strong>categories = GenericExpenseCategory.objects.all()<br />        search_name, cate_name, paid_name = [self.request.GET.get(<strong class=\"markup--strong markup--pre-strong\">'search_name'</strong>, <strong class=\"markup--strong markup--pre-strong\">None</strong>),<br />                                             self.request.GET.getlist(<strong class=\"markup--strong markup--pre-strong\">'cate_name'</strong>, <strong class=\"markup--strong markup--pre-strong\">None</strong>),<br />                                             self.request.GET.getlist(<strong class=\"markup--strong markup--pre-strong\">'paid_name'</strong>)<br />                                             ]<br />        total_value, paid_value, diff, category_analysis = GenericExpense.analysis(self.object_list)<br />        currency = CURRENCY<br />        context.update(locals())<br />        <strong class=\"markup--strong markup--pre-strong\">return </strong>context</pre>\r\n<p class=\"graf graf--p\">Here will only explain one view cause they are similar.</p>\r\n<pre class=\"graf graf--pre\"><strong class=\"markup--strong markup--pre-strong\">def </strong>get_queryset(self):<br />    queryset = Bill.objects.all()<br />    queryset = Bill.filters_data(self.request, queryset)<br />    <strong class=\"markup--strong markup--pre-strong\">return </strong>queryset</pre>\r\n<blockquote class=\"graf graf--blockquote\">How works? If you remember on the begin we added this code on our model, so now what we do? We get in first all the Bill objects and after that we get our request.GET and if the users has filter the data on frontend we filter the queryset and return what he want. We could write the logic here in view but is aways better fat models thin view when you can do it.</blockquote>\r\n<pre class=\"graf graf--pre\">search_name,cate_name,paid_name=[<br />self.request.GET.get(<strong class=\"markup--strong markup--pre-strong\">'search_name'</strong>,<strong class=\"markup--strong markup--pre-strong\">None</strong>),<br />                                   self.request.GET.getlist(<strong class=\"markup--strong markup--pre-strong\">'cate_name'</strong>, <strong class=\"markup--strong markup--pre-strong\">None</strong>),<br />                                     self.request.GET.getlist(<strong class=\"markup--strong markup--pre-strong\">'paid_name'</strong>, <strong class=\"markup--strong markup--pre-strong\">None</strong>)<br />                                     ]</pre>\r\n<blockquote class=\"graf graf--blockquote\">Here we get again the request.GET data, we will use it later on template to populate the values on forms.</blockquote>\r\n<pre class=\"graf graf--pre\">total_value, paid_value, diff, category_analysis = Bill.analysis(self.object_list)</pre>\r\n<p class=\"graf graf--p\">And that line lead us on the&nbsp;</p>\r\n<pre class=\"graf graf--pre\">@staticmethod<br /><strong class=\"markup--strong markup--pre-strong\">def </strong>analysis(queryset):<br />    total_value = queryset.aggregate(Sum(<strong class=\"markup--strong markup--pre-strong\">'final_value'</strong>))[<strong class=\"markup--strong markup--pre-strong\">'final_value__sum'</strong>] <strong class=\"markup--strong markup--pre-strong\">if </strong>queryset <strong class=\"markup--strong markup--pre-strong\">else </strong>0<br />    paid_value = queryset.filter(is_paid=<strong class=\"markup--strong markup--pre-strong\">False</strong>).aggregate(Sum(<strong class=\"markup--strong markup--pre-strong\">'final_value'</strong>))[<strong class=\"markup--strong markup--pre-strong\">'final_value__sum'</strong>]\\<br />        <strong class=\"markup--strong markup--pre-strong\">if </strong>queryset.filter(is_paid=<strong class=\"markup--strong markup--pre-strong\">False</strong>) <strong class=\"markup--strong markup--pre-strong\">else </strong>0<br />    diff = total_value - paid_value<br />    category_analysis = queryset.values(<strong class=\"markup--strong markup--pre-strong\">'category__title'</strong>).annotate(total_value=Sum(<strong class=\"markup--strong markup--pre-strong\">'final_value'</strong>),<br />                                                                   remaining=Sum(F(<strong class=\"markup--strong markup--pre-strong\">'final_value'</strong>)-F(<strong class=\"markup--strong markup--pre-strong\">'paid_value'</strong>))<br />                                                                   ).order_by(<strong class=\"markup--strong markup--pre-strong\">'remaining'</strong>)<br />    <strong class=\"markup--strong markup--pre-strong\">return </strong>[total_value, paid_value, diff, category_analysis]</pre>\r\n<blockquote class=\"graf graf--blockquote\">Here we do this, we get the filtered queryset from before and we calculate the values we want. If you want to learn the difference aggregate and annotate go here. The static method we use is we tell to our class we want to use this function which is related to the class but not to the object, so using it we get rid from the self.</blockquote>\r\n<p class=\"graf graf--p\">And now last and bigger and more complicated view</p>\r\n<pre class=\"graf graf--pre\"><strong class=\"markup--strong markup--pre-strong\">def </strong>report_view(request):<br />    startDate = request.GET.get(<strong class=\"markup--strong markup--pre-strong\">'startDate'</strong>, <strong class=\"markup--strong markup--pre-strong\">'2018-01-01'</strong>)<br />    endDate = request.GET.get(<strong class=\"markup--strong markup--pre-strong\">'endDate'</strong>, <strong class=\"markup--strong markup--pre-strong\">'2018-12-31'</strong>)<br />    <strong class=\"markup--strong markup--pre-strong\">if </strong>startDate &gt; endDate:<br />        startDate , endDate = <strong class=\"markup--strong markup--pre-strong\">'2018-01-01'</strong>, <strong class=\"markup--strong markup--pre-strong\">'2018-12-31'<br />    </strong>date_start = datetime.datetime.strptime(startDate, <strong class=\"markup--strong markup--pre-strong\">'%Y-%m-%d'</strong>).date()<br />    date_end = datetime.datetime.strptime(endDate, <strong class=\"markup--strong markup--pre-strong\">'%Y-%m-%d'</strong>).date()<br />    bills = Bill.my_query.get_queryset().filter_by_date(date_start, date_end)<br />    payrolls = Payroll.my_query.get_queryset().filter_by_date(date_start, date_end)<br />    expenses = GenericExpense.my_query.get_queryset().filter_by_date(date_start, date_end)<br />    queryset = sorted(chain(bills, payrolls, expenses),<br />                    key=<strong class=\"markup--strong markup--pre-strong\">lambda </strong>instance: instance.date_expired<br />                    )<br />    bill_total_value, bill_paid_value, bill_diff, bill_category_analysis = DefaultExpenseModel.analysis(bills)<br />    payroll_total_value, payroll_paid_value, payroll_diff, bill_category_analysis = DefaultExpenseModel.analysis(payrolls)<br />    expense_total_value, expense_paid_value, expense_diff, expense_category_analysis = DefaultExpenseModel.analysis(expenses)<br /><br />    bill_by_month, payroll_by_month, expenses_by_month, totals_by_month =[], [], [] ,[]<br />    months_list = []<br />    <strong class=\"markup--strong markup--pre-strong\">while </strong>date_start &lt; date_end:<br />        months_list.append(date_start)<br />        date_start += relativedelta(months=1)<br /><br />    <strong class=\"markup--strong markup--pre-strong\">for </strong>date <strong class=\"markup--strong markup--pre-strong\">in </strong>months_list:<br />        start = date.replace(day=1)<br />        end = date.replace(day=28)<br />        this_month_bill_queryset = bills.filter(date_expired__range=[start, end])<br />        this_month_bills = DefaultExpenseModel.analysis(this_month_bill_queryset)<br />        this_month_payroll_queryset = payrolls.filter(date_expired__range=[start, end])<br />        this_month_payroll = DefaultExpenseModel.analysis(this_month_payroll_queryset)<br />        this_month_expense_queryset = expenses.filter(date_expired__range=[start, end])<br />        this_month_expense = DefaultExpenseModel.analysis(this_month_expense_queryset)<br />        bill_by_month.append(this_month_bills)<br />        payroll_by_month.append(this_month_expense)<br />        expenses_by_month.append(this_month_payroll)<br />        totals_by_month.append([this_month_bills[0]+this_month_expense[0]+ this_month_payroll[0],<br />                                this_month_bills[1] + this_month_expense[1] + this_month_payroll[1],<br />                                this_month_bills[2] + this_month_expense[2] + this_month_payroll[2]<br />                                ])<br /><br />    totals = [payroll_total_value + bill_total_value + expense_total_value,<br />              bill_paid_value + payroll_paid_value + expense_paid_value,<br />              bill_diff + payroll_diff + expense_diff<br />              ]<br />    currency = CURRENCY<br />    context = locals()<br />    <strong class=\"markup--strong markup--pre-strong\">return </strong>render(request, <strong class=\"markup--strong markup--pre-strong\">'report.html'</strong>, context=context)</pre>\r\n<p class=\"graf graf--p\">So many things here&hellip;. Ok lets start from the begin&hellip;.&nbsp;</p>\r\n<pre class=\"graf graf--pre\">startDate = request.GET.get(<strong class=\"markup--strong markup--pre-strong\">'startDate'</strong>, <strong class=\"markup--strong markup--pre-strong\">'2018-01-01'</strong>)<br />endDate = request.GET.get(<strong class=\"markup--strong markup--pre-strong\">'endDate'</strong>, <strong class=\"markup--strong markup--pre-strong\">'2018-12-31'</strong>)<br /><strong class=\"markup--strong markup--pre-strong\">if </strong>startDate &gt; endDate:<br />    startDate , endDate = <strong class=\"markup--strong markup--pre-strong\">'2018-01-01'</strong>, <strong class=\"markup--strong markup--pre-strong\">'2018-12-31'<br /></strong>date_start = datetime.datetime.strptime(startDate, <strong class=\"markup--strong markup--pre-strong\">'%Y-%m-%d'</strong>).date()<br />date_end = datetime.datetime.strptime(endDate, <strong class=\"markup--strong markup--pre-strong\">'%Y-%m-%d'</strong>).date()</pre>\r\n<blockquote class=\"graf graf--blockquote\">So here we ask if user added a date on form, and if not we have the initial date values, then we check if endDate is bigger than startDate so the app dont crash when we filter it,(this e should do with javascript too but we learn python here! and we should to check if both values is date) and if anything allright we convert it on a format our models can understand.</blockquote>\r\n<pre class=\"graf graf--pre\">bills = Bill.my_query.get_queryset().filter_by_date(date_start, date_end)<br />payrolls = Payroll.my_query.get_queryset().filter_by_date(date_start, date_end)<br />expenses = GenericExpense.my_query.get_queryset().filter_by_date(date_start, date_end)<br />queryset = sorted(chain(bills, payrolls, expenses),<br />                key=<strong class=\"markup--strong markup--pre-strong\">lambda </strong>instance: instance.date_expired<br />                )</pre>\r\n<blockquote class=\"graf graf--blockquote\">We filter our models and then we do the trick! We use the chain python provide us. In this complicated like we say on pythonic words get the querysets i asked you before and chain them all together using as chain link the date_expired and sorted it!</blockquote>\r\n<p class=\"graf graf--p\">Next lines are easy and then some brutal coding for our chart populate</p>\r\n<pre class=\"graf graf--pre\">bill_by_month, payroll_by_month, expenses_by_month, totals_by_month = [], [], [] ,[]<br />months_list = []<br /><strong class=\"markup--strong markup--pre-strong\">while </strong>date_start &lt; date_end:<br />    months_list.append(date_start)<br />    date_start += relativedelta(months=1)</pre>\r\n<p class=\"graf graf--p\">Here first we create our lists to store our results and the months, after that we do a loop to calculate the months. The object start is easy we just replace the day with one, the last day is tricky tho, because here can be 28, 30 or 31. Thats why we wrote this</p>\r\n<pre class=\"graf graf--pre\"><strong class=\"markup--strong markup--pre-strong\">for </strong>date <strong class=\"markup--strong markup--pre-strong\">in </strong>months_list:<br />    start = date.replace(day=1)<br />    next_month = date.replace(day=28) + datetime.timedelta(days=4)<br />    end = next_month - datetime.timedelta(days=next_month.days)<br />    this_month_bill_queryset = bills.filter(date_expired__range=[start, end])<br />    this_month_bills = DefaultExpenseModel.analysis(this_month_bill_queryset)<br />    this_month_payroll_queryset = payrolls.filter(date_expired__range=[start, end])<br />    this_month_payroll = DefaultExpenseModel.analysis(this_month_payroll_queryset)<br />    this_month_expense_queryset = expenses.filter(date_expired__range=[start, end])<br />    this_month_expense = DefaultExpenseModel.analysis(this_month_expense_queryset)<br />    bill_by_month.append(this_month_bills)<br />    payroll_by_month.append(this_month_expense)<br />    expenses_by_month.append(this_month_payroll)<br />    totals_by_month.append([this_month_bills[0]+this_month_expense[0]+ this_month_payroll[0],<br />                            this_month_bills[1] + this_month_expense[1] + this_month_payroll[1],<br />                            this_month_bills[2] + this_month_expense[2] + this_month_payroll[2]<br />                            ])<br /><br />totals = [payroll_total_value + bill_total_value + expense_total_value,<br />          bill_paid_value + payroll_paid_value + expense_paid_value,<br />          bill_diff + payroll_diff + expense_diff<br />          ]</pre>\r\n<p class=\"graf graf--p\">The object start is easy we just replace the day with one, the last day is tricky tho, because here can be 28, 30 or 31. Thats why we wrote this</p>\r\n<pre class=\"graf graf--pre\">next_month = date.replace(day=28) + datetime.timedelta(days=4)<br />end = next_month - datetime.timedelta(days=next_month.days)</pre>\r\n<p class=\"graf graf--p\">After that is the same, we do our queryset analysis like before we store the data on our list and is ready for the frontend!</p>\r\n</div>\r\n</div>\r\n<div class=\"section-divider\"><hr class=\"section-divider\" /></div>\r\n<div class=\"section-content\">\r\n<div class=\"section-inner sectionLayout--insetColumn\">\r\n<p class=\"graf graf--p\"><strong class=\"markup--strong markup--p-strong\">Frontend</strong></p>\r\n<p class=\"graf graf--p\">The last part now the templates, if you don&rsquo;t allready did it create a folder inside the expenses app called templates and there create our first file index.html. We will not use our own static, just cdn for bootstrap and chart.js.</p>\r\n<blockquote class=\"graf graf--blockquote\">So there isn&rsquo;t much explain here just go on github and grab the templates. The tag include works like a charm we can split our template in parts so its easier to read or edit. The tag block used when a second template use it as base so we specify the place where we want to change the code. With the class row, col etc bootstrap does all the magic for us to put order on the elements. Now on report.html lets see how work the charts.</blockquote>\r\n<pre class=\"graf graf--pre\">&lt;<strong class=\"markup--strong markup--pre-strong\">div class=\"row\"</strong>&gt;<br />    &lt;<strong class=\"markup--strong markup--pre-strong\">div class=\"col-8\"</strong>&gt;&lt;<strong class=\"markup--strong markup--pre-strong\">canvas id=\"myChart\" width=\"400\" height=\"150\"</strong>&gt;&lt;/<strong class=\"markup--strong markup--pre-strong\">canvas</strong>&gt;&lt;/<strong class=\"markup--strong markup--pre-strong\">div</strong>&gt;<br />    &lt;<strong class=\"markup--strong markup--pre-strong\">div class=\"col-4\"</strong>&gt;&lt;<strong class=\"markup--strong markup--pre-strong\">canvas id=\"myChart0\" width=\"400\" height=\"300\"</strong>&gt;&lt;/<strong class=\"markup--strong markup--pre-strong\">canvas</strong>&gt;&lt;/<strong class=\"markup--strong markup--pre-strong\">div</strong>&gt;<br />&lt;/<strong class=\"markup--strong markup--pre-strong\">div</strong>&gt;</pre>\r\n<p class=\"graf graf--p\">Thats the easy part, with the help of bootstrap we specify how much space charts will get and now lets go on the javascript</p>\r\n<pre class=\"graf graf--pre\"><strong class=\"markup--strong markup--pre-strong\">var <em class=\"markup--em markup--pre-em\">ctx </em></strong>= <strong class=\"markup--strong markup--pre-strong\">document</strong>.getElementById(<strong class=\"markup--strong markup--pre-strong\">\"myChart\"</strong>).getContext(<strong class=\"markup--strong markup--pre-strong\">'2d'</strong>);<br /><strong class=\"markup--strong markup--pre-strong\">var <em class=\"markup--em markup--pre-em\">myChart </em></strong>= <strong class=\"markup--strong markup--pre-strong\">new </strong>Chart(<strong class=\"markup--strong markup--pre-strong\"><em class=\"markup--em markup--pre-em\">ctx</em></strong>, {<br />    <strong class=\"markup--strong markup--pre-strong\">type</strong>: <strong class=\"markup--strong markup--pre-strong\">'line'</strong>,<br />    <strong class=\"markup--strong markup--pre-strong\">data</strong>: {<br />        <strong class=\"markup--strong markup--pre-strong\">labels</strong>: [<br />            {% <strong class=\"markup--strong markup--pre-strong\">for month in months_list </strong>%}<br />                {% <strong class=\"markup--strong markup--pre-strong\">if forloop</strong>.<strong class=\"markup--strong markup--pre-strong\">last </strong>%}<br />                <strong class=\"markup--strong markup--pre-strong\">\"</strong>{{ <strong class=\"markup--strong markup--pre-strong\">month </strong>}}<strong class=\"markup--strong markup--pre-strong\">\"<br />                </strong>{% <strong class=\"markup--strong markup--pre-strong\">else </strong>%}<br />                <strong class=\"markup--strong markup--pre-strong\">\"</strong>{{ <strong class=\"markup--strong markup--pre-strong\">month </strong>}}<strong class=\"markup--strong markup--pre-strong\">\"</strong>,<br />                {% <strong class=\"markup--strong markup--pre-strong\">endif </strong>%}<br />            {% <strong class=\"markup--strong markup--pre-strong\">endfor </strong>%}<br />        ],<br />        <strong class=\"markup--strong markup--pre-strong\">datasets</strong>: [{<br />            <strong class=\"markup--strong markup--pre-strong\">label</strong>: <strong class=\"markup--strong markup--pre-strong\">'Bills'</strong>,<br />            <strong class=\"markup--strong markup--pre-strong\">fill</strong>:<strong class=\"markup--strong markup--pre-strong\">false</strong>,<br />            <strong class=\"markup--strong markup--pre-strong\">borderColor</strong>: <strong class=\"markup--strong markup--pre-strong\">'blue'</strong>,<br />            <strong class=\"markup--strong markup--pre-strong\">data</strong>: [{% <strong class=\"markup--strong markup--pre-strong\">for month in bill_by_month </strong>%}<br />                {% <strong class=\"markup--strong markup--pre-strong\">if forloop</strong>.<strong class=\"markup--strong markup--pre-strong\">last </strong>%}<br />                    <strong class=\"markup--strong markup--pre-strong\">\"</strong>{{ <strong class=\"markup--strong markup--pre-strong\">month</strong>.0 }}<strong class=\"markup--strong markup--pre-strong\">\"<br />                </strong>{% <strong class=\"markup--strong markup--pre-strong\">else </strong>%}<br />                    <strong class=\"markup--strong markup--pre-strong\">\"</strong>{{ <strong class=\"markup--strong markup--pre-strong\">month</strong>.0 }}<strong class=\"markup--strong markup--pre-strong\">\"</strong>,<br />                {% <strong class=\"markup--strong markup--pre-strong\">endif </strong>%}<br />            {% <strong class=\"markup--strong markup--pre-strong\">endfor </strong>%}],<br /><br />            <strong class=\"markup--strong markup--pre-strong\">borderWidth</strong>: 1<br />        },</pre>\r\n<blockquote class=\"graf graf--blockquote\">On first line we got the div and the we send our chart with the new Chart command. But we didn&rsquo;t done, we have to specify what type of chart is, the labels the dataset even the color of the dataset how fat will be the line etc&nbsp;. Here we only use the python to populate the data, and the javascript for the cosmetic changes.&nbsp;</blockquote>\r\n</div>\r\n</div>\r\n<div class=\"section-divider\"><hr class=\"section-divider\" /></div>\r\n<div class=\"section-content\">\r\n<div class=\"section-inner sectionLayout--insetColumn\">\r\n<p class=\"graf graf--p\"><strong class=\"markup--strong markup--p-strong\">Heroku</strong></p>\r\n<p class=\"graf graf--p\">Before we do anything lets make our app ready for heroku. We will use the version control program called github and we will create some files to explain heroku what to do.&nbsp;</p>\r\n<blockquote class=\"graf graf--blockquote\">Note before continue, in real app development you must never sent data like django secret key, email codes etc on github you must use a library like decouple which reads this data from enviroment, and you must connect the app with a real web database like postgres, here for simplicity again we will go with sqlite3 which is good but cant handle more than one user on same time, if more its get locked.</blockquote>\r\n<p class=\"graf graf--p\">Now lets create this file needed</p>\r\n<ul class=\"postList\">\r\n<li class=\"graf graf--li\">First file is called runtime.txt, is used to specify which version of python our app will use. We added the python-3.6.0</li>\r\n<li class=\"graf graf--li\">Second file is requirements.txt. Its a common python practice to add this file on every project to inform the user which libraries we used. On this file you will se two new libraries expept django the whitenoise and the gunicorn. This is for heroku the first handle the static files on production level and the second translate our app to nginx so the other server can serve it. So no anymore python developer server</li>\r\n<li class=\"graf graf--li\">And the last file is the Procfile and his job is to tell gunicorn where our ap wsgi is and we add this code&hellip; web: gunicorn my_expenses.wsgi\u200a&mdash;\u200alog-file\u200a&mdash;\u200a</li>\r\n</ul>\r\n<p class=\"graf graf--p\">Now we need to do more changes on our wsgi file</p>\r\n<pre class=\"graf graf--pre\"><strong class=\"markup--strong markup--pre-strong\">import </strong>os<br /><strong class=\"markup--strong markup--pre-strong\">from </strong>whitenoise.django <strong class=\"markup--strong markup--pre-strong\">import </strong>DjangoWhiteNoise<br /><strong class=\"markup--strong markup--pre-strong\">from </strong>django.core.wsgi <strong class=\"markup--strong markup--pre-strong\">import </strong>get_wsgi_application<br /><br />os.environ.setdefault(<strong class=\"markup--strong markup--pre-strong\">\"DJANGO_SETTINGS_MODULE\"</strong>, <strong class=\"markup--strong markup--pre-strong\">\"my_expenses.settings\"</strong>)<br /><br />application = get_wsgi_application()<br />application = DjangoWhiteNoise(application)</pre>\r\n<p class=\"graf graf--p\">And on settings.py we need to replace a line with that</p>\r\n<pre class=\"graf graf--pre\">ALLOWED_HOSTS = [ <strong class=\"markup--strong markup--pre-strong\">'127.0.0.1'</strong>, <strong class=\"markup--strong markup--pre-strong\">'example.com'</strong>,]</pre>\r\n<blockquote class=\"graf graf--blockquote\">Where example is your domain on heroku. Now our webapp is ready lets add git init. Go to github and create a new account, and after that create a new repository with any name you want and follow exactly the steps on the guide. If you want you can ignore this step and use mine. But is better to get familiar with git.</blockquote>\r\n<p class=\"graf graf--p graf--empty\">&nbsp;</p>\r\n<p class=\"graf graf--p\">Now lets go live on heroku, go to heroku and create a account, after all is settled create an new app. You have to use different name propable because that is reserved now</p>\r\n<img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*cM3skSEQCkwDvFsLj3cYWA.png\" alt=\"\" data-image-id=\"1*cM3skSEQCkwDvFsLj3cYWA.png\" data-width=\"717\" data-height=\"345\" />\r\n<p class=\"graf graf--p\">after that go here</p>\r\n<img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*2zURLmmZlwOV1RS2hHk_cw.png\" alt=\"\" data-image-id=\"1*2zURLmmZlwOV1RS2hHk_cw.png\" data-width=\"876\" data-height=\"470\" />\r\n<p class=\"graf graf--p\">If you created your own git repository or you fork mine use your account name and repository name or just use mine. After pressing done you will see the next page just press deploy Branch wait 1&ndash;2 min and your site is ready!</p>\r\n<img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*JgtT2ksqqvZKwELMtcJYbQ.png\" alt=\"\" data-image-id=\"1*JgtT2ksqqvZKwELMtcJYbQ.png\" data-width=\"1041\" data-height=\"518\" />\r\n<p class=\"graf graf--p\">If you see that error&nbsp;</p>\r\n<img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*hTn4ZCPMUjozPj12TxHGnw.png\" alt=\"\" data-image-id=\"1*hTn4ZCPMUjozPj12TxHGnw.png\" data-width=\"883\" data-height=\"345\" />\r\n<p class=\"graf graf--p\">you can fix it like this</p>\r\n<img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*VM1sQ1OsWIyMA4LAbpjfOg.png\" alt=\"\" data-image-id=\"1*VM1sQ1OsWIyMA4LAbpjfOg.png\" data-width=\"1232\" data-height=\"443\" />\r\n<p class=\"graf graf--p graf--empty\">&nbsp;</p>\r\n</div>\r\n</div>\r\n<pre><br /><br /></pre>\r\n<p>&nbsp;</p>", "keywords": "learning, programming, python , django, html, css. javascript,", "description": "", "title_eng": "Expenses App", "content_eng": "<div class=\"section-divider\"><hr class=\"section-divider\" /></div>\r\n<div class=\"section-content\">\r\n<div class=\"section-inner sectionLayout--insetColumn\">\r\n<p class=\"graf graf--p\">A tutorial for creating fast and reliable web apps with python and django</p>\r\n<img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/880/1*4Gn38CcUSyHW3JGfsvyGvw.png\" alt=\"\" data-image-id=\"1*4Gn38CcUSyHW3JGfsvyGvw.png\" data-width=\"1334\" data-height=\"461\" data-is-featured=\"true\" />\r\n<p class=\"graf graf--p graf--empty\">&nbsp;</p>\r\n<p class=\"graf graf--p\"><strong class=\"markup--strong markup--p-strong\">What we will do?</strong></p>\r\n<p class=\"graf graf--p\"><em class=\"markup--em markup--p-em\">We will create a webapp, which we will add our expenses.The expenses will be split up in three categories Bills, Payroll and Generic Expenses. Then we will create a database to store them and we will learn to make easy reports of the data stored and visualize them with charts.</em></p>\r\n<p class=\"graf graf--p graf--empty\">&nbsp;</p>\r\n<p class=\"graf graf--p\"><strong class=\"markup--strong markup--p-strong\">What we are gonna learn?</strong></p>\r\n<p class=\"graf graf--p\"><em class=\"markup--em markup--p-em\">We will learn who to create Abstract Models and how to use them on an app, we will configure the admin page, create actions, add features on save method, create costume managers and queries, creating views and urls, and making some examples on annotation and aggregate on database. On front-end we will use some basic bootstrap framework and we will integrate chart.js and use an example how django can handle it. And final we will go live using heroku and github.</em></p>\r\n<p class=\"graf graf--p graf--empty\">&nbsp;</p>\r\n<p class=\"graf graf--p\"><strong class=\"markup--strong markup--p-strong\">What will we use?</strong></p>\r\n<p class=\"graf graf--p\"><em class=\"markup--em markup--p-em\">We will use these libraries and frameworks, django 2.0, bootstrap 4, chart.js, github and heroku. Django is a framework in python which we can create fast and reliable web apps, bootstrap is a front-end framework which will handle our html and css&nbsp;, final chart.js the name say its all, will handle the charts! Github is a version control, will be used to store on the cloud our code and detect easy the changes and commits them and finally heroku is a PaaS service which has a nice free tier thats stores our webapp.</em></p>\r\n<p class=\"graf graf--p graf--empty\">&nbsp;</p>\r\n<p class=\"graf graf--p\"><strong class=\"markup--strong markup--p-strong\">Sources?</strong></p>\r\n<ul class=\"postList\">\r\n<li class=\"graf graf--li\"><em class=\"markup--em markup--li-em\">If you want to see a example of this app you can go here </em><a class=\"markup--anchor markup--li-anchor\" href=\"https://blog-expense.herokuapp.com/reports/\" rel=\"nofollow noopener\" target=\"_blank\" data-href=\"https://blog-expense.herokuapp.com/reports/\"><strong class=\"markup--strong markup--li-strong\"><em class=\"markup--em markup--li-em\">https://blog-expense.herokuapp.com/reports/</em></strong></a></li>\r\n<li class=\"graf graf--li\"><em class=\"markup--em markup--li-em\">Github repository &rarr; </em><a class=\"markup--anchor markup--li-anchor\" href=\"https://github.com/Zefarak/blog-expense-app\" rel=\"nofollow noopener\" target=\"_blank\" data-href=\"https://github.com/Zefarak/blog-expense-app\"><em class=\"markup--em markup--li-em\">https://github.com/Zefarak/blog-expense-app</em></a></li>\r\n<li class=\"graf graf--li\"><em class=\"markup--em markup--li-em\">django 2.0 Documentation &rarr; </em><a class=\"markup--anchor markup--li-anchor\" href=\"https://www.djangoproject.com\" rel=\"nofollow noopener noopener\" target=\"_blank\" data-href=\"https://www.djangoproject.com\"><em class=\"markup--em markup--li-em\">https://www.djangoproject.com</em></a></li>\r\n<li class=\"graf graf--li\"><em class=\"markup--em markup--li-em\">Bootstrap 4 &rarr; </em><a class=\"markup--anchor markup--li-anchor\" href=\"https://www.djangoproject.com\" rel=\"nofollow noopener noopener\" target=\"_blank\" data-href=\"https://www.djangoproject.com\"><em class=\"markup--em markup--li-em\">https://www.djangoproject.com</em></a></li>\r\n<li class=\"graf graf--li\"><em class=\"markup--em markup--li-em\">Chart.js &rarr; </em><a class=\"markup--anchor markup--li-anchor\" href=\"https://www.chartjs.org\" rel=\"nofollow noopener noopener\" target=\"_blank\" data-href=\"https://www.chartjs.org\"><em class=\"markup--em markup--li-em\">https://www.chartjs.org</em></a></li>\r\n</ul>\r\n</div>\r\n</div>\r\n<div class=\"section-divider\"><hr class=\"section-divider\" /></div>\r\n<div class=\"section-content\">\r\n<div class=\"section-inner sectionLayout--insetColumn\">\r\n<blockquote class=\"graf graf--blockquote\">Enough with the small-talk let&rsquo;s create our first app. This example is made using windows&nbsp;, so i assume you have windows and you have installed python 3.6 (its works with previous version too you just need to edit some code like get rid of f&rsquo;{test}&rsquo; etc) and django 2.0 or newer too, if not then follow this<a class=\"markup--anchor markup--blockquote-anchor\" href=\"https://docs.djangoproject.com/en/2.1/topics/install/\" rel=\"noopener\" target=\"_blank\" data-href=\"https://docs.djangoproject.com/en/2.1/topics/install/\"> guide.</a></blockquote>\r\n<p class=\"graf graf--p graf--empty\">&nbsp;</p>\r\n<p class=\"graf graf--p\">Now we are ready! Open the cmd on any folder you want and add this (ps. same commands works on linux etc so dont worry).</p>\r\n<pre class=\"graf graf--pre\">$ django-admin startproject my_expenses</pre>\r\n<p class=\"graf graf--p\">and then cd my_expenses and create our first app</p>\r\n<pre class=\"graf graf--pre\">$ python manage.py startapp expenses</pre>\r\n<p class=\"graf graf--p\">your project file tree will be like that</p>\r\n<img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/880/1*LNIZwO1cmc9UtL_BzJr5sw.png\" alt=\"\" data-image-id=\"1*LNIZwO1cmc9UtL_BzJr5sw.png\" data-width=\"171\" data-height=\"253\" />\r\n<p class=\"graf graf--p\">Now find the settings.py file and add &lsquo;expenses&rsquo; in INSTALLED_APPS.</p>\r\n<pre class=\"graf graf--pre\">INSTALLED_APPS = [<br />    <strong class=\"markup--strong markup--pre-strong\">'django.contrib.admin'</strong>,<br />    <strong class=\"markup--strong markup--pre-strong\">'django.contrib.auth'</strong>,<br />    <strong class=\"markup--strong markup--pre-strong\">'django.contrib.contenttypes'</strong>,<br />    <strong class=\"markup--strong markup--pre-strong\">'django.contrib.sessions'</strong>,<br />    <strong class=\"markup--strong markup--pre-strong\">'django.contrib.messages'</strong>,<br />    <strong class=\"markup--strong markup--pre-strong\">'django.contrib.staticfiles'</strong>,<br /><br />    <strong class=\"markup--strong markup--pre-strong\">'expenses',<br /></strong>]</pre>\r\n<p class=\"graf graf--p\"><em class=\"markup--em markup--p-em\">Thats it, django handled anything smooth and fast and our app is ready to run. But before do the testing lets populate our models.py first. When you find the models.py (details on image below) add the code below or copy it from</em><a class=\"markup--anchor markup--p-anchor\" href=\"https://github.com/Zefarak/blog-expense-app/blob/master/expenses/models.py\" rel=\"noopener\" target=\"_blank\" data-href=\"https://github.com/Zefarak/blog-expense-app/blob/master/expenses/models.py\"><em class=\"markup--em markup--p-em\"> github</em></a><em class=\"markup--em markup--p-em\">.</em></p>\r\n<p class=\"graf graf--p graf--empty\">&nbsp;</p>\r\n<img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/880/1*jFAFW4TXfHkbY9E87f_zAA.png\" alt=\"\" data-image-id=\"1*jFAFW4TXfHkbY9E87f_zAA.png\" data-width=\"147\" data-height=\"387\" />\r\n<pre class=\"graf graf--pre\"><strong class=\"markup--strong markup--pre-strong\">from </strong>django.db <strong class=\"markup--strong markup--pre-strong\">import </strong>models<br /><strong class=\"markup--strong markup--pre-strong\">from </strong>django.db.models <strong class=\"markup--strong markup--pre-strong\">import </strong>Sum, F<br /><br /><strong class=\"markup--strong markup--pre-strong\">from </strong>.managers <strong class=\"markup--strong markup--pre-strong\">import </strong>GeneralManager<br /><br />CURRENCY = <strong class=\"markup--strong markup--pre-strong\">'&euro;'<br /><br /><br />class </strong>PaymentMethod(models.Model):<br />    title = models.CharField(unique=<strong class=\"markup--strong markup--pre-strong\">True</strong>, max_length=150)<br /><br />    <strong class=\"markup--strong markup--pre-strong\">def </strong>__str__(self):<br />        <strong class=\"markup--strong markup--pre-strong\">return </strong>self.title<br /><br />    <strong class=\"markup--strong markup--pre-strong\">class </strong>Meta:<br />        verbose_name_plural = <strong class=\"markup--strong markup--pre-strong\">'0. Payment Method'<br /><br /><br />class </strong>DefaultExpenseModel(models.Model):<br />    title = models.CharField(max_length=100, blank=<strong class=\"markup--strong markup--pre-strong\">True</strong>, null=<strong class=\"markup--strong markup--pre-strong\">True</strong>)<br />    date_expired = models.DateField()<br />    final_value = models.DecimalField(default=0, decimal_places=2, max_digits=20)<br />    paid_value = models.DecimalField(default=0, decimal_places=2, max_digits=20)<br />    is_paid = models.BooleanField(default=<strong class=\"markup--strong markup--pre-strong\">False</strong>)<br />    payment_method = models.ForeignKey(PaymentMethod, null=<strong class=\"markup--strong markup--pre-strong\">True</strong>, on_delete=models.SET_NULL)<br />    objects = models.Manager()<br />    my_query = GeneralManager()<br /><br />    <strong class=\"markup--strong markup--pre-strong\">class </strong>Meta:<br />        abstract = <strong class=\"markup--strong markup--pre-strong\">True<br /><br />    def </strong>save(self, *args, **kwargs):<br />        <strong class=\"markup--strong markup--pre-strong\">if </strong>self.is_paid:<br />            self.paid_value = self.final_value<br />        <strong class=\"markup--strong markup--pre-strong\">else</strong>:<br />            self.paid_value = 0<br />        super(DefaultExpenseModel, self).save(*args, **kwargs)<br /><br />    <strong class=\"markup--strong markup--pre-strong\">def </strong>__str__(self):<br />        <strong class=\"markup--strong markup--pre-strong\">return </strong>self.title<br /><br />    <strong class=\"markup--strong markup--pre-strong\">def </strong>tag_final_value(self):<br />        <strong class=\"markup--strong markup--pre-strong\">return f'{self.final_value} {CURRENCY}'<br /><br />    </strong>tag_final_value.short_description = <strong class=\"markup--strong markup--pre-strong\">'Value'<br /><br />    def </strong>tag_is_paid(self):<br />        <strong class=\"markup--strong markup--pre-strong\">return 'Is Paid' if </strong>self.is_paid <strong class=\"markup--strong markup--pre-strong\">else 'Not Paid'<br /><br />    </strong>tag_is_paid.short_description = <strong class=\"markup--strong markup--pre-strong\">'Paid'<br /><br />    </strong>@staticmethod<br />    <strong class=\"markup--strong markup--pre-strong\">def </strong>analysis(queryset):<br />        total_value = queryset.aggregate(Sum(<strong class=\"markup--strong markup--pre-strong\">'final_value'</strong>))[<strong class=\"markup--strong markup--pre-strong\">'final_value__sum'</strong>] <strong class=\"markup--strong markup--pre-strong\">if </strong>queryset <strong class=\"markup--strong markup--pre-strong\">else </strong>0<br />        paid_value = queryset.filter(is_paid=<strong class=\"markup--strong markup--pre-strong\">False</strong>).aggregate(Sum(<strong class=\"markup--strong markup--pre-strong\">'final_value'</strong>))[<strong class=\"markup--strong markup--pre-strong\">'final_value__sum'</strong>]\\<br />            <strong class=\"markup--strong markup--pre-strong\">if </strong>queryset.filter(is_paid=<strong class=\"markup--strong markup--pre-strong\">False</strong>) <strong class=\"markup--strong markup--pre-strong\">else </strong>0<br />        diff = total_value - paid_value<br />        category_analysis = queryset.values(<strong class=\"markup--strong markup--pre-strong\">'category__title'</strong>).annotate(total_value=Sum(<strong class=\"markup--strong markup--pre-strong\">'final_value'</strong>),<br />                                                                       remaining=Sum(F(<strong class=\"markup--strong markup--pre-strong\">'final_value'</strong>)-F(<strong class=\"markup--strong markup--pre-strong\">'paid_value'</strong>))<br />                                                                       ).order_by(<strong class=\"markup--strong markup--pre-strong\">'remaining'</strong>)<br />        <strong class=\"markup--strong markup--pre-strong\">return </strong>[total_value, paid_value, diff, category_analysis]<br /><br />    @staticmethod<br />    <strong class=\"markup--strong markup--pre-strong\">def </strong>filters_data(request, queryset):<br />        search_name = request.GET.get(<strong class=\"markup--strong markup--pre-strong\">'search_name'</strong>, <strong class=\"markup--strong markup--pre-strong\">None</strong>)<br />        cate_name = request.GET.getlist(<strong class=\"markup--strong markup--pre-strong\">'cate_name'</strong>, <strong class=\"markup--strong markup--pre-strong\">None</strong>)<br />        paid_name = request.GET.getlist(<strong class=\"markup--strong markup--pre-strong\">'paid_name'</strong>, <strong class=\"markup--strong markup--pre-strong\">None</strong>)<br />        person_name = request.GET.getlist(<strong class=\"markup--strong markup--pre-strong\">'person_name'</strong>, <strong class=\"markup--strong markup--pre-strong\">None</strong>)<br /><br />        queryset = queryset.filter(title__icontains=search_name) <strong class=\"markup--strong markup--pre-strong\">if </strong>search_name <strong class=\"markup--strong markup--pre-strong\">else </strong>queryset<br />        queryset = queryset.filter(category__id__in=cate_name) <strong class=\"markup--strong markup--pre-strong\">if </strong>cate_name <strong class=\"markup--strong markup--pre-strong\">else </strong>queryset<br />        queryset = queryset.filter(is_paid=<strong class=\"markup--strong markup--pre-strong\">True</strong>) <strong class=\"markup--strong markup--pre-strong\">if 'paid' </strong>== paid_name <strong class=\"markup--strong markup--pre-strong\">else </strong>queryset.filter(is_paid=<strong class=\"markup--strong markup--pre-strong\">False</strong>)\\<br />            <strong class=\"markup--strong markup--pre-strong\">if 'not_paid' </strong>== paid_name <strong class=\"markup--strong markup--pre-strong\">else </strong>queryset<br />        <strong class=\"markup--strong markup--pre-strong\">if </strong>person_name:<br />            <strong class=\"markup--strong markup--pre-strong\">try</strong>:<br />                queryset = queryset.filter(person__id__in=person_name)<br />            <strong class=\"markup--strong markup--pre-strong\">except</strong>:<br />                queryset = queryset<br />        <strong class=\"markup--strong markup--pre-strong\">return </strong>queryset</pre>\r\n<p class=\"graf graf--p graf--empty\">&nbsp;</p>\r\n<p class=\"graf graf--p\"><strong class=\"markup--strong markup--p-strong\">Code analysis!</strong></p>\r\n<p class=\"graf graf--p\"><em class=\"markup--em markup--p-em\">Here we will use the CURRENCY to easily change currency like dollar or euro. On PaymentMethod model will we store the payment options like PayPal, Cash, Visa etc. And final the DefaultExpenseModel is our Abstract Model which will use it as a base for the Bill, Payroll and Expense models. Using on our DefaultExpense Model&hellip;</em></p>\r\n<p class=\"graf graf--p graf--empty\">&nbsp;</p>\r\n<pre class=\"graf graf--pre\"><strong class=\"markup--strong markup--pre-strong\">class </strong>Meta:<br />    abstract = <strong class=\"markup--strong markup--pre-strong\">True</strong></pre>\r\n<p class=\"graf graf--p\">ensures the inheritance models will get all the fields, functions etc from this model and django will not create a separate table on our database for this model. The next code snippet is for the admin page, with that setting we can change the head value on the admin table.</p>\r\n<pre class=\"graf graf--pre\"><strong class=\"markup--strong markup--pre-strong\">def </strong>tag_final_value(self):<br />        <strong class=\"markup--strong markup--pre-strong\">return f'{self.final_value} {CURRENCY}'<br /><br /></strong>tag_final_value.short_description = <strong class=\"markup--strong markup--pre-strong\">'Value'</strong></pre>\r\n<p class=\"graf graf--p\"><em class=\"markup--em markup--p-em\">After that, we will override the save method adding a little of custom code. So the logic is we say to our models to check if user have paid the instance and if is true then the model save method will make paid value equal to final value if no will ensure paid value is 0. We will not use more option for simplicity of the app.</em></p>\r\n<pre class=\"graf graf--pre\"><strong class=\"markup--strong markup--pre-strong\">def </strong>save(self, *args, **kwargs):<br />    <strong class=\"markup--strong markup--pre-strong\">if </strong>self.is_paid:<br />        self.paid_value = self.final_value<br />    <strong class=\"markup--strong markup--pre-strong\">else</strong>:<br />        self.paid_value = 0<br />    super(DefaultExpenseModel, self).save(*args, **kwargs)</pre>\r\n<p class=\"graf graf--p\"><em class=\"markup--em markup--p-em\">The super&hellip; on last line ensures that anything default happens on save method will continue to happen, the analysis and filter_data method we will explain them later. Now our Bill and BillCategory model</em></p>\r\n<pre class=\"graf graf--pre\"><strong class=\"markup--strong markup--pre-strong\">class </strong>BillCategory(models.Model):<br />    title = models.CharField(unique=<strong class=\"markup--strong markup--pre-strong\">True</strong>, max_length=150)<br />    balance = models.DecimalField(default=0, max_digits=20, decimal_places=2)<br /><br />    <strong class=\"markup--strong markup--pre-strong\">class </strong>Meta:<br />        verbose_name_plural = <strong class=\"markup--strong markup--pre-strong\">'1. Bill Category'<br /><br />    def </strong>__str__(self):<br />        <strong class=\"markup--strong markup--pre-strong\">return </strong>self.title<br /><br />    <strong class=\"markup--strong markup--pre-strong\">def </strong>tag_balance(self):<br />        <strong class=\"markup--strong markup--pre-strong\">return f'{self.balance} {CURRENCY}'<br /><br />    </strong>tag_balance.short_description = <strong class=\"markup--strong markup--pre-strong\">'Value'<br /><br />    def </strong>update_category(self):<br />        queryset = self.bills.all()<br />        total_value = queryset.aggregate(Sum(<strong class=\"markup--strong markup--pre-strong\">'final_value'</strong>))[<strong class=\"markup--strong markup--pre-strong\">'final_value__sum'</strong>] <strong class=\"markup--strong markup--pre-strong\">if </strong>queryset <strong class=\"markup--strong markup--pre-strong\">else </strong>0<br />        paid_value = queryset.filter(is_paid=<strong class=\"markup--strong markup--pre-strong\">True</strong>).aggregate(Sum(<strong class=\"markup--strong markup--pre-strong\">'final_value'</strong>))[<strong class=\"markup--strong markup--pre-strong\">'final_value__sum'</strong>] \\<br />            <strong class=\"markup--strong markup--pre-strong\">if </strong>queryset.filter(is_paid=<strong class=\"markup--strong markup--pre-strong\">True</strong>) <strong class=\"markup--strong markup--pre-strong\">else </strong>0<br />        self.balance = total_value - paid_value<br />        self.save()<br /><br /><br /><strong class=\"markup--strong markup--pre-strong\">class </strong>Bill(DefaultExpenseModel):<br />    category = models.ForeignKey(BillCategory, null=<strong class=\"markup--strong markup--pre-strong\">True</strong>, on_delete=models.SET_NULL, related_name=<strong class=\"markup--strong markup--pre-strong\">'bills'</strong>)<br /><br />    <strong class=\"markup--strong markup--pre-strong\">class </strong>Meta:<br />        verbose_name_plural = <strong class=\"markup--strong markup--pre-strong\">'2. Bills'<br />        </strong>ordering = [<strong class=\"markup--strong markup--pre-strong\">'-date_expired'</strong>]<br /><br />    <strong class=\"markup--strong markup--pre-strong\">def </strong>save(self, *args, **kwargs):<br />        <strong class=\"markup--strong markup--pre-strong\">if not </strong>self.title:<br />            self.title = <strong class=\"markup--strong markup--pre-strong\">f'{self.category.title} - {self.id}'<br />        </strong>super(Bill, self).save(*args, **kwargs)<br />        self.category.update_category()<br /><br />    <strong class=\"markup--strong markup--pre-strong\">def </strong>tag_category(self):<br />        <strong class=\"markup--strong markup--pre-strong\">return f'{self.category}'</strong></pre>\r\n<p class=\"graf graf--p\">On BillCategory model we will define our bill categories like Netflix, AmazonPrime, CellPhone monthly payment.. Using this function update_category, we ensure the balance on bill category will be up to date. (Probably we be ineffiecient if have alot of records but is just a example).&nbsp;</p>\r\n<p class=\"graf graf--p graf--empty\">&nbsp;</p>\r\n<blockquote class=\"graf graf--blockquote\"><em class=\"markup--em markup--blockquote-em\">How works? After a Bill instance is saved, on save method we call the update_category which belongs on BillCategory model and then the update_category create two queries in database. The first return the total value of all bills which is related on this category. The related_name on ForeignKey is responsible for this. The second query does the same only for the paid instances. And after that we just do the maths and update the balance on our model!</em></blockquote>\r\n<pre class=\"graf graf--pre\"><strong class=\"markup--strong markup--pre-strong\">def </strong>update_category(self):<br />    queryset = self.bills.all()<br />    total_value = queryset.aggregate(Sum(<strong class=\"markup--strong markup--pre-strong\">'final_value'</strong>))[<strong class=\"markup--strong markup--pre-strong\">'final_value__sum'</strong>] <strong class=\"markup--strong markup--pre-strong\">if </strong>queryset <strong class=\"markup--strong markup--pre-strong\">else </strong>0<br />    paid_value = queryset.filter(is_paid=<strong class=\"markup--strong markup--pre-strong\">True</strong>).aggregate(Sum(<strong class=\"markup--strong markup--pre-strong\">'final_value'</strong>))[<strong class=\"markup--strong markup--pre-strong\">'final_value__sum'</strong>] \\<br />        <strong class=\"markup--strong markup--pre-strong\">if </strong>queryset.filter(is_paid=<strong class=\"markup--strong markup--pre-strong\">True</strong>) <strong class=\"markup--strong markup--pre-strong\">else </strong>0<br />    self.balance = total_value - paid_value<br />    self.save()</pre>\r\n<p class=\"graf graf--p\">With use the same logic on the next models</p>\r\n<pre class=\"graf graf--pre\"><strong class=\"markup--strong markup--pre-strong\">class </strong>PayrollCategory(models.Model):<br />    title = models.CharField(unique=<strong class=\"markup--strong markup--pre-strong\">True</strong>, max_length=150)<br />    balance = models.DecimalField(default=0, max_digits=20, decimal_places=2)<br /><br />    <strong class=\"markup--strong markup--pre-strong\">class </strong>Meta:<br />        verbose_name_plural = <strong class=\"markup--strong markup--pre-strong\">'3. Payroll Category'<br /><br />    def </strong>__str__(self):<br />        <strong class=\"markup--strong markup--pre-strong\">return </strong>self.title<br /><br />    <strong class=\"markup--strong markup--pre-strong\">def </strong>tag_balance(self):<br />        <strong class=\"markup--strong markup--pre-strong\">return f'{self.balance} {CURRENCY}'<br /><br />    </strong>tag_balance.short_description = <strong class=\"markup--strong markup--pre-strong\">'Value'<br /><br />    def </strong>update_category(self):<br />        queryset = self.category_payroll.all()<br />        total_value = queryset.aggregate(Sum(<strong class=\"markup--strong markup--pre-strong\">'final_value'</strong>))[<strong class=\"markup--strong markup--pre-strong\">'final_value__sum'</strong>] <strong class=\"markup--strong markup--pre-strong\">if </strong>queryset <strong class=\"markup--strong markup--pre-strong\">else </strong>0<br />        paid_value = queryset.filter(is_paid=<strong class=\"markup--strong markup--pre-strong\">True</strong>).aggregate(Sum(<strong class=\"markup--strong markup--pre-strong\">'final_value'</strong>))[<strong class=\"markup--strong markup--pre-strong\">'final_value__sum'</strong>] \\<br />            <strong class=\"markup--strong markup--pre-strong\">if </strong>queryset.filter(is_paid=<strong class=\"markup--strong markup--pre-strong\">True</strong>) <strong class=\"markup--strong markup--pre-strong\">else </strong>0<br />        self.balance = total_value - paid_value<br />        self.save()<br /><br /><br /><strong class=\"markup--strong markup--pre-strong\">class </strong>Person(models.Model):<br />    title = models.CharField(unique=<strong class=\"markup--strong markup--pre-strong\">True</strong>, max_length=150)<br />    occupation = models.CharField(max_length=100, blank=<strong class=\"markup--strong markup--pre-strong\">True</strong>, null=<strong class=\"markup--strong markup--pre-strong\">True</strong>)<br />    phone = models.CharField(max_length=10, blank=<strong class=\"markup--strong markup--pre-strong\">True</strong>, null=<strong class=\"markup--strong markup--pre-strong\">True</strong>)<br />    balance = models.DecimalField(default=0, max_digits=20, decimal_places=2)<br /><br />    <strong class=\"markup--strong markup--pre-strong\">class </strong>Meta:<br />        verbose_name_plural = <strong class=\"markup--strong markup--pre-strong\">'4. Persons'<br /><br />    def </strong>__str__(self):<br />        <strong class=\"markup--strong markup--pre-strong\">return </strong>self.title<br /><br />    <strong class=\"markup--strong markup--pre-strong\">def </strong>tag_balance(self):<br />        <strong class=\"markup--strong markup--pre-strong\">return f'{self.balance} {CURRENCY}'<br /><br />    </strong>tag_balance.short_description = <strong class=\"markup--strong markup--pre-strong\">'Value'<br /><br />    def </strong>update_person(self):<br />        queryset = self.person_payroll.all()<br />        total_value = queryset.aggregate(Sum(<strong class=\"markup--strong markup--pre-strong\">'final_value'</strong>))[<strong class=\"markup--strong markup--pre-strong\">'final_value__sum'</strong>] <strong class=\"markup--strong markup--pre-strong\">if </strong>queryset <strong class=\"markup--strong markup--pre-strong\">else </strong>0<br />        paid_value = queryset.filter(is_paid=<strong class=\"markup--strong markup--pre-strong\">True</strong>).aggregate(Sum(<strong class=\"markup--strong markup--pre-strong\">'final_value'</strong>))[<strong class=\"markup--strong markup--pre-strong\">'final_value__sum'</strong>] \\<br />            <strong class=\"markup--strong markup--pre-strong\">if </strong>queryset.filter(is_paid=<strong class=\"markup--strong markup--pre-strong\">True</strong>) <strong class=\"markup--strong markup--pre-strong\">else </strong>0<br />        self.balance = total_value - paid_value<br />        self.save()<br /><br /><br /><strong class=\"markup--strong markup--pre-strong\">class </strong>Payroll(DefaultExpenseModel):<br />    person = models.ForeignKey(Person, null=<strong class=\"markup--strong markup--pre-strong\">True</strong>, on_delete=models.SET_NULL, related_name=<strong class=\"markup--strong markup--pre-strong\">'person_payroll'</strong>)<br />    category = models.ForeignKey(PayrollCategory, null=<strong class=\"markup--strong markup--pre-strong\">True</strong>, on_delete=models.SET_NULL, related_name=<strong class=\"markup--strong markup--pre-strong\">'category_payroll'</strong>)<br /><br />    <strong class=\"markup--strong markup--pre-strong\">class </strong>Meta:<br />        verbose_name_plural = <strong class=\"markup--strong markup--pre-strong\">'5. Payroll'<br />        </strong>ordering = [<strong class=\"markup--strong markup--pre-strong\">'-date_expired'</strong>]<br /><br />    <strong class=\"markup--strong markup--pre-strong\">def </strong>save(self, *args, **kwargs):<br />        <strong class=\"markup--strong markup--pre-strong\">if not </strong>self.title:<br />            self.title = <strong class=\"markup--strong markup--pre-strong\">f'{self.person.title} - {self.id}'<br />        </strong>super(Payroll, self).save(*args, **kwargs)<br />        self.person.update_person()<br />        self.category.update_category()<br /><br />    <strong class=\"markup--strong markup--pre-strong\">def </strong>tag_category(self):<br />        <strong class=\"markup--strong markup--pre-strong\">return f'{self.person} - {self.category}'<br /><br /><br />class </strong>GenericExpenseCategory(models.Model):<br />    title = models.CharField(unique=<strong class=\"markup--strong markup--pre-strong\">True</strong>, max_length=150)<br />    balance = models.DecimalField(default=0, max_digits=20, decimal_places=2)<br /><br />    <strong class=\"markup--strong markup--pre-strong\">class </strong>Meta:<br />        verbose_name_plural = <strong class=\"markup--strong markup--pre-strong\">'6. Expense Category'<br /><br />    def </strong>__str__(self):<br />        <strong class=\"markup--strong markup--pre-strong\">return </strong>self.title<br /><br />    <strong class=\"markup--strong markup--pre-strong\">def </strong>tag_balance(self):<br />        <strong class=\"markup--strong markup--pre-strong\">return f'{self.balance} {CURRENCY}'<br /><br />    </strong>tag_balance.short_description = <strong class=\"markup--strong markup--pre-strong\">'Value'<br /><br />    def </strong>update_category(self):<br />        queryset = self.category_expenses.all()<br />        total_value = queryset.aggregate(Sum(<strong class=\"markup--strong markup--pre-strong\">'final_value'</strong>))[<strong class=\"markup--strong markup--pre-strong\">'final_value__sum'</strong>] <strong class=\"markup--strong markup--pre-strong\">if </strong>queryset <strong class=\"markup--strong markup--pre-strong\">else </strong>0<br />        paid_value = queryset.filter(is_paid=<strong class=\"markup--strong markup--pre-strong\">True</strong>).aggregate(Sum(<strong class=\"markup--strong markup--pre-strong\">'final_value'</strong>))[<strong class=\"markup--strong markup--pre-strong\">'final_value__sum'</strong>] \\<br />            <strong class=\"markup--strong markup--pre-strong\">if </strong>queryset.filter(is_paid=<strong class=\"markup--strong markup--pre-strong\">True</strong>) <strong class=\"markup--strong markup--pre-strong\">else </strong>0<br />        self.balance = total_value - paid_value<br />        self.save()<br /><br /><br /><strong class=\"markup--strong markup--pre-strong\">class </strong>GenericExpense(DefaultExpenseModel):<br />    category = models.ForeignKey(GenericExpenseCategory, null=<strong class=\"markup--strong markup--pre-strong\">True</strong>, on_delete=models.SET_NULL,<br />                                 related_name=<strong class=\"markup--strong markup--pre-strong\">'category_expenses'</strong>)<br /><br />    <strong class=\"markup--strong markup--pre-strong\">class </strong>Meta:<br />        verbose_name_plural = <strong class=\"markup--strong markup--pre-strong\">'7. Generic Expenses'<br />        </strong>ordering = [<strong class=\"markup--strong markup--pre-strong\">'-date_expired'</strong>]<br /><br />    <strong class=\"markup--strong markup--pre-strong\">def </strong>save(self, *args, **kwargs):<br />        <strong class=\"markup--strong markup--pre-strong\">if not </strong>self.title:<br />            self.title = <strong class=\"markup--strong markup--pre-strong\">f'{self.title}'<br />        </strong>super(GenericExpense, self).save(*args, **kwargs)<br />        self.category.update_category()<br /><br />    <strong class=\"markup--strong markup--pre-strong\">def </strong>tag_category(self):<br />        <strong class=\"markup--strong markup--pre-strong\">return f'{self.category}'</strong></pre>\r\n<p class=\"graf graf--p\"><em class=\"markup--em markup--p-em\">The only difference on Payroll model we update except category and the Person model.&nbsp;</em></p>\r\n<p class=\"graf graf--p graf--empty\">&nbsp;</p>\r\n<p class=\"graf graf--p\"><strong class=\"markup--strong markup--p-strong\"><em class=\"markup--em markup--p-em\">Now lets create the managers.py.</em></strong></p>\r\n<p class=\"graf graf--p\"><em class=\"markup--em markup--p-em\">Will we use this file to handle our custom queries. Django provide us his own ORM, thats means a system to ask data from database easy and fast. So we will take that system and will add some code like we did on save method. Add this file next to previous models.py. So lets see the code or grab it from </em><a class=\"markup--anchor markup--p-anchor\" href=\"https://github.com/Zefarak/blog-expense-app/blob/master/expenses/managers.py\" rel=\"noopener\" target=\"_blank\" data-href=\"https://github.com/Zefarak/blog-expense-app/blob/master/expenses/managers.py\"><em class=\"markup--em markup--p-em\">github</em></a><em class=\"markup--em markup--p-em\">.</em></p>\r\n<pre class=\"graf graf--pre\"><strong class=\"markup--strong markup--pre-strong\">from </strong>django.db.models <strong class=\"markup--strong markup--pre-strong\">import </strong>QuerySet, Manager<br /><strong class=\"markup--strong markup--pre-strong\">import </strong>datetime<br /><br /><br /><strong class=\"markup--strong markup--pre-strong\">class </strong>GenericQuerySet(QuerySet):<br />    <strong class=\"markup--strong markup--pre-strong\">def </strong>filter_by_date(self, date_start, date_end):<br />        <strong class=\"markup--strong markup--pre-strong\">return </strong>self.filter(date_expired__range=[date_start, date_end])<br /><br />    <strong class=\"markup--strong markup--pre-strong\">def </strong>unpaid(self):<br />        <strong class=\"markup--strong markup--pre-strong\">return </strong>self.filter(is_paid=<strong class=\"markup--strong markup--pre-strong\">False</strong>)<br /><br /><br /><strong class=\"markup--strong markup--pre-strong\">class </strong>GeneralManager(Manager):<br />    <strong class=\"markup--strong markup--pre-strong\">def </strong>get_queryset(self):<br />        <strong class=\"markup--strong markup--pre-strong\">return </strong>GenericQuerySet(self.model, using=self._db)</pre>\r\n<p class=\"graf graf--p\"><em class=\"markup--em markup--p-em\">So after the import from django we will define the first QuerySet. Propably is overkill to use it that way in this example, but is a good moment to use reusable code for managers. Creating the QuerySet and not writing the code directly on manager, give use the freedom to use the same code on as many managers we want. So when we use the&nbsp;</em></p>\r\n<pre class=\"graf graf--pre\"><strong class=\"markup--strong markup--pre-strong\">class </strong>GeneralManager(Manager):<br />    <strong class=\"markup--strong markup--pre-strong\">def </strong>get_queryset(self):<br />        <strong class=\"markup--strong markup--pre-strong\">return </strong>GenericQuerySet(self.model, using=self._db)</pre>\r\n<p class=\"graf graf--p\"><em class=\"markup--em markup--p-em\">from models we saying to django, get the query we created before and filter the model which is related. We bound the manager on models with a line like that my_query = GeneralManager(). We can use here objects =models.Manager() but that will overwrite the default manager and we dont want that on this project. On next code we just filter the queryset with the django ORM.</em></p>\r\n<pre class=\"graf graf--pre\"><strong class=\"markup--strong markup--pre-strong\">return </strong>self.filter(date_expired__range=[date_start, date_end])</pre>\r\n<p class=\"graf graf--p\">Our code on models.py is allready ready for the managers. So now next move is the admin page!</p>\r\n</div>\r\n</div>\r\n<div class=\"section-divider\"><hr class=\"section-divider\" /></div>\r\n<div class=\"section-content\">\r\n<div class=\"section-inner sectionLayout--insetColumn\">\r\n<p class=\"graf graf--p\"><strong class=\"markup--strong markup--p-strong\">Admin Page</strong></p>\r\n<p class=\"graf graf--p\">Now lets create the admin.py. If you django dont have created this file you can create it and add this code or grab it from <a class=\"markup--anchor markup--p-anchor\" href=\"https://github.com/Zefarak/blog-expense-app/blob/master/expenses/admin.py\" rel=\"noopener\" target=\"_blank\" data-href=\"https://github.com/Zefarak/blog-expense-app/blob/master/expenses/admin.py\"><strong class=\"markup--strong markup--p-strong\">here</strong></a><strong class=\"markup--strong markup--p-strong\">&nbsp;.</strong></p>\r\n<pre class=\"graf graf--pre\"><strong class=\"markup--strong markup--pre-strong\">from </strong>django.contrib <strong class=\"markup--strong markup--pre-strong\">import </strong>admin<br /><strong class=\"markup--strong markup--pre-strong\">from </strong>.models <strong class=\"markup--strong markup--pre-strong\">import </strong>*<br /><br /><br /><strong class=\"markup--strong markup--pre-strong\">def </strong>action_paid(modeladmin, request, queryset):<br />    <strong class=\"markup--strong markup--pre-strong\">for </strong>ele <strong class=\"markup--strong markup--pre-strong\">in </strong>queryset:<br />        ele.is_paid=<strong class=\"markup--strong markup--pre-strong\">True<br />        </strong>ele.save()<br />action_paid.short_description = <strong class=\"markup--strong markup--pre-strong\">'Multiple Paid'<br /><br /><br /></strong>@admin.register(PaymentMethod)<br /><strong class=\"markup--strong markup--pre-strong\">class </strong>PaymentMethodAdmin(admin.ModelAdmin):<br />    <strong class=\"markup--strong markup--pre-strong\">pass<br /><br /><br /></strong>@admin.register(BillCategory)<br /><strong class=\"markup--strong markup--pre-strong\">class </strong>BillCategoryAdmin(admin.ModelAdmin):<br />    list_display = [<strong class=\"markup--strong markup--pre-strong\">'title'</strong>, <strong class=\"markup--strong markup--pre-strong\">'tag_balance'</strong>]<br />    fields = [<strong class=\"markup--strong markup--pre-strong\">'title'</strong>, ]<br />    search_fields = [<strong class=\"markup--strong markup--pre-strong\">'title'</strong>, ]<br /><br /><br />@admin.register(Bill)<br /><strong class=\"markup--strong markup--pre-strong\">class </strong>BillAdmin(admin.ModelAdmin):<br />    save_as = <strong class=\"markup--strong markup--pre-strong\">True<br />    </strong>save_on_top = <strong class=\"markup--strong markup--pre-strong\">True<br />    </strong>list_display = [<strong class=\"markup--strong markup--pre-strong\">'date_expired'</strong>, <strong class=\"markup--strong markup--pre-strong\">'category'</strong>, <strong class=\"markup--strong markup--pre-strong\">'tag_final_value'</strong>,<strong class=\"markup--strong markup--pre-strong\">'payment_method'</strong>, <strong class=\"markup--strong markup--pre-strong\">'is_paid'</strong>]<br />    list_filter = [<strong class=\"markup--strong markup--pre-strong\">'category'</strong>, <strong class=\"markup--strong markup--pre-strong\">'is_paid'</strong>, <strong class=\"markup--strong markup--pre-strong\">'date_expired'</strong>, <strong class=\"markup--strong markup--pre-strong\">'payment_method'</strong>]<br />    search_fields = [<strong class=\"markup--strong markup--pre-strong\">'title'</strong>, <strong class=\"markup--strong markup--pre-strong\">'category__title'</strong>]<br />    readonly_fields = [<strong class=\"markup--strong markup--pre-strong\">'paid_value'</strong>]<br />    fields = [<strong class=\"markup--strong markup--pre-strong\">'category'</strong>, <strong class=\"markup--strong markup--pre-strong\">'payment_method'</strong>, <strong class=\"markup--strong markup--pre-strong\">'date_expired'</strong>, <strong class=\"markup--strong markup--pre-strong\">'is_paid'</strong>, <strong class=\"markup--strong markup--pre-strong\">'final_value'</strong>, <strong class=\"markup--strong markup--pre-strong\">'title'</strong>, <strong class=\"markup--strong markup--pre-strong\">'paid_value'</strong>]<br />    actions = [action_paid, ]<br /><br /><br />@admin.register(PayrollCategory)<br /><strong class=\"markup--strong markup--pre-strong\">class </strong>PayrollCategoryAdmin(admin.ModelAdmin):<br />    list_display = [<strong class=\"markup--strong markup--pre-strong\">'title'</strong>, <strong class=\"markup--strong markup--pre-strong\">'tag_balance'</strong>]<br />    fields = [<strong class=\"markup--strong markup--pre-strong\">'title'</strong>, ]<br />    search_fields = [<strong class=\"markup--strong markup--pre-strong\">'title'</strong>, ]<br /><br /><br />@admin.register(Person)<br /><strong class=\"markup--strong markup--pre-strong\">class </strong>PersonAdmin(admin.ModelAdmin):<br />    list_display = [<strong class=\"markup--strong markup--pre-strong\">'title'</strong>, <strong class=\"markup--strong markup--pre-strong\">'phone'</strong>, <strong class=\"markup--strong markup--pre-strong\">'tag_balance'</strong>]<br />    fields = [<strong class=\"markup--strong markup--pre-strong\">'title'</strong>, <strong class=\"markup--strong markup--pre-strong\">'phone'</strong>]<br />    search_fields = [<strong class=\"markup--strong markup--pre-strong\">'title'</strong>, <strong class=\"markup--strong markup--pre-strong\">'phone'</strong>]<br /><br /><br />@admin.register(Payroll)<br /><strong class=\"markup--strong markup--pre-strong\">class </strong>PayrollAdmin(admin.ModelAdmin):<br />    list_display = [<strong class=\"markup--strong markup--pre-strong\">'person'</strong>, <strong class=\"markup--strong markup--pre-strong\">'category'</strong>, <strong class=\"markup--strong markup--pre-strong\">'date_expired'</strong>, <strong class=\"markup--strong markup--pre-strong\">'tag_final_value'</strong>, <strong class=\"markup--strong markup--pre-strong\">'payment_method'</strong>, <strong class=\"markup--strong markup--pre-strong\">'is_paid'</strong>]<br />    list_filter = [<strong class=\"markup--strong markup--pre-strong\">'category'</strong>, <strong class=\"markup--strong markup--pre-strong\">'person'</strong>, <strong class=\"markup--strong markup--pre-strong\">'is_paid'</strong>, <strong class=\"markup--strong markup--pre-strong\">'date_expired'</strong>, <strong class=\"markup--strong markup--pre-strong\">'payment_method'</strong>]<br />    search_fields = [<strong class=\"markup--strong markup--pre-strong\">'title'</strong>, <strong class=\"markup--strong markup--pre-strong\">'person__title'</strong>, <strong class=\"markup--strong markup--pre-strong\">'category__title'</strong>]<br />    fields = [<strong class=\"markup--strong markup--pre-strong\">'person'</strong>, <strong class=\"markup--strong markup--pre-strong\">'category'</strong>, <strong class=\"markup--strong markup--pre-strong\">'date_expired'</strong>, <strong class=\"markup--strong markup--pre-strong\">'is_paid'</strong>, <strong class=\"markup--strong markup--pre-strong\">'final_value'</strong>, <strong class=\"markup--strong markup--pre-strong\">'title'</strong>, <strong class=\"markup--strong markup--pre-strong\">'payment_method'</strong>]<br />    actions = [action_paid, ]<br /><br /><br />@admin.register(GenericExpenseCategory)<br /><strong class=\"markup--strong markup--pre-strong\">class </strong>GenericExpenseCategoryCategoryAdmin(admin.ModelAdmin):<br />    list_display = [<strong class=\"markup--strong markup--pre-strong\">'title'</strong>, <strong class=\"markup--strong markup--pre-strong\">'tag_balance'</strong>]<br />    fields = [<strong class=\"markup--strong markup--pre-strong\">'title'</strong>, ]<br />    search_fields = [<strong class=\"markup--strong markup--pre-strong\">'title'</strong>, ]<br /><br /><br />@admin.register(GenericExpense)<br /><strong class=\"markup--strong markup--pre-strong\">class </strong>GenericExpenseAdmin(admin.ModelAdmin):<br />    list_display = [<strong class=\"markup--strong markup--pre-strong\">'category'</strong>, <strong class=\"markup--strong markup--pre-strong\">'date_expired'</strong>, <strong class=\"markup--strong markup--pre-strong\">'tag_final_value'</strong>, <strong class=\"markup--strong markup--pre-strong\">'is_paid'</strong>, <strong class=\"markup--strong markup--pre-strong\">'payment_method'</strong>]<br />    list_filter = [<strong class=\"markup--strong markup--pre-strong\">'category'</strong>, <strong class=\"markup--strong markup--pre-strong\">'is_paid'</strong>, <strong class=\"markup--strong markup--pre-strong\">'date_expired'</strong>, <strong class=\"markup--strong markup--pre-strong\">'payment_method'</strong>]<br />    search_fields = [<strong class=\"markup--strong markup--pre-strong\">'title'</strong>, <strong class=\"markup--strong markup--pre-strong\">'category__title'</strong>]<br />    fields = [<strong class=\"markup--strong markup--pre-strong\">'category'</strong>, <strong class=\"markup--strong markup--pre-strong\">'date_expired'</strong>, <strong class=\"markup--strong markup--pre-strong\">'is_paid'</strong>, <strong class=\"markup--strong markup--pre-strong\">'final_value'</strong>, <strong class=\"markup--strong markup--pre-strong\">'title'</strong>, <strong class=\"markup--strong markup--pre-strong\">'payment_method'</strong>]<br />    actions = [action_paid, ]</pre>\r\n<p class=\"graf graf--p\"><em class=\"markup--em markup--p-em\">Code analysis</em></p>\r\n<p class=\"graf graf--p\"><em class=\"markup--em markup--p-em\">First we created our first action. Whats is action look the mage below! This enable us on admin page to multi checkbox our instance and change the status is_paid with one click. When you check the instance its create a queryset and then the rest is easy! Mind you can update the queryset and not do the loop and save, but we want the instance to be saved so the custom code we added will work.</em></p>\r\n<p class=\"graf graf--p graf--empty\">&nbsp;</p>\r\n<img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/880/1*2I3NTtNxjIezI3Y8b9rGWg.png\" alt=\"\" data-image-id=\"1*2I3NTtNxjIezI3Y8b9rGWg.png\" data-width=\"611\" data-height=\"375\" />\r\n<pre class=\"graf graf--pre\"><strong class=\"markup--strong markup--pre-strong\">def </strong>action_paid(modeladmin, request, queryset):<br />    <strong class=\"markup--strong markup--pre-strong\">for </strong>ele <strong class=\"markup--strong markup--pre-strong\">in </strong>queryset:<br />        ele.is_paid=<strong class=\"markup--strong markup--pre-strong\">True<br />        </strong>ele.save()<br />action_paid.short_description = <strong class=\"markup--strong markup--pre-strong\">'Multiple Paid'</strong></pre>\r\n<p class=\"graf graf--p\">Next how to register and why! When we register a model on admin using this&nbsp;</p>\r\n<pre class=\"graf graf--pre\">@admin.register(PaymentMethod)</pre>\r\n<p class=\"graf graf--p\">or</p>\r\n<pre class=\"graf graf--pre\">admin.site.register(PaymentMethod)</pre>\r\n<p class=\"graf graf--p\">the model is show up with the default settings on our admin page.</p>\r\n<p class=\"graf graf--p\">So next move is to edit that page, lets get this for example</p>\r\n<img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/880/1*xjAUH9NBN5LXtx0tdU2wZg.png\" alt=\"\" data-image-id=\"1*xjAUH9NBN5LXtx0tdU2wZg.png\" data-width=\"1279\" data-height=\"437\" />\r\n<pre class=\"graf graf--pre\">@admin.register(Bill)<br /><strong class=\"markup--strong markup--pre-strong\">class </strong>BillAdmin(admin.ModelAdmin):<br />    save_as = <strong class=\"markup--strong markup--pre-strong\">True<br />    </strong>save_on_top = <strong class=\"markup--strong markup--pre-strong\">True<br />    </strong>list_display = [<strong class=\"markup--strong markup--pre-strong\">'date_expired'</strong>, <strong class=\"markup--strong markup--pre-strong\">'category'</strong>, <strong class=\"markup--strong markup--pre-strong\">'tag_final_value'</strong>,<strong class=\"markup--strong markup--pre-strong\">'payment_method'</strong>, <strong class=\"markup--strong markup--pre-strong\">'is_paid'</strong>]<br />    list_filter = [<strong class=\"markup--strong markup--pre-strong\">'category'</strong>, <strong class=\"markup--strong markup--pre-strong\">'is_paid'</strong>, <strong class=\"markup--strong markup--pre-strong\">'date_expired'</strong>, <strong class=\"markup--strong markup--pre-strong\">'payment_method'</strong>]<br />    search_fields = [<strong class=\"markup--strong markup--pre-strong\">'title'</strong>, <strong class=\"markup--strong markup--pre-strong\">'category__title'</strong>]<br />    readonly_fields = [<strong class=\"markup--strong markup--pre-strong\">'paid_value'</strong>]<br />    fields = [<strong class=\"markup--strong markup--pre-strong\">'category'</strong>, <strong class=\"markup--strong markup--pre-strong\">'payment_method'</strong>, <strong class=\"markup--strong markup--pre-strong\">'date_expired'</strong>, <strong class=\"markup--strong markup--pre-strong\">'is_paid'</strong>, <strong class=\"markup--strong markup--pre-strong\">'final_value'</strong>, <strong class=\"markup--strong markup--pre-strong\">'title'</strong>, <strong class=\"markup--strong markup--pre-strong\">'paid_value'</strong>]<br />    actions = [action_paid, ]</pre>\r\n<p class=\"graf graf--p\"><em class=\"markup--em markup--p-em\">The save_as will allow us to create the same instance with different id, the copy paste method. On list_display we define what fields or function will be show on main table, list_filter defines our filters, preferably use here all the ForeignKey models you want, and when we use the search_fields we create a search bar and we define where to search and final on actions we register which action we want to use. The fields or fieldsets which will not use, we define the fields on specific instance for editing, and the read_only we specific the values we want to show but not to edit!</em></p>\r\n<p class=\"graf graf--p\">Thats its, django can create and handle easy admin pages like that. There is many options will not cover like inlines or custom form for admin page, but we will not use at all django forms on this app. Now the first test.</p>\r\n<p class=\"graf graf--p\">And now our manager.py</p>\r\n<p class=\"graf graf--p\"><em class=\"markup--em markup--p-em\">First let&rsquo;s create the shema on our database. We will do that with two simply commands makemigration and migrate. The first read all our models on registered apps and create the migrations. The second command applies that migrations to database.</em></p>\r\n<pre class=\"graf graf--pre\">$ python manage.py makemigrations<br />$ python manage.py migrate</pre>\r\n<p class=\"graf graf--p\"><em class=\"markup--em markup--p-em\">After that lets create a superuser, use any username and password you want.</em></p>\r\n<pre class=\"graf graf--pre\">$ python manage.py createsuperuser</pre>\r\n<p class=\"graf graf--p\"><em class=\"markup--em markup--p-em\">Now let&rsquo;s start our development server with the command below and then open a broswer and go to </em><a class=\"markup--anchor markup--p-anchor\" href=\"http://127.0.0.1:8000/admin/\" rel=\"nofollow noopener\" target=\"_blank\" data-href=\"http://127.0.0.1:8000/admin/\">http://127.0.0.1:8000/admin/</a><em class=\"markup--em markup--p-em\"> and explore a little our admin dashboard.</em></p>\r\n<pre class=\"graf graf--pre\">$ python manage.py runserver</pre>\r\n<p class=\"graf graf--p graf--empty\">&nbsp;</p>\r\n<p class=\"graf graf--p\"><em class=\"markup--em markup--p-em\">Now to front-end!</em></p>\r\n<p class=\"graf graf--p graf--empty\">&nbsp;</p>\r\n</div>\r\n</div>\r\n<div class=\"section-divider\"><hr class=\"section-divider\" /></div>\r\n<div class=\"section-content\">\r\n<div class=\"section-inner sectionLayout--insetColumn\">\r\n<p class=\"graf graf--p graf--empty\">&nbsp;</p>\r\n<p class=\"graf graf--p\"><strong class=\"markup--strong markup--p-strong\">Front -end!</strong></p>\r\n<p class=\"graf graf--p\">On this part we will create our urls, templates, and views. First on views.py in our app, we will create functions and classes that will control all the front-end. We will add the templates for every view, and in urls.py we bound the views with the path we want on the broswer.</p>\r\n<p class=\"graf graf--p\">But before that we need to do some changes on settings.py so django knows where will find the templates.</p>\r\n<pre class=\"graf graf--pre\"><strong class=\"markup--strong markup--pre-strong\">'DIRS'</strong>: [os.path.join(BASE_DIR, <strong class=\"markup--strong markup--pre-strong\">'templates'</strong>),],</pre>\r\n<p class=\"graf graf--p\">Ok full code&hellip; or <a class=\"markup--anchor markup--p-anchor\" href=\"https://github.com/Zefarak/blog-expense-app/blob/master/my_expenses/settings.py\" rel=\"noopener\" target=\"_blank\" data-href=\"https://github.com/Zefarak/blog-expense-app/blob/master/my_expenses/settings.py\">github</a>.</p>\r\n<pre class=\"graf graf--pre\">TEMPLATES = [<br />    {<br />        <strong class=\"markup--strong markup--pre-strong\">'BACKEND'</strong>: <strong class=\"markup--strong markup--pre-strong\">'django.template.backends.django.DjangoTemplates'</strong>,<br />        <strong class=\"markup--strong markup--pre-strong\">'DIRS'</strong>: [os.path.join(BASE_DIR, <strong class=\"markup--strong markup--pre-strong\">'templates'</strong>),],<br />        <strong class=\"markup--strong markup--pre-strong\">'APP_DIRS'</strong>: <strong class=\"markup--strong markup--pre-strong\">True</strong>,<br />        <strong class=\"markup--strong markup--pre-strong\">'OPTIONS'</strong>: {<br />            <strong class=\"markup--strong markup--pre-strong\">'context_processors'</strong>: [<br />                <strong class=\"markup--strong markup--pre-strong\">'django.template.context_processors.debug'</strong>,<br />                <strong class=\"markup--strong markup--pre-strong\">'django.template.context_processors.request'</strong>,<br />                <strong class=\"markup--strong markup--pre-strong\">'django.contrib.auth.context_processors.auth'</strong>,<br />                <strong class=\"markup--strong markup--pre-strong\">'django.contrib.messages.context_processors.messages'</strong>,<br />            ],<br />        },<br />    },<br />]</pre>\r\n<p class=\"graf graf--p\">Then on same folder on urls.py we replace the code with <a class=\"markup--anchor markup--p-anchor\" href=\"https://github.com/Zefarak/blog-expense-app/blob/master/my_expenses/urls.py\" rel=\"noopener\" target=\"_blank\" data-href=\"https://github.com/Zefarak/blog-expense-app/blob/master/my_expenses/urls.py\">this</a>. Its our urls, but before anything work we need to add our views first. No much explain here, with django 2.0 we have access to path which does easier our job and the&nbsp;</p>\r\n<pre class=\"graf graf--pre\">name=<strong class=\"markup--strong markup--pre-strong\">'bills_view'</strong>),</pre>\r\n<p class=\"graf graf--p\">is for dynamic use call on the template when we need this url.</p>\r\n<pre class=\"graf graf--pre\"><strong class=\"markup--strong markup--pre-strong\">from </strong>django.contrib <strong class=\"markup--strong markup--pre-strong\">import </strong>admin<br /><strong class=\"markup--strong markup--pre-strong\">from </strong>django.urls <strong class=\"markup--strong markup--pre-strong\">import </strong>path<br /><strong class=\"markup--strong markup--pre-strong\">from </strong>expenses.views <strong class=\"markup--strong markup--pre-strong\">import </strong>(HomepageView, BillListView,<br />                            PayrollListView, ExpensesListView, <br />                            report_view<br />                            )<br /><br />urlpatterns = [<br />    path(<strong class=\"markup--strong markup--pre-strong\">'admin/'</strong>, admin.site.urls),<br />    path(<strong class=\"markup--strong markup--pre-strong\">''</strong>, HomepageView.as_view(), name=<strong class=\"markup--strong markup--pre-strong\">'homepage'</strong>),<br /><br />    path(<strong class=\"markup--strong markup--pre-strong\">'bills/'</strong>, BillListView.as_view(), name=<strong class=\"markup--strong markup--pre-strong\">'bills_view'</strong>),<br />    path(<strong class=\"markup--strong markup--pre-strong\">'payroll/'</strong>, PayrollListView.as_view(), name=<strong class=\"markup--strong markup--pre-strong\">'payroll_view'</strong>),<br />    path(<strong class=\"markup--strong markup--pre-strong\">'expenses/'</strong>, ExpensesListView.as_view(), name=<strong class=\"markup--strong markup--pre-strong\">'expenses_view'</strong>),<br />    path(<strong class=\"markup--strong markup--pre-strong\">'reports/'</strong>, report_view, name=<strong class=\"markup--strong markup--pre-strong\">'reports_view'</strong>)<br /><br />]</pre>\r\n<p class=\"graf graf--p\">Now lets handle the views.py!</p>\r\n<p class=\"graf graf--p\">We assume here that the templates are ready on template folder in our app. If not then go <a class=\"markup--anchor markup--p-anchor\" href=\"https://github.com/Zefarak/blog-expense-app/tree/master/expenses\" rel=\"noopener\" target=\"_blank\" data-href=\"https://github.com/Zefarak/blog-expense-app/tree/master/expenses\"><strong class=\"markup--strong markup--p-strong\">here</strong></a> and grab the template folder and add it on same place. So after the initial imports we will create our first view for the homepage.</p>\r\n<pre class=\"graf graf--pre\"><strong class=\"markup--strong markup--pre-strong\">from </strong>django.shortcuts <strong class=\"markup--strong markup--pre-strong\">import </strong>render, get_list_or_404<br /><strong class=\"markup--strong markup--pre-strong\">from </strong>django.views.generic <strong class=\"markup--strong markup--pre-strong\">import </strong>TemplateView, ListView<br /><strong class=\"markup--strong markup--pre-strong\">from </strong>django.conf <strong class=\"markup--strong markup--pre-strong\">import </strong>settings<br /><br /><strong class=\"markup--strong markup--pre-strong\">from </strong>.models <strong class=\"markup--strong markup--pre-strong\">import </strong>*<br /><br /><strong class=\"markup--strong markup--pre-strong\">from </strong>itertools <strong class=\"markup--strong markup--pre-strong\">import </strong>chain<br /><strong class=\"markup--strong markup--pre-strong\">from </strong>dateutil.relativedelta <strong class=\"markup--strong markup--pre-strong\">import </strong>relativedelta<br /><strong class=\"markup--strong markup--pre-strong\">import </strong>datetime<br />CURRENCY = settings.CURRENCY<br /><br /><br /><strong class=\"markup--strong markup--pre-strong\">class </strong>HomepageView(TemplateView):<br />    template_name = <strong class=\"markup--strong markup--pre-strong\">'index.html'<br /><br />    def </strong>get_context_data(self, **kwargs):<br />        context = super(HomepageView, self).get_context_data(**kwargs)<br />        bills = Bill.my_query.get_queryset().unpaid()[:10]<br />        payrolls = Payroll.my_query.get_queryset().unpaid()[:10]<br />        expenses = GenericExpense.my_query.get_queryset().unpaid()[:10]<br />        context.update({<strong class=\"markup--strong markup--pre-strong\">'bills'</strong>: bills,<br />                        <strong class=\"markup--strong markup--pre-strong\">'payroll'</strong>: payrolls,<br />                        <strong class=\"markup--strong markup--pre-strong\">'expenses'</strong>: expenses<br />                        })<br />        <strong class=\"markup--strong markup--pre-strong\">return </strong>context</pre>\r\n<blockquote class=\"graf graf--blockquote\">We will use most ClassViews and not functions for our views. If the view you want to create is simply is better to use class, maybe you eill need more time to create it but is more readable if you want to change something later. And we used our custom manager as you can see too.</blockquote>\r\n<p class=\"graf graf--p\">Now lets add more views on views.py. Grab the code from here <a class=\"markup--anchor markup--p-anchor\" href=\"https://github.com/Zefarak/blog-expense-app/blob/master/expenses/views.py\" rel=\"noopener\" target=\"_blank\" data-href=\"https://github.com/Zefarak/blog-expense-app/blob/master/expenses/views.py\">Github</a> too.</p>\r\n<pre class=\"graf graf--pre\"><strong class=\"markup--strong markup--pre-strong\">class </strong>BillListView(ListView):<br />    model = Bill<br />    template_name = <strong class=\"markup--strong markup--pre-strong\">'page_list.html'<br />    </strong>paginate_by = 100<br /><br />    <strong class=\"markup--strong markup--pre-strong\">def </strong>get_queryset(self):<br />        queryset = Bill.objects.all()<br />        queryset = Bill.filters_data(self.request, queryset)<br />        <strong class=\"markup--strong markup--pre-strong\">return </strong>queryset<br /><br />    <strong class=\"markup--strong markup--pre-strong\">def </strong>get_context_data(self, **kwargs):<br />        context = super(BillListView, self).get_context_data(**kwargs)<br />        page_title = <strong class=\"markup--strong markup--pre-strong\">'Bills List'<br />        </strong>categories = BillCategory.objects.all()<br />        search_name, cate_name, paid_name = [self.request.GET.get(<strong class=\"markup--strong markup--pre-strong\">'search_name'</strong>, <strong class=\"markup--strong markup--pre-strong\">None</strong>),<br />                                             self.request.GET.getlist(<strong class=\"markup--strong markup--pre-strong\">'cate_name'</strong>, <strong class=\"markup--strong markup--pre-strong\">None</strong>),<br />                                             self.request.GET.getlist(<strong class=\"markup--strong markup--pre-strong\">'paid_name'</strong>)<br />                                             ]<br />        total_value, paid_value, diff, category_analysis = Bill.analysis(self.object_list)<br />        currency = CURRENCY<br />        context.update(locals())<br />        <strong class=\"markup--strong markup--pre-strong\">return </strong>context<br /><br /><br /><strong class=\"markup--strong markup--pre-strong\">class </strong>PayrollListView(ListView):<br />    model = Payroll<br />    template_name = <strong class=\"markup--strong markup--pre-strong\">'page_list.html'<br />    </strong>paginate_by = 100<br /><br />    <strong class=\"markup--strong markup--pre-strong\">def </strong>get_queryset(self):<br />        queryset = Payroll.objects.all()<br />        queryset = Payroll.filters_data(self.request, queryset)<br />        <strong class=\"markup--strong markup--pre-strong\">return </strong>queryset<br /><br />    <strong class=\"markup--strong markup--pre-strong\">def </strong>get_context_data(self, **kwargs):<br />        context = super(PayrollListView, self).get_context_data(**kwargs)<br />        page_title = <strong class=\"markup--strong markup--pre-strong\">'Payroll List'<br />        </strong>categories = PayrollCategory.objects.all()<br />        persons = Person.objects.all()<br />        search_name, cate_name, paid_name, person_name = [self.request.GET.get(<strong class=\"markup--strong markup--pre-strong\">'search_name'</strong>, <strong class=\"markup--strong markup--pre-strong\">None</strong>),<br />                                                          self.request.GET.getlist(<strong class=\"markup--strong markup--pre-strong\">'cate_name'</strong>, <strong class=\"markup--strong markup--pre-strong\">None</strong>),<br />                                                          self.request.GET.getlist(<strong class=\"markup--strong markup--pre-strong\">'paid_name'</strong>, <strong class=\"markup--strong markup--pre-strong\">None</strong>),<br />                                                          self.request.GET.getlist(<strong class=\"markup--strong markup--pre-strong\">'person_name'</strong>, <strong class=\"markup--strong markup--pre-strong\">None</strong>)<br />                                                          ]<br />        total_value, paid_value, diff, category_analysis = Payroll.analysis(self.object_list)<br />        currency = CURRENCY<br />        context.update(locals())<br />        <strong class=\"markup--strong markup--pre-strong\">return </strong>context<br /><br /><br /><strong class=\"markup--strong markup--pre-strong\">class </strong>ExpensesListView(ListView):<br />    model = GenericExpense<br />    template_name = <strong class=\"markup--strong markup--pre-strong\">'page_list.html'<br />    </strong>paginate_by = 100<br /><br />    <strong class=\"markup--strong markup--pre-strong\">def </strong>get_queryset(self):<br />        queryset = GenericExpense.objects.all()<br />        queryset = GenericExpense.filters_data(self.request, queryset)<br />        <strong class=\"markup--strong markup--pre-strong\">return </strong>queryset<br /><br />    <strong class=\"markup--strong markup--pre-strong\">def </strong>get_context_data(self, **kwargs):<br />        context = super(ExpensesListView, self).get_context_data(**kwargs)<br />        page_title = <strong class=\"markup--strong markup--pre-strong\">'Expenses List'<br />        </strong>categories = GenericExpenseCategory.objects.all()<br />        search_name, cate_name, paid_name = [self.request.GET.get(<strong class=\"markup--strong markup--pre-strong\">'search_name'</strong>, <strong class=\"markup--strong markup--pre-strong\">None</strong>),<br />                                             self.request.GET.getlist(<strong class=\"markup--strong markup--pre-strong\">'cate_name'</strong>, <strong class=\"markup--strong markup--pre-strong\">None</strong>),<br />                                             self.request.GET.getlist(<strong class=\"markup--strong markup--pre-strong\">'paid_name'</strong>)<br />                                             ]<br />        total_value, paid_value, diff, category_analysis = GenericExpense.analysis(self.object_list)<br />        currency = CURRENCY<br />        context.update(locals())<br />        <strong class=\"markup--strong markup--pre-strong\">return </strong>context</pre>\r\n<p class=\"graf graf--p\">Here will only explain one view cause they are similar.</p>\r\n<pre class=\"graf graf--pre\"><strong class=\"markup--strong markup--pre-strong\">def </strong>get_queryset(self):<br />    queryset = Bill.objects.all()<br />    queryset = Bill.filters_data(self.request, queryset)<br />    <strong class=\"markup--strong markup--pre-strong\">return </strong>queryset</pre>\r\n<blockquote class=\"graf graf--blockquote\">How works? When we created our models we added a function called filters_data. The logic is simple, get all the request parameters and query from view, then look if there is request.GET we want and if there is, filter the query with the data the user provided. Its better to store that type of code on models so it&rsquo;s reusable and makes our views thinner.</blockquote>\r\n<blockquote class=\"graf graf--blockquote\">Here we get again the request.GET data, we will use it later on template to populate the values on forms..</blockquote>\r\n<pre class=\"graf graf--pre\">search_name,cate_name,paid_name=[<br />self.request.GET.get(<strong class=\"markup--strong markup--pre-strong\">'search_name'</strong>,<strong class=\"markup--strong markup--pre-strong\">None</strong>),<br />                                   self.request.GET.getlist(<strong class=\"markup--strong markup--pre-strong\">'cate_name'</strong>, <strong class=\"markup--strong markup--pre-strong\">None</strong>),<br />                                     self.request.GET.getlist(<strong class=\"markup--strong markup--pre-strong\">'paid_name'</strong>, <strong class=\"markup--strong markup--pre-strong\">None</strong>)<br />                                     ]</pre>\r\n<p class=\"graf graf--p\">And after</p>\r\n<pre class=\"graf graf--pre\">total_value, paid_value, diff, category_analysis = Bill.analysis(self.object_list)</pre>\r\n<p class=\"graf graf--p\">And that line lead us on the&nbsp;</p>\r\n<pre class=\"graf graf--pre\">@staticmethod<br /><strong class=\"markup--strong markup--pre-strong\">def </strong>analysis(queryset):<br />    total_value = queryset.aggregate(Sum(<strong class=\"markup--strong markup--pre-strong\">'final_value'</strong>))[<strong class=\"markup--strong markup--pre-strong\">'final_value__sum'</strong>] <strong class=\"markup--strong markup--pre-strong\">if </strong>queryset <strong class=\"markup--strong markup--pre-strong\">else </strong>0<br />    paid_value = queryset.filter(is_paid=<strong class=\"markup--strong markup--pre-strong\">False</strong>).aggregate(Sum(<strong class=\"markup--strong markup--pre-strong\">'final_value'</strong>))[<strong class=\"markup--strong markup--pre-strong\">'final_value__sum'</strong>]\\<br />        <strong class=\"markup--strong markup--pre-strong\">if </strong>queryset.filter(is_paid=<strong class=\"markup--strong markup--pre-strong\">False</strong>) <strong class=\"markup--strong markup--pre-strong\">else </strong>0<br />    diff = total_value - paid_value<br />    category_analysis = queryset.values(<strong class=\"markup--strong markup--pre-strong\">'category__title'</strong>).annotate(total_value=Sum(<strong class=\"markup--strong markup--pre-strong\">'final_value'</strong>),<br />                                                                   remaining=Sum(F(<strong class=\"markup--strong markup--pre-strong\">'final_value'</strong>)-F(<strong class=\"markup--strong markup--pre-strong\">'paid_value'</strong>))<br />                                                                   ).order_by(<strong class=\"markup--strong markup--pre-strong\">'remaining'</strong>)<br />    <strong class=\"markup--strong markup--pre-strong\">return </strong>[total_value, paid_value, diff, category_analysis]</pre>\r\n<blockquote class=\"graf graf--blockquote\">Here we do this, we get the filtered queryset from before and we calculate the values we want. The aggregate and annotate methods comes from django ORM and SQL. <a class=\"markup--anchor markup--blockquote-anchor\" href=\"https://docs.djangoproject.com/en/2.1/topics/db/\" rel=\"noopener\" target=\"_blank\" data-href=\"https://docs.djangoproject.com/en/2.1/topics/db/\">Django ORM </a>connects our app with the database, and comes with some tools. When we using for example the aggregate, we tell to our app to do the maths on database level which is always faster than python. With the @staticmethod, we tell to our class we want to use this function which is related to the class but not to the specific object, so using it we get rid from the self.</blockquote>\r\n<p class=\"graf graf--p\">And finally the last and bigger and more complicated view.</p>\r\n<pre class=\"graf graf--pre\"><strong class=\"markup--strong markup--pre-strong\">def </strong>report_view(request):<br />    startDate = request.GET.get(<strong class=\"markup--strong markup--pre-strong\">'startDate'</strong>, <strong class=\"markup--strong markup--pre-strong\">'2018-01-01'</strong>)<br />    endDate = request.GET.get(<strong class=\"markup--strong markup--pre-strong\">'endDate'</strong>, <strong class=\"markup--strong markup--pre-strong\">'2018-12-31'</strong>)<br />    <strong class=\"markup--strong markup--pre-strong\">if </strong>startDate &gt; endDate:<br />        startDate , endDate = <strong class=\"markup--strong markup--pre-strong\">'2018-01-01'</strong>, <strong class=\"markup--strong markup--pre-strong\">'2018-12-31'<br />    </strong>date_start = datetime.datetime.strptime(startDate, <strong class=\"markup--strong markup--pre-strong\">'%Y-%m-%d'</strong>).date()<br />    date_end = datetime.datetime.strptime(endDate, <strong class=\"markup--strong markup--pre-strong\">'%Y-%m-%d'</strong>).date()<br />    bills = Bill.my_query.get_queryset().filter_by_date(date_start, date_end)<br />    payrolls = Payroll.my_query.get_queryset().filter_by_date(date_start, date_end)<br />    expenses = GenericExpense.my_query.get_queryset().filter_by_date(date_start, date_end)<br />    queryset = sorted(chain(bills, payrolls, expenses),<br />                    key=<strong class=\"markup--strong markup--pre-strong\">lambda </strong>instance: instance.date_expired<br />                    )<br />    bill_total_value, bill_paid_value, bill_diff, bill_category_analysis = DefaultExpenseModel.analysis(bills)<br />    payroll_total_value, payroll_paid_value, payroll_diff, bill_category_analysis = DefaultExpenseModel.analysis(payrolls)<br />    expense_total_value, expense_paid_value, expense_diff, expense_category_analysis = DefaultExpenseModel.analysis(expenses)<br /><br />    bill_by_month, payroll_by_month, expenses_by_month, totals_by_month =[], [], [] ,[]<br />    months_list = []<br />    <strong class=\"markup--strong markup--pre-strong\">while </strong>date_start &lt; date_end:<br />        months_list.append(date_start)<br />        date_start += relativedelta(months=1)<br /><br />    <strong class=\"markup--strong markup--pre-strong\">for </strong>date <strong class=\"markup--strong markup--pre-strong\">in </strong>months_list:<br />        start = date.replace(day=1)<br />        end = date.replace(day=28)<br />        this_month_bill_queryset = bills.filter(date_expired__range=[start, end])<br />        this_month_bills = DefaultExpenseModel.analysis(this_month_bill_queryset)<br />        this_month_payroll_queryset = payrolls.filter(date_expired__range=[start, end])<br />        this_month_payroll = DefaultExpenseModel.analysis(this_month_payroll_queryset)<br />        this_month_expense_queryset = expenses.filter(date_expired__range=[start, end])<br />        this_month_expense = DefaultExpenseModel.analysis(this_month_expense_queryset)<br />        bill_by_month.append(this_month_bills)<br />        payroll_by_month.append(this_month_expense)<br />        expenses_by_month.append(this_month_payroll)<br />        totals_by_month.append([this_month_bills[0]+this_month_expense[0]+ this_month_payroll[0],<br />                                this_month_bills[1] + this_month_expense[1] + this_month_payroll[1],<br />                                this_month_bills[2] + this_month_expense[2] + this_month_payroll[2]<br />                                ])<br /><br />    totals = [payroll_total_value + bill_total_value + expense_total_value,<br />              bill_paid_value + payroll_paid_value + expense_paid_value,<br />              bill_diff + payroll_diff + expense_diff<br />              ]<br />    currency = CURRENCY<br />    context = locals()<br />    <strong class=\"markup--strong markup--pre-strong\">return </strong>render(request, <strong class=\"markup--strong markup--pre-strong\">'report.html'</strong>, context=context)</pre>\r\n<p class=\"graf graf--p\">So many things here&hellip;. Ok lets start from the begin&hellip;.&nbsp;</p>\r\n<pre class=\"graf graf--pre\">startDate = request.GET.get(<strong class=\"markup--strong markup--pre-strong\">'startDate'</strong>, <strong class=\"markup--strong markup--pre-strong\">'2018-01-01'</strong>)<br />endDate = request.GET.get(<strong class=\"markup--strong markup--pre-strong\">'endDate'</strong>, <strong class=\"markup--strong markup--pre-strong\">'2018-12-31'</strong>)<br /><strong class=\"markup--strong markup--pre-strong\">if </strong>startDate &gt; endDate:<br />    startDate , endDate = <strong class=\"markup--strong markup--pre-strong\">'2018-01-01'</strong>, <strong class=\"markup--strong markup--pre-strong\">'2018-12-31'<br /></strong>date_start = datetime.datetime.strptime(startDate, <strong class=\"markup--strong markup--pre-strong\">'%Y-%m-%d'</strong>).date()<br />date_end = datetime.datetime.strptime(endDate, <strong class=\"markup--strong markup--pre-strong\">'%Y-%m-%d'</strong>).date()</pre>\r\n<blockquote class=\"graf graf--blockquote\">First we get the user data from the form. If the user filtered the date fields we get the date range he wants else we have a initial date range. Second we check if endDate is bigger than startDate so the app don&rsquo;t crash when we filter it,(this is better to do it with javascript in front-end too but we learn python here! And we should to check if both values is date. Forgot to added it hehe.) and if anything all right we convert it on a format our models can understand.</blockquote>\r\n<pre class=\"graf graf--pre\">bills = Bill.my_query.get_queryset().filter_by_date(date_start, date_end)<br />payrolls = Payroll.my_query.get_queryset().filter_by_date(date_start, date_end)<br />expenses = GenericExpense.my_query.get_queryset().filter_by_date(date_start, date_end)<br />queryset = sorted(chain(bills, payrolls, expenses),<br />                key=<strong class=\"markup--strong markup--pre-strong\">lambda </strong>instance: instance.date_expired<br />                )</pre>\r\n<blockquote class=\"graf graf--blockquote\">We filter our models and then we do the trick! We use the chain function python provide us and then we connect all three queries and create a new query. After that we say to be sorted on date_expired.</blockquote>\r\n<p class=\"graf graf--p\">Next lines are easy and then we add some brutal coding for our chart population.</p>\r\n<pre class=\"graf graf--pre\">bill_by_month, payroll_by_month, expenses_by_month, totals_by_month = [], [], [] ,[]<br />months_list = []<br /><strong class=\"markup--strong markup--pre-strong\">while </strong>date_start &lt; date_end:<br />    months_list.append(date_start)<br />    date_start += relativedelta(months=1)</pre>\r\n<p class=\"graf graf--p\">Here first we create our lists to store our results and the months, after that we do a loop to calculate the months.&nbsp;</p>\r\n<pre class=\"graf graf--pre\"><strong class=\"markup--strong markup--pre-strong\">for </strong>date <strong class=\"markup--strong markup--pre-strong\">in </strong>months_list:<br />    start = date.replace(day=1)<br />    next_month = date.replace(day=28) + datetime.timedelta(days=4)<br />    end = next_month - datetime.timedelta(days=next_month.days)<br />    this_month_bill_queryset = bills.filter(date_expired__range=[start, end])<br />    this_month_bills = DefaultExpenseModel.analysis(this_month_bill_queryset)<br />    this_month_payroll_queryset = payrolls.filter(date_expired__range=[start, end])<br />    this_month_payroll = DefaultExpenseModel.analysis(this_month_payroll_queryset)<br />    this_month_expense_queryset = expenses.filter(date_expired__range=[start, end])<br />    this_month_expense = DefaultExpenseModel.analysis(this_month_expense_queryset)<br />    bill_by_month.append(this_month_bills)<br />    payroll_by_month.append(this_month_expense)<br />    expenses_by_month.append(this_month_payroll)<br />    totals_by_month.append([this_month_bills[0]+this_month_expense[0]+ this_month_payroll[0],<br />                            this_month_bills[1] + this_month_expense[1] + this_month_payroll[1],<br />                            this_month_bills[2] + this_month_expense[2] + this_month_payroll[2]<br />                            ])<br /><br />totals = [payroll_total_value + bill_total_value + expense_total_value,<br />          bill_paid_value + payroll_paid_value + expense_paid_value,<br />          bill_diff + payroll_diff + expense_diff<br />          ]</pre>\r\n<p class=\"graf graf--p\">The object start is easy we just replace the day with one, the last day is tricky tho, because here can be 28, 30 or 31. Thats why we wrote this</p>\r\n<pre class=\"graf graf--pre\">next_month = date.replace(day=28) + datetime.timedelta(days=4)<br />end = next_month - datetime.timedelta(days=next_month.days)</pre>\r\n<p class=\"graf graf--p\">After that is the same, we do our queryset analysis which we created before, we add the data to our lists and the app is ready.</p>\r\n<p class=\"graf graf--p\">On this point you can try again to open a server and test it.</p>\r\n</div>\r\n</div>\r\n<div class=\"section-divider\"><hr class=\"section-divider\" /></div>\r\n<div class=\"section-content\">\r\n<div class=\"section-inner sectionLayout--insetColumn\">\r\n<p class=\"graf graf--p\"><strong class=\"markup--strong markup--p-strong\">Templates</strong></p>\r\n<p class=\"graf graf--p\">The last part now the templates, if you don&rsquo;t allready did it, create a folder inside the expenses app called templates and then create our first file index.html. We will not use our own static or collect static, we will user the cdn for bootstrap and chart.js and jquery. The code for the template is or <a class=\"markup--anchor markup--p-anchor\" href=\"https://github.com/Zefarak/blog-expense-app/blob/master/expenses/templates/index.html\" rel=\"noopener\" target=\"_blank\" data-href=\"https://github.com/Zefarak/blog-expense-app/blob/master/expenses/templates/index.html\">github</a>&nbsp;.</p>\r\n<pre class=\"graf graf--pre\">&lt;!doctype html&gt;<br />&lt;html lang=\"en\"&gt;<br />&lt;head&gt;<br />    &lt;!-- Required meta tags --&gt;<br />    &lt;meta charset=\"utf-8\"&gt;<br />    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"&gt;</pre>\r\n<pre class=\"graf graf--pre\">&lt;!-- Bootstrap CSS --&gt;<br />    &lt;link rel=\"stylesheet\" href=\"<a class=\"markup--anchor markup--pre-anchor\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\" rel=\"nofollow noopener\" target=\"_blank\" data-href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\">https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css</a>\" integrity=\"sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO\" crossorigin=\"anonymous\"&gt;<br />    &lt;title&gt;Demo Expense Django App&lt;/title&gt;<br />&lt;/head&gt;<br />&lt;body&gt;<br />{% include 'navbar.html' %}<br />&lt;br&gt;</pre>\r\n<pre class=\"graf graf--pre\">&lt;div class=\"container-fluid\"&gt;<br />    {% block container %}<br />        &lt;div class=\"row\"&gt;<br />            &lt;h4&gt;No Paid Invoices&lt;/h4&gt;<br />        &lt;/div&gt;<br />        &lt;div class=\"row\"&gt;<br />            &lt;div class=\"col\"&gt;<br />                &lt;h4&gt;Bills&lt;/h4&gt;<br />                &lt;table class=\"table table-striped\"&gt;<br />                    &lt;thead&gt;<br />                    &lt;tr&gt;<br />                        &lt;th scope=\"col\"&gt;#&lt;/th&gt;<br />                        &lt;th scope=\"col\"&gt;Date&lt;/th&gt;<br />                        &lt;th scope=\"col\"&gt;Bill&lt;/th&gt;<br />                        &lt;th scope=\"col\"&gt;Value&lt;/th&gt;<br />                    &lt;/tr&gt;<br />                  &lt;/thead&gt;<br />                  &lt;tbody&gt;<br />                  {% for bill in bills %}<br />                      &lt;tr&gt;<br />                          &lt;th scope=\"row\"&gt;1&lt;/th&gt;<br />                          &lt;td&gt;{{ bill.date_expired|date }}&lt;/td&gt;<br />                          &lt;td&gt;{{ bill.category }}&lt;/td&gt;<br />                          &lt;td&gt;{{ bill.tag_final_value }}&lt;/td&gt;<br />                      &lt;/tr&gt;<br />                  {% empty %}<br />                      &lt;tr&gt;<br />                          &lt;td colspan=\"4\"&gt;No data&lt;/td&gt;<br />                      &lt;/tr&gt;<br />                    {% endfor %}<br />                  &lt;/tbody&gt;<br />                &lt;/table&gt;<br />                &lt;a href=\"/admin/expenses/bill/\" class=\"btn btn-primary\"&gt;Edit&lt;/a&gt;<br />            &lt;/div&gt;<br />            &lt;div class=\"col\"&gt;<br />                &lt;h4&gt;Payroll&lt;/h4&gt;<br />                &lt;table class=\"table table-striped\"&gt;<br />                    &lt;thead&gt;<br />                        &lt;tr&gt;<br />                            &lt;th scope=\"col\"&gt;#&lt;/th&gt;<br />                            &lt;th scope=\"col\"&gt;Date&lt;/th&gt;<br />                            &lt;th scope=\"col\"&gt;Person - Category&lt;/th&gt;<br />                            &lt;th scope=\"col\"&gt;Value&lt;/th&gt;<br />                        &lt;/tr&gt;<br />                    &lt;/thead&gt;<br />                    &lt;tbody&gt;<br />                    {% for bill in payroll %}<br />                        &lt;tr&gt;<br />                            &lt;th scope=\"row\"&gt;1&lt;/th&gt;<br />                            &lt;td&gt;{{ bill.date_expired|date }}&lt;/td&gt;<br />                            &lt;td&gt;{{ bill.tag_category }}&lt;/td&gt;<br />                            &lt;td&gt;{{ bill.tag_final_value }}&lt;/td&gt;<br />                        &lt;/tr&gt;<br />                    {% empty %}<br />                        &lt;tr&gt;<br />                            &lt;td colspan=\"4\"&gt;No data&lt;/td&gt;<br />                        &lt;/tr&gt;<br />                    {% endfor %}<br />                    &lt;/tbody&gt;<br />                &lt;/table&gt;<br />                &lt;a href=\"/admin/expenses/payroll/\" class=\"btn btn-primary\"&gt;Edit&lt;/a&gt;<br />            &lt;/div&gt;<br />            &lt;div class=\"col\"&gt;<br />                &lt;h4&gt;Expense&lt;/h4&gt;<br />                &lt;table class=\"table table-striped\"&gt;<br />                    &lt;thead&gt;<br />                        &lt;tr&gt;<br />                            &lt;th scope=\"col\"&gt;#&lt;/th&gt;<br />                            &lt;th scope=\"col\"&gt;Date&lt;/th&gt;<br />                            &lt;th scope=\"col\"&gt;Category&lt;/th&gt;<br />                            &lt;th scope=\"col\"&gt;Value&lt;/th&gt;<br />                        &lt;/tr&gt;<br />                    &lt;/thead&gt;<br />                    &lt;tbody&gt;<br />                    {% for expense in expenses %}<br />                        &lt;tr&gt;<br />                            &lt;th scope=\"row\"&gt;1&lt;/th&gt;<br />                            &lt;td&gt;{{ expense.date_expired|date }}&lt;/td&gt;<br />                            &lt;td&gt;{{ expense.category }}&lt;/td&gt;<br />                            &lt;td&gt;{{ expense.tag_final_value }}&lt;/td&gt;<br />                        &lt;/tr&gt;<br />                    {% empty %}<br />                        &lt;tr&gt;<br />                            &lt;td colspan=\"4\"&gt;No data&lt;/td&gt;<br />                        &lt;/tr&gt;<br />                    {% endfor %}<br />                    &lt;/tbody&gt;<br />                &lt;/table&gt;<br />                &lt;a href=\"/admin/expenses/genericexpense/\" class=\"btn btn-primary\"&gt;Edit&lt;/a&gt;<br />            &lt;/div&gt;<br />        &lt;/div&gt;<br />      {% endblock %}<br />  &lt;/div&gt;</pre>\r\n<pre class=\"graf graf--pre\">&lt;!-- Optional JavaScript --&gt;<br />    &lt;!-- jQuery first, then Popper.js, then Bootstrap JS --&gt;<br />    &lt;script src=\"<a class=\"markup--anchor markup--pre-anchor\" href=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\" rel=\"nofollow noopener\" target=\"_blank\" data-href=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\">https://code.jquery.com/jquery-3.3.1.slim.min.js</a>\" integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;<br />    &lt;script src=\"<a class=\"markup--anchor markup--pre-anchor\" href=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js\" rel=\"nofollow noopener\" target=\"_blank\" data-href=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js\">https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js</a>\" integrity=\"sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;<br />    &lt;script src=\"<a class=\"markup--anchor markup--pre-anchor\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js\" rel=\"nofollow noopener\" target=\"_blank\" data-href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js\">https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js</a>\" integrity=\"sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;<br />    &lt;script src=\"<a class=\"markup--anchor markup--pre-anchor\" href=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.2/Chart.min.js\" rel=\"nofollow noopener\" target=\"_blank\" data-href=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.2/Chart.min.js\">https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.2/Chart.min.js</a>\"&gt;&lt;/script&gt;<br />    &lt;script&gt;<br />        $('.datepicker').datepicker();<br />    &lt;/script&gt;<br />{% block extra_js %} {% endblock %}<br />  &lt;/body&gt;<br />&lt;/html&gt;</pre>\r\n<blockquote class=\"graf graf--blockquote\">So probably if you wantching this tutorial tou know some basic html, css etc. On index html we added the static files with the cdns like &lt;link rel=&rdquo;stylesheet&rdquo; href=&rdquo;<a class=\"markup--anchor markup--blockquote-anchor\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\" rel=\"nofollow noopener\" target=\"_blank\" data-href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\">https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css</a>\"&gt;&nbsp;. Lets go to the body now and see the next code</blockquote>\r\n<pre class=\"graf graf--pre\">{% include 'navbar.html' %}</pre>\r\n<p class=\"graf graf--p\">We tell to our template to include a second template on the current spot. This is nice because if we have a big template we can break into parts link them back on the main template. And breaking it into parts make them reusable too. We will create later the navbar.html lets focus on this one for now. When you want to use python on a template you use template tags. There is some build ups or you can create too, depends on situation. But is better to keep as much code and logic on views. When you want to use a template tag you include it like that {% for bill in bills %}, if you want to use the variables from the view you use {{ test }}. We assume you know this just a fast review.</p>\r\n<pre class=\"graf graf--pre\">{% for bill in bills %}<br />   &lt;tr&gt;<br />       &lt;th scope=\"row\"&gt;1&lt;/th&gt;<br />       &lt;td&gt;{{ bill.date_expired|date }}&lt;/td&gt;<br />       &lt;td&gt;{{ bill.category }}&lt;/td&gt;<br />       &lt;td&gt;{{ bill.tag_final_value }}&lt;/td&gt;<br />   &lt;/tr&gt;<br />{% empty %}<br />   &lt;tr&gt;<br />      &lt;td colspan=\"4\"&gt;No data&lt;/td&gt;<br />   &lt;/tr&gt;<br />{% endfor %}</pre>\r\n<p class=\"graf graf--p\">One last note, when we using the {% block container %} {% endblock %}, the code inside that tag is dynamic. We can create a second template, which can extend from the first template and get all the static, code etc and add the new code inside that block. Like the next templates! Thats its i will not post the code for the others html files, just the links from github grab them!</p>\r\n<ul class=\"postList\">\r\n<li class=\"graf graf--li\"><a class=\"markup--anchor markup--li-anchor\" href=\"https://github.com/Zefarak/blog-expense-app/edit/master/expenses/templates/navbar.html\" rel=\"noopener\" target=\"_blank\" data-href=\"https://github.com/Zefarak/blog-expense-app/edit/master/expenses/templates/navbar.html\">navbar.html&nbsp;</a></li>\r\n<li class=\"graf graf--li\"><a class=\"markup--anchor markup--li-anchor\" href=\"https://github.com/Zefarak/blog-expense-app/blob/master/expenses/templates/page_list.html\" rel=\"noopener\" target=\"_blank\" data-href=\"https://github.com/Zefarak/blog-expense-app/blob/master/expenses/templates/page_list.html\">page_list.html</a></li>\r\n<li class=\"graf graf--li\"><a class=\"markup--anchor markup--li-anchor\" href=\"https://github.com/Zefarak/blog-expense-app/blob/master/expenses/templates/report.html\" rel=\"noopener\" target=\"_blank\" data-href=\"https://github.com/Zefarak/blog-expense-app/blob/master/expenses/templates/report.html\">report.html</a></li>\r\n</ul>\r\n<p class=\"graf graf--p\">On report.html we will use the chart.js. So first we will use the canva and give them any id name we want</p>\r\n<pre class=\"graf graf--pre\">&lt;<strong class=\"markup--strong markup--pre-strong\">div class=\"row\"</strong>&gt;<br />    &lt;<strong class=\"markup--strong markup--pre-strong\">div class=\"col-8\"</strong>&gt;&lt;<strong class=\"markup--strong markup--pre-strong\">canvas id=\"myChart\" width=\"400\" height=\"150\"</strong>&gt;&lt;/<strong class=\"markup--strong markup--pre-strong\">canvas</strong>&gt;&lt;/<strong class=\"markup--strong markup--pre-strong\">div</strong>&gt;<br />    &lt;<strong class=\"markup--strong markup--pre-strong\">div class=\"col-4\"</strong>&gt;&lt;<strong class=\"markup--strong markup--pre-strong\">canvas id=\"myChart0\" width=\"400\" height=\"300\"</strong>&gt;&lt;/<strong class=\"markup--strong markup--pre-strong\">canvas</strong>&gt;&lt;/<strong class=\"markup--strong markup--pre-strong\">div</strong>&gt;<br />&lt;/<strong class=\"markup--strong markup--pre-strong\">div</strong>&gt;</pre>\r\n<p class=\"graf graf--p\">Thats the easy part, with the help of bootstrap we specify how much space charts will get, and and now javascript will do the magic.</p>\r\n<pre class=\"graf graf--pre\"><strong class=\"markup--strong markup--pre-strong\">var <em class=\"markup--em markup--pre-em\">ctx </em></strong>= <strong class=\"markup--strong markup--pre-strong\">document</strong>.getElementById(<strong class=\"markup--strong markup--pre-strong\">\"myChart\"</strong>).getContext(<strong class=\"markup--strong markup--pre-strong\">'2d'</strong>);<br /><strong class=\"markup--strong markup--pre-strong\">var <em class=\"markup--em markup--pre-em\">myChart </em></strong>= <strong class=\"markup--strong markup--pre-strong\">new </strong>Chart(<strong class=\"markup--strong markup--pre-strong\"><em class=\"markup--em markup--pre-em\">ctx</em></strong>, {<br />    <strong class=\"markup--strong markup--pre-strong\">type</strong>: <strong class=\"markup--strong markup--pre-strong\">'line'</strong>,<br />    <strong class=\"markup--strong markup--pre-strong\">data</strong>: {<br />        <strong class=\"markup--strong markup--pre-strong\">labels</strong>: [<br />            {% <strong class=\"markup--strong markup--pre-strong\">for month in months_list </strong>%}<br />                {% <strong class=\"markup--strong markup--pre-strong\">if forloop</strong>.<strong class=\"markup--strong markup--pre-strong\">last </strong>%}<br />                <strong class=\"markup--strong markup--pre-strong\">\"</strong>{{ <strong class=\"markup--strong markup--pre-strong\">month </strong>}}<strong class=\"markup--strong markup--pre-strong\">\"<br />                </strong>{% <strong class=\"markup--strong markup--pre-strong\">else </strong>%}<br />                <strong class=\"markup--strong markup--pre-strong\">\"</strong>{{ <strong class=\"markup--strong markup--pre-strong\">month </strong>}}<strong class=\"markup--strong markup--pre-strong\">\"</strong>,<br />                {% <strong class=\"markup--strong markup--pre-strong\">endif </strong>%}<br />            {% <strong class=\"markup--strong markup--pre-strong\">endfor </strong>%}<br />        ],<br />        <strong class=\"markup--strong markup--pre-strong\">datasets</strong>: [{<br />            <strong class=\"markup--strong markup--pre-strong\">label</strong>: <strong class=\"markup--strong markup--pre-strong\">'Bills'</strong>,<br />            <strong class=\"markup--strong markup--pre-strong\">fill</strong>:<strong class=\"markup--strong markup--pre-strong\">false</strong>,<br />            <strong class=\"markup--strong markup--pre-strong\">borderColor</strong>: <strong class=\"markup--strong markup--pre-strong\">'blue'</strong>,<br />            <strong class=\"markup--strong markup--pre-strong\">data</strong>: [{% <strong class=\"markup--strong markup--pre-strong\">for month in bill_by_month </strong>%}<br />                {% <strong class=\"markup--strong markup--pre-strong\">if forloop</strong>.<strong class=\"markup--strong markup--pre-strong\">last </strong>%}<br />                    <strong class=\"markup--strong markup--pre-strong\">\"</strong>{{ <strong class=\"markup--strong markup--pre-strong\">month</strong>.0 }}<strong class=\"markup--strong markup--pre-strong\">\"<br />                </strong>{% <strong class=\"markup--strong markup--pre-strong\">else </strong>%}<br />                    <strong class=\"markup--strong markup--pre-strong\">\"</strong>{{ <strong class=\"markup--strong markup--pre-strong\">month</strong>.0 }}<strong class=\"markup--strong markup--pre-strong\">\"</strong>,<br />                {% <strong class=\"markup--strong markup--pre-strong\">endif </strong>%}<br />            {% <strong class=\"markup--strong markup--pre-strong\">endfor </strong>%}],<br /><br />            <strong class=\"markup--strong markup--pre-strong\">borderWidth</strong>: 1<br />        },</pre>\r\n<blockquote class=\"graf graf--blockquote\">On first line we got the div and the we send our chart with the new Chart command. But we didn&rsquo;t done, we have to specify what type of chart is, the labels the dataset even the color of the dataset how fat will be the line etc&nbsp;. Here we only use the python to populate the data, and the javascript for the cosmetic changes.&nbsp;</blockquote>\r\n<p class=\"graf graf--p graf--empty\">&nbsp;</p>\r\n<p class=\"graf graf--p\">Thats its, run again the runserver command and the app is ready!</p>\r\n<p class=\"graf graf--p graf--empty\">&nbsp;</p>\r\n</div>\r\n</div>\r\n<div class=\"section-divider\"><hr class=\"section-divider\" /></div>\r\n<div class=\"section-content\">\r\n<div class=\"section-inner sectionLayout--insetColumn\">\r\n<p class=\"graf graf--p\"><strong class=\"markup--strong markup--p-strong\">Heroku</strong></p>\r\n<p class=\"graf graf--p\">Optional step if you want the app live on web.</p>\r\n<p class=\"graf graf--p\">Before we do anything lets make our app ready for heroku. We will use the version control program called github and we will create some files to explain heroku what to do.&nbsp;</p>\r\n<blockquote class=\"graf graf--blockquote\">Note before continue, in real app development you must never sent data like django secret key, email codes etc on github you must use a library like decouple which reads this data from enviroment, and you must connect the app with a real web database like postgres, here for simplicity again we will go with sqlite3 which is good but cant handle more than one user on same time, if more its get locked.</blockquote>\r\n<p class=\"graf graf--p\">Now lets create this file needed</p>\r\n<ul class=\"postList\">\r\n<li class=\"graf graf--li\">First file is called runtime.txt, is used to specify which version of python our app will use. We added the python-3.6.0</li>\r\n<li class=\"graf graf--li\">Second file is requirements.txt. Its a common python practice to add this file on every project to inform the user which libraries we used. On this file you will se two new libraries expept django the whitenoise and the gunicorn. This is for heroku the first handle the static files on production level and the second translate our app to nginx so the other server can serve it. So no anymore python developer server</li>\r\n<li class=\"graf graf--li\">And the last file is the Procfile and his job is to tell gunicorn where our ap wsgi is and we add this code&hellip; web: gunicorn my_expenses.wsgi\u200a&mdash;\u200alog-file\u200a&mdash;\u200a</li>\r\n</ul>\r\n<p class=\"graf graf--p\">Now we need to do more changes on our wsgi file</p>\r\n<pre class=\"graf graf--pre\"><strong class=\"markup--strong markup--pre-strong\">import </strong>os<br /><strong class=\"markup--strong markup--pre-strong\">from </strong>whitenoise.django <strong class=\"markup--strong markup--pre-strong\">import </strong>DjangoWhiteNoise<br /><strong class=\"markup--strong markup--pre-strong\">from </strong>django.core.wsgi <strong class=\"markup--strong markup--pre-strong\">import </strong>get_wsgi_application<br /><br />os.environ.setdefault(<strong class=\"markup--strong markup--pre-strong\">\"DJANGO_SETTINGS_MODULE\"</strong>, <strong class=\"markup--strong markup--pre-strong\">\"my_expenses.settings\"</strong>)<br /><br />application = get_wsgi_application()<br />application = DjangoWhiteNoise(application)</pre>\r\n<p class=\"graf graf--p\">And on settings.py we need to replace a line with that</p>\r\n<pre class=\"graf graf--pre\">ALLOWED_HOSTS = [ <strong class=\"markup--strong markup--pre-strong\">'127.0.0.1'</strong>, <strong class=\"markup--strong markup--pre-strong\">'example.com'</strong>,]</pre>\r\n<blockquote class=\"graf graf--blockquote\">Where example is your domain on heroku. Now our webapp is ready lets add git init. Go to github and create a new account, and after that create a new repository with any name you want and follow exactly the steps on the guide. If you want you can ignore this step and use mine. But is better to get familiar with git.</blockquote>\r\n<p class=\"graf graf--p graf--empty\">&nbsp;</p>\r\n<p class=\"graf graf--p\">Now lets go live on heroku, go to heroku and create a account, after all is settled create an new app. You have to use different name propable because that is reserved now</p>\r\n<img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/880/1*cM3skSEQCkwDvFsLj3cYWA.png\" alt=\"\" data-image-id=\"1*cM3skSEQCkwDvFsLj3cYWA.png\" data-width=\"717\" data-height=\"345\" />\r\n<p class=\"graf graf--p\">after that go here</p>\r\n<img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/880/1*2zURLmmZlwOV1RS2hHk_cw.png\" alt=\"\" data-image-id=\"1*2zURLmmZlwOV1RS2hHk_cw.png\" data-width=\"876\" data-height=\"470\" />\r\n<p class=\"graf graf--p\">If you created your own git repository or you fork mine use your account name and repository name or just use mine. After pressing done you will see the next page just press deploy Branch wait 1&ndash;2 min and your site is ready!</p>\r\n<img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/880/1*JgtT2ksqqvZKwELMtcJYbQ.png\" alt=\"\" data-image-id=\"1*JgtT2ksqqvZKwELMtcJYbQ.png\" data-width=\"1041\" data-height=\"518\" />\r\n<p class=\"graf graf--p\">If you see that error&nbsp;</p>\r\n<img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/880/1*hTn4ZCPMUjozPj12TxHGnw.png\" alt=\"\" data-image-id=\"1*hTn4ZCPMUjozPj12TxHGnw.png\" data-width=\"883\" data-height=\"345\" />\r\n<p class=\"graf graf--p\">you can fix it like this</p>\r\n<img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/880/1*VM1sQ1OsWIyMA4LAbpjfOg.png\" alt=\"\" data-image-id=\"1*VM1sQ1OsWIyMA4LAbpjfOg.png\" data-width=\"1232\" data-height=\"443\" />\r\n<p class=\"graf graf--p graf--empty\">&nbsp;</p>\r\n</div>\r\n</div>", "keywords_eng": "learning, programming, python , django, html, css. javascript,", "description_eng": null, "user": 1, "publish": "2018-05-06", "updated": "2018-09-14T15:59:04.494Z", "slug": "restaurant-series-1-app", "category": 1, "file": "restaurant-720.jpg", "update": false, "likes": []}}, {"model": "blog.post", "pk": 4, "fields": {"active": true, "active_eng": true, "title": "Restaurant Series Part 2. \u0394\u03b7\u03bc\u03b9\u03bf\u03c5\u03c1\u03b3\u03cc\u03bd\u03c4\u03b1\u03c2 \u03c4\u03bf App \u03c4\u03c9\u03bd \u03c3\u03c5\u03bd\u03c4\u03b1\u03b3\u03ce\u03bd", "content": "<p>Welcome to my series about creating a simply Cafe/Restaurant App. In this Series we are gonna create:</p>\r\n<ol>\r\n<li>A Recipe App</li>\r\n<li>A Cart App&nbsp;</li>\r\n<li>A Invoice App</li>\r\n<li>Extended User model</li>\r\n<li>&nbsp;Homepage Admin</li>\r\n</ol>\r\n<p>&nbsp;</p>\r\n<p>So lets Started! In our recipe app we are gonna need 3 models, the category model, the ingriedents model</p>\r\n<p>and the Recipe model. So on console we type python manage.py startapp recipes and dont forget to add it on&nbsp;</p>\r\n<p>settings.py&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<pre><br />INSTALLED_APPS = [<br />    'django.contrib.admin',<br />    'django.contrib.auth',<br />    'django.contrib.contenttypes',<br />    'django.contrib.sessions',<br />    'django.contrib.messages',<br />    'django.contrib.staticfiles',<br />    'homepage.apps.HomepageConfig',<br />    #  my apps<br />   <strong> 'recipes',</strong><br />]<br /><br />Now on models.py we create our first model the category<br /><br /></pre>\r\n<pre>class RecipeCategory(models.Model):<br />    active = models.BooleanField(default=True)<br />    title = models.CharField(max_length=100, unique=True)<br />    slug_field = models.SlugField(allow_unicode=True)<br />    date_created = models.DateField(auto_now_add=True)<br />    date_edited = models.DateField(auto_now=True)<br />    ordering = models.IntegerField(default=1)<br /><br />    class Meta:<br />        ordering = ['ordering']<br />        verbose_name_plural = 'Categories for Recipes'<br /><br />    def __str__(self):<br />        return self.title<br /><br /><br />Lets explain this:<br />    The active defines if the category will be enabled or not, the title is the name of the category <br />and we made it unique so we dont have the same name on different categories, slug_field we gonna explain later<br />when we will create the urls.py, the date fields as the description says, and the ordering will be used to<br />create our costum ordering if needed<br /><br />The second model we will create is the Recipe model<br /><br /></pre>\r\n<pre>class Recipe(models.Model):<br />    active = models.BooleanField(default=True)<br />    first_page = models.BooleanField(default=True)<br />    title = models.CharField(max_length=100, unique=True)<br />    slug_field = models.SlugField(allow_unicode=True)<br />    date_created = models.DateField(auto_now_add=True)<br />    date_edited = models.DateField(auto_now=True)<br />    description = HTMLField(blank=True, null=True)<br />    price = models.DecimalField(decimal_places=2, max_length=10)<br />    price_discount = models.DecimalField(decimal_places=2, max_length=10, default=2)<br />    category = models.ForeignKey(RecipeCategory)<br /><br />    def __str__(self):<br />        return self.title</pre>\r\n<p>&nbsp;</p>\r\n<pre><br /><br /></pre>", "keywords": "", "description": "", "title_eng": "Restaurant Series Part 2  Recipe App", "content_eng": "", "keywords_eng": null, "description_eng": null, "user": 1, "publish": "2017-10-03", "updated": "2018-05-24T12:52:10.488Z", "slug": "blog-series-part-2", "category": 4, "file": "restaurant-720.jpg", "update": false, "likes": []}}, {"model": "blog.post", "pk": 6, "fields": {"active": true, "active_eng": true, "title": "Django and Chart.js", "content": "<p>&kappa;&alpha;&lambda;&eta;&mu;\u03ad&rho;&alpha; ttytyty erer</p>", "keywords": "python, django, javascript, chart.js, analytics", "description": "A story about Django, chart.ls and Nba players stats", "title_eng": "Django and Chart.js", "content_eng": "<p>Welcome to my tutorial about Django and chart.js. Today we are gonna use django to feed a template with the chart.js.</p>\r\n<p>The source we are gonna use is this</p>\r\n<p>-&nbsp;<strong>Django Framework</strong>&nbsp;&nbsp;--&gt;&nbsp;https://www.djangoproject.com/</p>\r\n<p>-&nbsp;<strong>Chart.j</strong>&nbsp;&nbsp;--&gt;&nbsp;http://www.chartjs.org/</p>\r\n<p>-&nbsp;<strong>Bootstrap</strong>&nbsp;&nbsp;--&gt; &nbsp;http://getbootstrap.com/</p>\r\n<p>And a random Nba team stats. Random i said?&nbsp;<span>Nah we are gonna analyze the Nba Finals 2017!</span>&nbsp;--&gt;&nbsp;https://www.basketball-reference.com/playoffs/2017-nba-finals-cavaliers-vs-warriors.html</p>\r\n<p>&nbsp;</p>\r\n<p>Okies lets get started!</p>\r\n<p>First we are gonna created &nbsp;on views.py a view something like this</p>\r\n<p>&nbsp;</p>\r\n<p><span>from&nbsp;</span><span>django</span><span>.shortcuts&nbsp;</span><span>import&nbsp;</span><span>render</span></p>\r\n<pre><span>def </span>my_nba_chart(request):<br />    context = <span>locals</span>()<br />    <span>return </span>render(request, <span>''</span>, context)<br /><br /><br /><br /><br />Lets grab the data now.(The players i will use will be Curry, Green, Durant, Irving, LeBron and Love,<br />and we get first only the points from first 3 games.<br />Our new view is like that<br /><br /></pre>\r\n<pre><span>def </span>my_nba_chart(request):<br />    games = {}<br />    games[<span>'first_final'</span>] = [(<span>'Lebron'</span>, <span>28</span>),<br />                            (<span>'Irving'</span>, <span>24</span>),<br />                            (<span>'Love'</span>, <span>15</span>),<br />                            (<span>'Curry'</span>, <span>28</span>),<br />                            (<span>'Durant'</span>, <span>38</span>),<br />                            (<span>'Green'</span>, <span>9</span>),]<br />    games[<span>'second_final'</span>] = [(<span>'Lebron'</span>, <span>29</span>),<br />                            (<span>'Irving'</span>, <span>19</span>),<br />                            (<span>'Love'</span>, <span>27</span>),<br />                            (<span>'Curry'</span>, <span>32</span>),<br />                            (<span>'Durant'</span>, <span>33</span>),<br />                            (<span>'Green'</span>, <span>12</span>), ]<br />    games[<span>'third_final'</span>] = [(<span>'Lebron'</span>, <span>39</span>),<br />                            (<span>'Irving'</span>, <span>38</span>),<br />                            (<span>'Love'</span>, <span>15</span>),<br />                            (<span>'Curry'</span>, <span>26</span>),<br />                            (<span>'Durant'</span>, <span>31</span>),<br />                            (<span>'Green'</span>, <span>8</span>), ]<br />    context = <span>locals</span>()<br />    <span>return </span>render(request, <span>''</span>, context)</pre>\r\n<p>&nbsp;</p>", "keywords_eng": null, "description_eng": null, "user": 1, "publish": "2017-10-04", "updated": "2018-05-24T12:52:18.355Z", "slug": "django-and-chartjs", "category": 2, "file": "chart.jpg", "update": false, "likes": []}}, {"model": "admin.logentry", "pk": 1, "fields": {"action_time": "2017-07-21T15:21:37.863Z", "user": 1, "content_type": 26, "object_id": "13", "object_repr": "http://37.59.32.115:6224/stream", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"costumer_code\", \"shortcode\"]}}]"}}, {"model": "admin.logentry", "pk": 2, "fields": {"action_time": "2017-07-21T15:22:01.260Z", "user": 1, "content_type": 26, "object_id": "13", "object_repr": "http://37.59.32.115:6224/stream", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"costumer_code\", \"shortcode\"]}}]"}}, {"model": "admin.logentry", "pk": 3, "fields": {"action_time": "2017-07-22T17:02:40.377Z", "user": 1, "content_type": 8, "object_id": "1", "object_repr": "simpy chris", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 4, "fields": {"action_time": "2017-07-22T17:02:51.567Z", "user": 1, "content_type": 10, "object_id": "1", "object_repr": "default", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 5, "fields": {"action_time": "2017-08-23T05:04:07.045Z", "user": 1, "content_type": 23, "object_id": "1", "object_repr": "Django", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 6, "fields": {"action_time": "2017-08-23T05:04:20.145Z", "user": 1, "content_type": 23, "object_id": "2", "object_repr": "Javascript", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 7, "fields": {"action_time": "2017-08-23T05:04:34.706Z", "user": 1, "content_type": 23, "object_id": "3", "object_repr": "Programming", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 8, "fields": {"action_time": "2017-08-23T05:26:40.565Z", "user": 1, "content_type": 24, "object_id": "1", "object_repr": "Hello Word", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 9, "fields": {"action_time": "2017-08-23T13:35:43.224Z", "user": 1, "content_type": 8, "object_id": "1", "object_repr": "simpy-chris", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"title\", \"seo_keywords\", \"seo_description\", \"title_eng\", \"seo_keywords_eng\", \"seo_description_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 10, "fields": {"action_time": "2017-08-23T13:35:55.938Z", "user": 1, "content_type": 8, "object_id": "1", "object_repr": "simply-chris", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"title\", \"title_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 11, "fields": {"action_time": "2017-08-23T13:36:44.983Z", "user": 1, "content_type": 8, "object_id": "1", "object_repr": "simply-chris", "action_flag": 2, "change_message": "[{\"changed\": {\"name\": \"about me\", \"object\": \"\\u0392\\u03b9\\u03bf\\u03b3\\u03c1\\u03b1\\u03c6\\u03af\\u03b1\", \"fields\": [\"title\", \"title_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 12, "fields": {"action_time": "2017-08-23T13:43:45.461Z", "user": 1, "content_type": 19, "object_id": "1", "object_repr": "Backend", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 13, "fields": {"action_time": "2017-08-23T13:44:19.082Z", "user": 1, "content_type": 20, "object_id": "1", "object_repr": "Warehouse", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 14, "fields": {"action_time": "2017-08-23T13:51:13.321Z", "user": 1, "content_type": 24, "object_id": "1", "object_repr": "\u039a\u03b1\u03bb\u03ce\u03c2 \u03ae\u03c1\u03b8\u03b1\u03c4\u03b5.", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"title\", \"title_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 15, "fields": {"action_time": "2017-08-23T13:56:30.481Z", "user": 1, "content_type": 24, "object_id": "2", "object_repr": "Mailchip and django", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 16, "fields": {"action_time": "2017-08-23T13:59:23.686Z", "user": 1, "content_type": 24, "object_id": "3", "object_repr": "Blog Series Part 1.", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 17, "fields": {"action_time": "2017-08-23T13:59:59.576Z", "user": 1, "content_type": 24, "object_id": "1", "object_repr": "\u039a\u03b1\u03bb\u03ce\u03c2 \u03ae\u03c1\u03b8\u03b1\u03c4\u03b5.", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"category\"]}}]"}}, {"model": "admin.logentry", "pk": 18, "fields": {"action_time": "2017-08-23T14:00:18.272Z", "user": 1, "content_type": 24, "object_id": "2", "object_repr": "Mailchip and django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"update\"]}}]"}}, {"model": "admin.logentry", "pk": 19, "fields": {"action_time": "2017-08-23T14:01:29.244Z", "user": 1, "content_type": 24, "object_id": "3", "object_repr": "Blog Series \u039a\u03b5\u03c6\u03ac\u03bb\u03b1\u03b9\u03bf 1.  \u039e\u03b5\u03ba\u03b9\u03bd\u03ce\u03bd\u03c4\u03b1\u03c2 \u03c4\u03bf \u03b4\u03b9\u03ba\u03cc \u03c3\u03bf\u03c5 blog.", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"title\", \"title_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 20, "fields": {"action_time": "2017-08-23T14:07:21.805Z", "user": 1, "content_type": 23, "object_id": "4", "object_repr": "Django-Blog", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 21, "fields": {"action_time": "2017-08-23T14:07:37.768Z", "user": 1, "content_type": 24, "object_id": "4", "object_repr": "Blog Series Part 2.", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 22, "fields": {"action_time": "2017-08-23T14:08:25.646Z", "user": 1, "content_type": 4, "object_id": "1", "object_repr": "christos", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"first_name\", \"last_name\", \"email\"]}}]"}}, {"model": "admin.logentry", "pk": 23, "fields": {"action_time": "2017-08-23T14:17:48.338Z", "user": 1, "content_type": 24, "object_id": "2", "object_repr": "Mailchip and django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"content\", \"content_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 24, "fields": {"action_time": "2017-08-23T14:18:07.107Z", "user": 1, "content_type": 24, "object_id": "2", "object_repr": "Mailchip and django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"content_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 25, "fields": {"action_time": "2017-08-23T16:41:17.334Z", "user": 1, "content_type": 25, "object_id": "1", "object_repr": "Gallery", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 26, "fields": {"action_time": "2017-08-27T19:24:06.716Z", "user": 1, "content_type": 8, "object_id": "1", "object_repr": "simply-chris", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"seo_keywords_eng\"]}}, {\"changed\": {\"name\": \"about me\", \"object\": \"\\u0392\\u03b9\\u03bf\\u03b3\\u03c1\\u03b1\\u03c6\\u03af\\u03b1\", \"fields\": [\"title_eng\", \"text_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 27, "fields": {"action_time": "2017-08-28T05:42:38.662Z", "user": 1, "content_type": 20, "object_id": "1", "object_repr": "Warehouse", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"description_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 28, "fields": {"action_time": "2017-08-28T05:45:23.914Z", "user": 1, "content_type": 19, "object_id": "2", "object_repr": "Website", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 29, "fields": {"action_time": "2017-08-28T05:52:54.023Z", "user": 1, "content_type": 20, "object_id": "2", "object_repr": "Restaurant Website", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 30, "fields": {"action_time": "2017-08-28T05:58:34.019Z", "user": 1, "content_type": 14, "object_id": "1", "object_repr": "About", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 31, "fields": {"action_time": "2017-08-28T05:58:43.107Z", "user": 1, "content_type": 16, "object_id": "1", "object_repr": "Github", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 32, "fields": {"action_time": "2017-08-28T06:15:45.229Z", "user": 1, "content_type": 20, "object_id": "1", "object_repr": "Warehouse", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"demo\"]}}]"}}, {"model": "admin.logentry", "pk": 33, "fields": {"action_time": "2017-08-30T19:43:45.918Z", "user": 1, "content_type": 16, "object_id": "2", "object_repr": "Shorting url", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 34, "fields": {"action_time": "2017-09-11T07:25:18.846Z", "user": 1, "content_type": 24, "object_id": "6", "object_repr": "Django and Chart.js", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 35, "fields": {"action_time": "2017-09-11T07:30:39.331Z", "user": 1, "content_type": 24, "object_id": "6", "object_repr": "Django and Chart.js", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"content_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 36, "fields": {"action_time": "2017-09-11T07:31:04.869Z", "user": 1, "content_type": 24, "object_id": "6", "object_repr": "Django and Chart.js", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"}}, {"model": "admin.logentry", "pk": 37, "fields": {"action_time": "2017-09-11T07:34:24.639Z", "user": 1, "content_type": 24, "object_id": "6", "object_repr": "Django and Chart.js", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"content\", \"content_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 38, "fields": {"action_time": "2017-09-11T07:39:31.002Z", "user": 1, "content_type": 24, "object_id": "6", "object_repr": "Django and Chart.js", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"}}, {"model": "admin.logentry", "pk": 39, "fields": {"action_time": "2017-09-11T07:40:02.889Z", "user": 1, "content_type": 24, "object_id": "6", "object_repr": "Django and Chart.js", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"}}, {"model": "admin.logentry", "pk": 40, "fields": {"action_time": "2017-09-11T07:40:55.240Z", "user": 1, "content_type": 24, "object_id": "6", "object_repr": "Django and Chart.js", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"}}, {"model": "admin.logentry", "pk": 41, "fields": {"action_time": "2017-09-11T07:54:34.989Z", "user": 1, "content_type": 24, "object_id": "6", "object_repr": "Django and Chart.js", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"}}, {"model": "admin.logentry", "pk": 42, "fields": {"action_time": "2017-09-11T07:55:01.397Z", "user": 1, "content_type": 24, "object_id": "6", "object_repr": "Django and Chart.js", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"}}, {"model": "admin.logentry", "pk": 43, "fields": {"action_time": "2017-09-14T04:07:52.406Z", "user": 1, "content_type": 24, "object_id": "3", "object_repr": "Restaurant Series \u039a\u03b5\u03c6\u03ac\u03bb\u03b1\u03b9\u03bf 1.  \u039e\u03b5\u03ba\u03b9\u03bd\u03ce\u03bd\u03c4\u03b1\u03c2 \u03c4\u03bf \u03b4\u03b9\u03ba\u03cc \u03c3\u03bf\u03c5 blog.", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"title\", \"title_eng\", \"content\", \"content_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 44, "fields": {"action_time": "2017-09-14T04:07:59.188Z", "user": 1, "content_type": 24, "object_id": "3", "object_repr": "Restaurant Series \u039a\u03b5\u03c6\u03ac\u03bb\u03b1\u03b9\u03bf 1.  \u039e\u03b5\u03ba\u03b9\u03bd\u03ce\u03bd\u03c4\u03b1\u03c2 \u03c4\u03bf \u03b4\u03b9\u03ba\u03cc \u03c3\u03bf\u03c5 blog.", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"slug\"]}}]"}}, {"model": "admin.logentry", "pk": 45, "fields": {"action_time": "2017-09-14T04:23:00.235Z", "user": 1, "content_type": 24, "object_id": "3", "object_repr": "Restaurant Series \u039a\u03b5\u03c6\u03ac\u03bb\u03b1\u03b9\u03bf 1.  \u039e\u03b5\u03ba\u03b9\u03bd\u03ce\u03bd\u03c4\u03b1\u03c2 \u03c4\u03bf \u03b4\u03b9\u03ba\u03cc \u03c3\u03bf\u03c5 blog.", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"}}, {"model": "admin.logentry", "pk": 46, "fields": {"action_time": "2017-09-14T04:23:42.291Z", "user": 1, "content_type": 24, "object_id": "3", "object_repr": "Restaurant Series \u039a\u03b5\u03c6\u03ac\u03bb\u03b1\u03b9\u03bf 1.  \u039e\u03b5\u03ba\u03b9\u03bd\u03ce\u03bd\u03c4\u03b1\u03c2 \u03c4\u03bf \u03b4\u03b9\u03ba\u03cc \u03c3\u03bf\u03c5 blog.", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"}}, {"model": "admin.logentry", "pk": 47, "fields": {"action_time": "2017-09-14T04:33:46.033Z", "user": 1, "content_type": 24, "object_id": "3", "object_repr": "Restaurant Series \u039a\u03b5\u03c6\u03ac\u03bb\u03b1\u03b9\u03bf 1.  \u039e\u03b5\u03ba\u03b9\u03bd\u03ce\u03bd\u03c4\u03b1\u03c2 \u03c4\u03bf \u03b4\u03b9\u03ba\u03cc \u03c3\u03bf\u03c5 blog.", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"}}, {"model": "admin.logentry", "pk": 48, "fields": {"action_time": "2017-09-14T04:37:11.914Z", "user": 1, "content_type": 24, "object_id": "4", "object_repr": "Welcome to my series about creating a simply Cafe/Restaurant App. In this Series we are gonna create", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"title\", \"title_eng\", \"content\"]}}]"}}, {"model": "admin.logentry", "pk": 49, "fields": {"action_time": "2017-09-14T04:38:02.299Z", "user": 1, "content_type": 24, "object_id": "4", "object_repr": "Restaurant Series Part 2  Recipe App", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"title\", \"title_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 50, "fields": {"action_time": "2017-09-14T04:38:32.727Z", "user": 1, "content_type": 24, "object_id": "3", "object_repr": "Restaurant Series \u039a\u03b5\u03c6\u03ac\u03bb\u03b1\u03b9\u03bf 1.  \u039e\u03b5\u03ba\u03b9\u03bd\u03ce\u03bd\u03c4\u03b1\u03c2 \u03c4\u03bf \u03b4\u03b9\u03ba\u03cc \u03c3\u03bf\u03c5 blog.", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"title_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 51, "fields": {"action_time": "2017-09-14T04:42:39.389Z", "user": 1, "content_type": 24, "object_id": "3", "object_repr": "Restaurant Series \u039a\u03b5\u03c6\u03ac\u03bb\u03b1\u03b9\u03bf 1.  \u039e\u03b5\u03ba\u03b9\u03bd\u03ce\u03bd\u03c4\u03b1\u03c2 \u03c4\u03bf \u03b4\u03b9\u03ba\u03cc \u03c3\u03bf\u03c5 blog.", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"}}, {"model": "admin.logentry", "pk": 52, "fields": {"action_time": "2017-09-14T14:43:22.525Z", "user": 1, "content_type": 24, "object_id": "3", "object_repr": "Restaurant Series \u039a\u03b5\u03c6\u03ac\u03bb\u03b1\u03b9\u03bf 1.  \u039e\u03b5\u03ba\u03b9\u03bd\u03ce\u03bd\u03c4\u03b1\u03c2 \u03c4\u03bf \u03b4\u03b9\u03ba\u03cc \u03c3\u03bf\u03c5 blog.", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"content\", \"content_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 53, "fields": {"action_time": "2017-09-14T14:59:58.861Z", "user": 1, "content_type": 24, "object_id": "3", "object_repr": "Restaurant Series \u039a\u03b5\u03c6\u03ac\u03bb\u03b1\u03b9\u03bf 1.  \u039e\u03b5\u03ba\u03b9\u03bd\u03ce\u03bd\u03c4\u03b1\u03c2 \u03c4\u03bf \u03b4\u03b9\u03ba\u03cc \u03c3\u03bf\u03c5 blog.", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 54, "fields": {"action_time": "2017-09-25T04:37:27.792Z", "user": 1, "content_type": 24, "object_id": "3", "object_repr": "Restaurant Series \u039a\u03b5\u03c6\u03ac\u03bb\u03b1\u03b9\u03bf 1.  \u039e\u03b5\u03ba\u03b9\u03bd\u03ce\u03bd\u03c4\u03b1\u03c2 \u03c4\u03bf \u03b4\u03b9\u03ba\u03cc \u03c3\u03bf\u03c5 blog.", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"}}, {"model": "admin.logentry", "pk": 55, "fields": {"action_time": "2017-09-27T04:43:45.099Z", "user": 1, "content_type": 18, "object_id": "7", "object_repr": "hello@gmail.gr", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 56, "fields": {"action_time": "2017-09-27T04:43:45.330Z", "user": 1, "content_type": 18, "object_id": "4", "object_repr": "likrageika12@hotmail.gr", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 57, "fields": {"action_time": "2017-09-27T04:43:45.555Z", "user": 1, "content_type": 18, "object_id": "3", "object_repr": "lirageika12@hotmail.gr", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 58, "fields": {"action_time": "2017-09-27T04:43:45.782Z", "user": 1, "content_type": 18, "object_id": "1", "object_repr": "lirageika@hotmail.gr", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 59, "fields": {"action_time": "2017-09-28T07:22:24.851Z", "user": 1, "content_type": 30, "object_id": "1", "object_repr": "Christos Stathakis", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 60, "fields": {"action_time": "2017-09-28T07:22:52.715Z", "user": 1, "content_type": 30, "object_id": "2", "object_repr": "John Aliferis", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 61, "fields": {"action_time": "2017-09-28T07:54:27.969Z", "user": 1, "content_type": 30, "object_id": "3", "object_repr": "Antonis Stathakis", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 62, "fields": {"action_time": "2017-10-02T04:24:32.433Z", "user": 1, "content_type": 24, "object_id": "1", "object_repr": "\u039a\u03b1\u03bb\u03ce\u03c2 \u03ae\u03c1\u03b8\u03b1\u03c4\u03b5.", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"title_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 63, "fields": {"action_time": "2017-10-02T04:25:06.411Z", "user": 1, "content_type": 24, "object_id": "6", "object_repr": "Django and Chart.js", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"title_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 64, "fields": {"action_time": "2017-10-03T05:40:01.060Z", "user": 1, "content_type": 19, "object_id": "3", "object_repr": "\u0392\u03b9\u03bf\u03b3\u03c1\u03b1\u03c6\u03b9\u03ba\u03cc Site", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 65, "fields": {"action_time": "2017-10-03T05:54:04.922Z", "user": 1, "content_type": 20, "object_id": "3", "object_repr": "v", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 66, "fields": {"action_time": "2017-10-03T13:54:27.864Z", "user": 1, "content_type": 20, "object_id": "3", "object_repr": "v", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"image\"]}}]"}}, {"model": "admin.logentry", "pk": 67, "fields": {"action_time": "2017-10-03T13:57:01.657Z", "user": 1, "content_type": 20, "object_id": "2", "object_repr": "Restaurant Website", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"image\"]}}]"}}, {"model": "admin.logentry", "pk": 68, "fields": {"action_time": "2017-10-03T14:00:49.246Z", "user": 1, "content_type": 20, "object_id": "1", "object_repr": "Warehouse", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"image\"]}}]"}}, {"model": "admin.logentry", "pk": 69, "fields": {"action_time": "2017-10-03T14:16:55.527Z", "user": 1, "content_type": 24, "object_id": "3", "object_repr": "Restaurant Series \u039a\u03b5\u03c6\u03ac\u03bb\u03b1\u03b9\u03bf 1.  \u039e\u03b5\u03ba\u03b9\u03bd\u03ce\u03bd\u03c4\u03b1\u03c2 \u03c4\u03bf \u03b4\u03b9\u03ba\u03cc \u03c3\u03bf\u03c5 blog.", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"file\"]}}]"}}, {"model": "admin.logentry", "pk": 70, "fields": {"action_time": "2017-10-03T14:21:20.624Z", "user": 1, "content_type": 24, "object_id": "3", "object_repr": "Restaurant Series \u039a\u03b5\u03c6\u03ac\u03bb\u03b1\u03b9\u03bf 1.  \u039e\u03b5\u03ba\u03b9\u03bd\u03ce\u03bd\u03c4\u03b1\u03c2 \u03c4\u03bf \u03b4\u03b9\u03ba\u03cc \u03c3\u03bf\u03c5 blog.", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"file\"]}}]"}}, {"model": "admin.logentry", "pk": 71, "fields": {"action_time": "2017-10-03T14:21:46.919Z", "user": 1, "content_type": 24, "object_id": "4", "object_repr": "Restaurant Series Part 2  Recipe App", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"file\"]}}]"}}, {"model": "admin.logentry", "pk": 72, "fields": {"action_time": "2017-10-03T14:25:52.433Z", "user": 1, "content_type": 24, "object_id": "6", "object_repr": "Django and Chart.js", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"file\"]}}]"}}, {"model": "admin.logentry", "pk": 73, "fields": {"action_time": "2017-10-03T14:44:22.014Z", "user": 1, "content_type": 20, "object_id": "2", "object_repr": "Restaurant Website", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"seo_description\", \"seo_keywords\", \"description_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 74, "fields": {"action_time": "2017-10-03T14:44:40.243Z", "user": 1, "content_type": 20, "object_id": "2", "object_repr": "Restaurant Website", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"description\"]}}]"}}, {"model": "admin.logentry", "pk": 75, "fields": {"action_time": "2017-10-03T14:45:05.710Z", "user": 1, "content_type": 20, "object_id": "2", "object_repr": "Restaurant Website", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"description\", \"description_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 76, "fields": {"action_time": "2017-10-03T14:45:43.739Z", "user": 1, "content_type": 20, "object_id": "2", "object_repr": "Restaurant Website", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"description\"]}}]"}}, {"model": "admin.logentry", "pk": 77, "fields": {"action_time": "2017-10-03T14:49:07.478Z", "user": 1, "content_type": 20, "object_id": "3", "object_repr": "Art Design PortFolio", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"title\", \"seo_description\", \"seo_keywords\", \"title_eng\", \"slug\"]}}]"}}, {"model": "admin.logentry", "pk": 78, "fields": {"action_time": "2017-10-03T15:19:58.089Z", "user": 1, "content_type": 20, "object_id": "3", "object_repr": "Art Design PortFolio", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"description\", \"description_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 79, "fields": {"action_time": "2017-10-03T15:24:21.411Z", "user": 1, "content_type": 20, "object_id": "3", "object_repr": "Art Design PortFolio", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"description\", \"description_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 80, "fields": {"action_time": "2017-10-03T15:33:26.418Z", "user": 1, "content_type": 24, "object_id": "3", "object_repr": "Restaurant Series \u039a\u03b5\u03c6\u03ac\u03bb\u03b1\u03b9\u03bf 1.  \u039e\u03b5\u03ba\u03b9\u03bd\u03ce\u03bd\u03c4\u03b1\u03c2 \u03c4\u03bf \u03b4\u03b9\u03ba\u03cc \u03c3\u03bf\u03c5 app \u03b5\u03c3\u03c4\u03b9\u03b1\u03c4\u03bf\u03c1\u03af\u03bf\u03c5.", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"title\", \"keywords\", \"keywords_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 81, "fields": {"action_time": "2017-10-03T15:34:28.871Z", "user": 1, "content_type": 24, "object_id": "4", "object_repr": "Restaurant Series Part 2. \u0394\u03b7\u03bc\u03b9\u03bf\u03c5\u03c1\u03b3\u03cc\u03bd\u03c4\u03b1\u03c2 \u03c4\u03bf App \u03c4\u03c9\u03bd \u03c3\u03c5\u03bd\u03c4\u03b1\u03b3\u03ce\u03bd", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"title\"]}}]"}}, {"model": "admin.logentry", "pk": 82, "fields": {"action_time": "2017-10-04T05:25:38.942Z", "user": 1, "content_type": 24, "object_id": "6", "object_repr": "Django and Chart.js", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"content\", \"content_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 83, "fields": {"action_time": "2017-10-04T05:26:38.423Z", "user": 1, "content_type": 24, "object_id": "6", "object_repr": "Django and Chart.js", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"}}, {"model": "admin.logentry", "pk": 84, "fields": {"action_time": "2017-11-09T18:30:52.813Z", "user": 1, "content_type": 30, "object_id": "4", "object_repr": "John doukas", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 85, "fields": {"action_time": "2017-11-18T07:59:37.706Z", "user": 1, "content_type": 20, "object_id": "4", "object_repr": "A Blog about a Eshop!", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 86, "fields": {"action_time": "2017-11-18T10:20:59.353Z", "user": 1, "content_type": 20, "object_id": "4", "object_repr": "A Blog about a Eshop!", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"href\"]}}]"}}, {"model": "admin.logentry", "pk": 87, "fields": {"action_time": "2017-11-18T10:22:00.999Z", "user": 1, "content_type": 20, "object_id": "4", "object_repr": "A Blog about a Eshop!", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"title_eng\", \"seo_description_eng\", \"seo_keywords_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 88, "fields": {"action_time": "2017-11-18T10:28:38.399Z", "user": 1, "content_type": 20, "object_id": "3", "object_repr": "Art Design PortFolio", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"demo\", \"short_description\", \"seo_keywords\", \"description\", \"seo_keywords_eng\", \"description_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 89, "fields": {"action_time": "2017-12-12T05:49:13.303Z", "user": 1, "content_type": 10, "object_id": "1", "object_repr": "Info", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"title\", \"text\", \"title_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 90, "fields": {"action_time": "2017-12-12T05:52:09.531Z", "user": 1, "content_type": 10, "object_id": "1", "object_repr": "Info", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"text\"]}}]"}}, {"model": "admin.logentry", "pk": 91, "fields": {"action_time": "2017-12-12T06:01:12.022Z", "user": 1, "content_type": 10, "object_id": "1", "object_repr": "Info", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"text\"]}}]"}}, {"model": "admin.logentry", "pk": 92, "fields": {"action_time": "2017-12-12T06:16:29.569Z", "user": 1, "content_type": 10, "object_id": "1", "object_repr": "Info", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 93, "fields": {"action_time": "2017-12-12T15:54:15.984Z", "user": 1, "content_type": 20, "object_id": "2", "object_repr": "Restaurant Website", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"short_description\"]}}]"}}, {"model": "admin.logentry", "pk": 94, "fields": {"action_time": "2017-12-12T16:00:31.426Z", "user": 1, "content_type": 20, "object_id": "3", "object_repr": "Art Design PortFolio", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"short_description\"]}}]"}}, {"model": "admin.logentry", "pk": 95, "fields": {"action_time": "2017-12-12T16:04:47.164Z", "user": 1, "content_type": 20, "object_id": "4", "object_repr": "A Blog about a Eshop!", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"short_description\"]}}]"}}, {"model": "admin.logentry", "pk": 96, "fields": {"action_time": "2017-12-12T16:05:55.748Z", "user": 1, "content_type": 20, "object_id": "1", "object_repr": "Warehouse", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"short_description\", \"description\", \"description_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 97, "fields": {"action_time": "2017-12-12T16:06:30.169Z", "user": 1, "content_type": 20, "object_id": "1", "object_repr": "Warehouse", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"short_description\"]}}]"}}, {"model": "admin.logentry", "pk": 98, "fields": {"action_time": "2017-12-12T16:23:38.106Z", "user": 1, "content_type": 20, "object_id": "1", "object_repr": "Warehouse", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"description\"]}}]"}}, {"model": "admin.logentry", "pk": 99, "fields": {"action_time": "2017-12-12T17:00:24.923Z", "user": 1, "content_type": 20, "object_id": "5", "object_repr": "Cafe Shop", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 100, "fields": {"action_time": "2017-12-12T17:10:36.273Z", "user": 1, "content_type": 20, "object_id": "5", "object_repr": "Cafe Shop", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"demo\", \"description\"]}}]"}}, {"model": "admin.logentry", "pk": 101, "fields": {"action_time": "2017-12-12T17:15:25.901Z", "user": 1, "content_type": 21, "object_id": "1", "object_repr": "wareH", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 102, "fields": {"action_time": "2017-12-12T17:16:26.039Z", "user": 1, "content_type": 21, "object_id": "2", "object_repr": "New Products", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 103, "fields": {"action_time": "2017-12-12T17:16:41.163Z", "user": 1, "content_type": 21, "object_id": "1", "object_repr": "Admin Main Page", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"title\"]}}]"}}, {"model": "admin.logentry", "pk": 104, "fields": {"action_time": "2017-12-14T16:21:52.321Z", "user": 1, "content_type": 24, "object_id": "1", "object_repr": "\u039a\u03b1\u03bb\u03ce\u03c2 \u03ae\u03c1\u03b8\u03b1\u03c4\u03b5.", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"content_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 105, "fields": {"action_time": "2018-03-22T06:13:48.943Z", "user": 1, "content_type": 20, "object_id": "3", "object_repr": "Art Design PortFolio", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"short_description_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 106, "fields": {"action_time": "2018-03-22T06:24:44.725Z", "user": 1, "content_type": 20, "object_id": "3", "object_repr": "Art Design PortFolio", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"github\"]}}]"}}, {"model": "admin.logentry", "pk": 107, "fields": {"action_time": "2018-03-29T06:57:03.103Z", "user": 1, "content_type": 20, "object_id": "5", "object_repr": "Cafe Shop", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"short_description_eng\", \"title_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 108, "fields": {"action_time": "2018-03-29T07:06:13.759Z", "user": 1, "content_type": 20, "object_id": "5", "object_repr": "Cafe Shop", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"image\"]}}]"}}, {"model": "admin.logentry", "pk": 141, "fields": {"action_time": "2018-04-12T05:30:50.241Z", "user": 1, "content_type": 20, "object_id": "2", "object_repr": "Restaurant Website", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"demo\", \"short_description_eng\", \"title_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 142, "fields": {"action_time": "2018-04-12T05:33:27.703Z", "user": 1, "content_type": 20, "object_id": "1", "object_repr": "Warehouse Management", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"title\", \"short_description_eng\", \"title_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 143, "fields": {"action_time": "2018-04-12T05:35:16.865Z", "user": 1, "content_type": 20, "object_id": "5", "object_repr": "Cafe Shop", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"short_description_eng\", \"title_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 144, "fields": {"action_time": "2018-04-12T05:43:53.484Z", "user": 1, "content_type": 20, "object_id": "5", "object_repr": "Cafe Shop", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"description_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 145, "fields": {"action_time": "2018-04-12T05:46:24.575Z", "user": 1, "content_type": 20, "object_id": "5", "object_repr": "Cafe Shop", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"description_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 146, "fields": {"action_time": "2018-05-03T06:34:03.173Z", "user": 1, "content_type": 33, "object_id": "1", "object_repr": "Season 1, 2018", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 147, "fields": {"action_time": "2018-05-03T06:36:21.088Z", "user": 1, "content_type": 33, "object_id": "1", "object_repr": "Season 1, 2018", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 148, "fields": {"action_time": "2018-05-03T06:49:04.457Z", "user": 1, "content_type": 34, "object_id": "1", "object_repr": "Christos Stathakis", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 149, "fields": {"action_time": "2018-05-03T06:49:14.911Z", "user": 1, "content_type": 34, "object_id": "2", "object_repr": "Takis Machairas", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 150, "fields": {"action_time": "2018-05-03T06:49:23.881Z", "user": 1, "content_type": 34, "object_id": "3", "object_repr": "John Aliferis", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 151, "fields": {"action_time": "2018-05-03T06:51:04.467Z", "user": 1, "content_type": 31, "object_id": "3", "object_repr": "Christos Stathakis", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 152, "fields": {"action_time": "2018-05-03T06:51:12.486Z", "user": 1, "content_type": 31, "object_id": "4", "object_repr": "Takis Machairas", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 153, "fields": {"action_time": "2018-05-03T06:51:19.986Z", "user": 1, "content_type": 31, "object_id": "5", "object_repr": "John Aliferis", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 154, "fields": {"action_time": "2018-05-03T07:03:59.084Z", "user": 1, "content_type": 31, "object_id": "4", "object_repr": "Takis Machairas", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 155, "fields": {"action_time": "2018-05-03T07:06:48.908Z", "user": 1, "content_type": 31, "object_id": "3", "object_repr": "Christos Stathakis", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 156, "fields": {"action_time": "2018-05-03T07:06:58.444Z", "user": 1, "content_type": 31, "object_id": "5", "object_repr": "John Aliferis", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 157, "fields": {"action_time": "2018-05-03T07:10:39.754Z", "user": 1, "content_type": 31, "object_id": "3", "object_repr": "Christos Stathakis", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 158, "fields": {"action_time": "2018-05-03T07:13:03.594Z", "user": 1, "content_type": 31, "object_id": "3", "object_repr": "Christos Stathakis", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 159, "fields": {"action_time": "2018-05-03T07:13:28.725Z", "user": 1, "content_type": 31, "object_id": "4", "object_repr": "Takis Machairas", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 160, "fields": {"action_time": "2018-05-03T07:13:45.973Z", "user": 1, "content_type": 31, "object_id": "5", "object_repr": "John Aliferis", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 161, "fields": {"action_time": "2018-05-03T07:18:19.589Z", "user": 1, "content_type": 32, "object_id": "3", "object_repr": "Takis Machairas - John Aliferis", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 162, "fields": {"action_time": "2018-05-06T13:58:03.884Z", "user": 1, "content_type": 24, "object_id": "3", "object_repr": "Restaurant Series \u039a\u03b5\u03c6\u03ac\u03bb\u03b1\u03b9\u03bf 1.  \u039e\u03b5\u03ba\u03b9\u03bd\u03ce\u03bd\u03c4\u03b1\u03c2 \u03c4\u03bf \u03b4\u03b9\u03ba\u03cc \u03c3\u03bf\u03c5 app \u03b5\u03c3\u03c4\u03b9\u03b1\u03c4\u03bf\u03c1\u03af\u03bf\u03c5.", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"content_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 163, "fields": {"action_time": "2018-05-07T06:39:33.557Z", "user": 1, "content_type": 35, "object_id": "1", "object_repr": "Christos sta", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"is_readed\"]}}]"}}, {"model": "admin.logentry", "pk": 164, "fields": {"action_time": "2018-05-07T16:03:37.366Z", "user": 1, "content_type": 20, "object_id": "6", "object_repr": "Gym Site Demo", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 165, "fields": {"action_time": "2018-05-07T16:03:43.053Z", "user": 1, "content_type": 20, "object_id": "6", "object_repr": "Gym Site Demo", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"active\"]}}]"}}, {"model": "admin.logentry", "pk": 166, "fields": {"action_time": "2018-05-07T16:03:55.453Z", "user": 1, "content_type": 20, "object_id": "6", "object_repr": "Gym Site Demo", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"active\"]}}]"}}, {"model": "admin.logentry", "pk": 167, "fields": {"action_time": "2018-05-07T16:04:55.691Z", "user": 1, "content_type": 20, "object_id": "6", "object_repr": "Gym Site Demo", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"short_description_eng\", \"title_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 168, "fields": {"action_time": "2018-05-07T16:05:00.372Z", "user": 1, "content_type": 20, "object_id": "6", "object_repr": "Gym Site Demo", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"active\"]}}]"}}, {"model": "admin.logentry", "pk": 169, "fields": {"action_time": "2018-05-07T16:06:04.812Z", "user": 1, "content_type": 20, "object_id": "6", "object_repr": "Gym Site Demo", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"href\", \"github\"]}}]"}}, {"model": "admin.logentry", "pk": 170, "fields": {"action_time": "2018-05-11T17:58:50.376Z", "user": 1, "content_type": 32, "object_id": "4", "object_repr": "John Aliferis - Christos Stathakis", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 171, "fields": {"action_time": "2018-05-12T17:58:32.821Z", "user": 1, "content_type": 32, "object_id": "5", "object_repr": "Takis Machairas - John Aliferis", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 172, "fields": {"action_time": "2018-05-12T18:46:40.205Z", "user": 1, "content_type": 32, "object_id": "6", "object_repr": "John Aliferis - Christos Stathakis", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 173, "fields": {"action_time": "2018-05-15T16:12:02.709Z", "user": 1, "content_type": 34, "object_id": "4", "object_repr": "Stefanos Apostolakis", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 174, "fields": {"action_time": "2018-05-15T16:12:14.647Z", "user": 1, "content_type": 31, "object_id": "6", "object_repr": "Stefanos Apostolakis", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 175, "fields": {"action_time": "2018-05-22T15:07:54.676Z", "user": 1, "content_type": 20, "object_id": "5", "object_repr": "Cafe Shop", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"href\", \"github\"]}}]"}}, {"model": "admin.logentry", "pk": 176, "fields": {"action_time": "2018-05-22T15:08:31.078Z", "user": 1, "content_type": 19, "object_id": "4", "object_repr": "E-Commerce", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 177, "fields": {"action_time": "2018-05-22T15:08:36.666Z", "user": 1, "content_type": 20, "object_id": "5", "object_repr": "Cafe Shop", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"category\"]}}]"}}, {"model": "admin.logentry", "pk": 178, "fields": {"action_time": "2018-05-22T15:09:14.813Z", "user": 1, "content_type": 20, "object_id": "5", "object_repr": "Cafe Shop", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"description_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 179, "fields": {"action_time": "2018-05-24T12:18:27.494Z", "user": 1, "content_type": 20, "object_id": "1", "object_repr": "Warehouse Management", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"github\"]}}]"}}, {"model": "admin.logentry", "pk": 180, "fields": {"action_time": "2018-05-24T12:29:28.219Z", "user": 1, "content_type": 20, "object_id": "1", "object_repr": "Warehouse Management", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"description_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 181, "fields": {"action_time": "2018-05-24T12:47:57.390Z", "user": 1, "content_type": 20, "object_id": "2", "object_repr": "Restaurant Website", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"description_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 182, "fields": {"action_time": "2018-05-24T12:52:02.273Z", "user": 1, "content_type": 24, "object_id": "2", "object_repr": "Mailchip and django", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"content_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 183, "fields": {"action_time": "2018-05-24T12:52:10.661Z", "user": 1, "content_type": 24, "object_id": "4", "object_repr": "Restaurant Series Part 2. \u0394\u03b7\u03bc\u03b9\u03bf\u03c5\u03c1\u03b3\u03cc\u03bd\u03c4\u03b1\u03c2 \u03c4\u03bf App \u03c4\u03c9\u03bd \u03c3\u03c5\u03bd\u03c4\u03b1\u03b3\u03ce\u03bd", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 184, "fields": {"action_time": "2018-05-24T12:52:18.544Z", "user": 1, "content_type": 24, "object_id": "6", "object_repr": "Django and Chart.js", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 185, "fields": {"action_time": "2018-05-24T12:52:26.140Z", "user": 1, "content_type": 24, "object_id": "1", "object_repr": "\u039a\u03b1\u03bb\u03ce\u03c2 \u03ae\u03c1\u03b8\u03b1\u03c4\u03b5.", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 186, "fields": {"action_time": "2018-05-24T12:52:37.362Z", "user": 1, "content_type": 24, "object_id": "3", "object_repr": "Restaurant Series \u039a\u03b5\u03c6\u03ac\u03bb\u03b1\u03b9\u03bf 1.  \u039e\u03b5\u03ba\u03b9\u03bd\u03ce\u03bd\u03c4\u03b1\u03c2 \u03c4\u03bf \u03b4\u03b9\u03ba\u03cc \u03c3\u03bf\u03c5 app \u03b5\u03c3\u03c4\u03b9\u03b1\u03c4\u03bf\u03c1\u03af\u03bf\u03c5.", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 187, "fields": {"action_time": "2018-06-12T15:03:49.895Z", "user": 1, "content_type": 20, "object_id": "5", "object_repr": "Cafe Shop", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"description_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 188, "fields": {"action_time": "2018-07-18T05:00:00.568Z", "user": 1, "content_type": 24, "object_id": "3", "object_repr": "Restaurant Series \u039a\u03b5\u03c6\u03ac\u03bb\u03b1\u03b9\u03bf 1.  \u039e\u03b5\u03ba\u03b9\u03bd\u03ce\u03bd\u03c4\u03b1\u03c2 \u03c4\u03bf \u03b4\u03b9\u03ba\u03cc \u03c3\u03bf\u03c5 app \u03b5\u03c3\u03c4\u03b9\u03b1\u03c4\u03bf\u03c1\u03af\u03bf\u03c5.", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"content_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 189, "fields": {"action_time": "2018-09-07T06:50:43.914Z", "user": 1, "content_type": 24, "object_id": "3", "object_repr": "Restaurant Series \u039a\u03b5\u03c6\u03ac\u03bb\u03b1\u03b9\u03bf 1.  \u039e\u03b5\u03ba\u03b9\u03bd\u03ce\u03bd\u03c4\u03b1\u03c2 \u03c4\u03bf \u03b4\u03b9\u03ba\u03cc \u03c3\u03bf\u03c5 app \u03b5\u03c3\u03c4\u03b9\u03b1\u03c4\u03bf\u03c1\u03af\u03bf\u03c5.", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"}}, {"model": "admin.logentry", "pk": 190, "fields": {"action_time": "2018-09-07T09:27:45.680Z", "user": 1, "content_type": 24, "object_id": "3", "object_repr": "Restaurant Series \u039a\u03b5\u03c6\u03ac\u03bb\u03b1\u03b9\u03bf 1.  \u039e\u03b5\u03ba\u03b9\u03bd\u03ce\u03bd\u03c4\u03b1\u03c2 \u03c4\u03bf \u03b4\u03b9\u03ba\u03cc \u03c3\u03bf\u03c5 app \u03b5\u03c3\u03c4\u03b9\u03b1\u03c4\u03bf\u03c1\u03af\u03bf\u03c5.", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"title_eng\", \"content_eng\", \"slug\"]}}]"}}, {"model": "admin.logentry", "pk": 191, "fields": {"action_time": "2018-09-14T15:55:32.894Z", "user": 1, "content_type": 20, "object_id": "4", "object_repr": "A Blog about a Eshop!", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"description\", \"href\", \"github\"]}}]"}}, {"model": "admin.logentry", "pk": 192, "fields": {"action_time": "2018-09-14T15:57:03.603Z", "user": 1, "content_type": 20, "object_id": "4", "object_repr": "A Blog about a e commerce!", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"title\", \"description_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 193, "fields": {"action_time": "2018-09-14T15:58:12.998Z", "user": 1, "content_type": 24, "object_id": "3", "object_repr": "Expenses App", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"title\"]}}]"}}, {"model": "admin.logentry", "pk": 194, "fields": {"action_time": "2018-09-14T15:59:04.515Z", "user": 1, "content_type": 24, "object_id": "3", "object_repr": "Expenses App", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"content_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 195, "fields": {"action_time": "2018-09-14T16:09:47.953Z", "user": 1, "content_type": 20, "object_id": "3", "object_repr": "Art Design PortFolio", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"seo_description_eng\", \"description_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 196, "fields": {"action_time": "2018-09-14T16:10:29.481Z", "user": 1, "content_type": 20, "object_id": "3", "object_repr": "Art Design PortFolio", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"description_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 197, "fields": {"action_time": "2018-09-14T16:11:31.975Z", "user": 1, "content_type": 20, "object_id": "3", "object_repr": "Art Design PortFolio", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"description_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 198, "fields": {"action_time": "2018-09-14T16:11:59.117Z", "user": 1, "content_type": 20, "object_id": "3", "object_repr": "Art Design PortFolio", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"description_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 199, "fields": {"action_time": "2018-09-14T16:17:15.670Z", "user": 1, "content_type": 20, "object_id": "7", "object_repr": "E-commerce", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 200, "fields": {"action_time": "2018-09-14T16:22:59.378Z", "user": 1, "content_type": 20, "object_id": "7", "object_repr": "E-commerce", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"description_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 201, "fields": {"action_time": "2018-09-14T16:36:09.065Z", "user": 1, "content_type": 20, "object_id": "7", "object_repr": "E-commerce", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"description_eng\", \"github\"]}}]"}}, {"model": "admin.logentry", "pk": 202, "fields": {"action_time": "2018-09-30T15:26:42.225Z", "user": 1, "content_type": 20, "object_id": "7", "object_repr": "E-commerce", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"active\"]}}]"}}, {"model": "admin.logentry", "pk": 203, "fields": {"action_time": "2018-09-30T15:26:47.915Z", "user": 1, "content_type": 20, "object_id": "6", "object_repr": "Gym Site Demo", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"active\"]}}]"}}, {"model": "admin.logentry", "pk": 204, "fields": {"action_time": "2018-09-30T15:26:52.817Z", "user": 1, "content_type": 20, "object_id": "5", "object_repr": "Cafe Shop", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"active\"]}}]"}}, {"model": "admin.logentry", "pk": 205, "fields": {"action_time": "2018-09-30T15:26:57.973Z", "user": 1, "content_type": 20, "object_id": "4", "object_repr": "A Blog about a e commerce!", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"active\"]}}]"}}, {"model": "admin.logentry", "pk": 206, "fields": {"action_time": "2018-09-30T15:27:04.861Z", "user": 1, "content_type": 20, "object_id": "3", "object_repr": "Art Design PortFolio", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"active\"]}}]"}}, {"model": "admin.logentry", "pk": 207, "fields": {"action_time": "2018-09-30T15:27:11.366Z", "user": 1, "content_type": 20, "object_id": "2", "object_repr": "Restaurant Website", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"active\"]}}]"}}, {"model": "admin.logentry", "pk": 208, "fields": {"action_time": "2018-09-30T15:27:16.770Z", "user": 1, "content_type": 20, "object_id": "1", "object_repr": "Warehouse Management", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"active\"]}}]"}}, {"model": "admin.logentry", "pk": 209, "fields": {"action_time": "2018-09-30T15:31:27.177Z", "user": 1, "content_type": 20, "object_id": "3", "object_repr": "Art Design PortFolio", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"active\"]}}]"}}, {"model": "admin.logentry", "pk": 210, "fields": {"action_time": "2018-09-30T15:36:16.060Z", "user": 1, "content_type": 20, "object_id": "3", "object_repr": "Art Design PortFolio", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"description_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 211, "fields": {"action_time": "2018-09-30T15:38:12.073Z", "user": 1, "content_type": 20, "object_id": "7", "object_repr": "E-commerce", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"active\", \"demo\", \"description_eng\", \"href\"]}}]"}}, {"model": "admin.logentry", "pk": 212, "fields": {"action_time": "2018-09-30T15:38:44.003Z", "user": 1, "content_type": 20, "object_id": "4", "object_repr": "A Blog about a e commerce!", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"active\"]}}]"}}, {"model": "admin.logentry", "pk": 213, "fields": {"action_time": "2018-09-30T15:39:41.086Z", "user": 1, "content_type": 20, "object_id": "2", "object_repr": "Restaurant Website", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"active\", \"github\"]}}]"}}, {"model": "admin.logentry", "pk": 214, "fields": {"action_time": "2018-10-26T09:35:51.108Z", "user": 1, "content_type": 30, "object_id": "5", "object_repr": "Thodoris", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 215, "fields": {"action_time": "2018-10-26T09:35:58.772Z", "user": 1, "content_type": 30, "object_id": "5", "object_repr": "Thodoris", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"slugfield\"]}}]"}}, {"model": "admin.logentry", "pk": 216, "fields": {"action_time": "2019-02-12T06:26:23.029Z", "user": 1, "content_type": 25, "object_id": "2", "object_repr": "Gallery", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 217, "fields": {"action_time": "2019-03-29T13:58:52.087Z", "user": 1, "content_type": 20, "object_id": "8", "object_repr": "Catalogue for multishop", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 218, "fields": {"action_time": "2019-03-29T14:06:54.581Z", "user": 1, "content_type": 20, "object_id": "8", "object_repr": "Catalogue for multishop", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"short_description_eng\", \"description_eng\", \"href\", \"github\"]}}]"}}, {"model": "admin.logentry", "pk": 219, "fields": {"action_time": "2019-04-03T10:50:16.923Z", "user": 1, "content_type": 20, "object_id": "8", "object_repr": "Catalogue for a local store", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"show_first_page\", \"title\"]}}]"}}, {"model": "admin.logentry", "pk": 220, "fields": {"action_time": "2019-04-03T11:23:10.690Z", "user": 1, "content_type": 20, "object_id": "8", "object_repr": "Catalogue for a local store", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"description\", \"short_description_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 221, "fields": {"action_time": "2019-04-03T11:32:31.570Z", "user": 1, "content_type": 20, "object_id": "8", "object_repr": "Catalogue for a local store", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"short_description_eng\", \"title_eng\", \"description_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 222, "fields": {"action_time": "2019-04-03T11:50:41.963Z", "user": 1, "content_type": 20, "object_id": "8", "object_repr": "Catalogue for a local store", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"github\"]}}]"}}, {"model": "admin.logentry", "pk": 223, "fields": {"action_time": "2019-04-03T11:53:49.083Z", "user": 1, "content_type": 20, "object_id": "8", "object_repr": "Catalogue for a local store", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 224, "fields": {"action_time": "2019-04-03T11:54:19.099Z", "user": 1, "content_type": 20, "object_id": "2", "object_repr": "Restaurant Website", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"show_first_page\"]}}]"}}, {"model": "admin.logentry", "pk": 225, "fields": {"action_time": "2019-04-03T11:57:36.144Z", "user": 1, "content_type": 20, "object_id": "2", "object_repr": "Restaurant Website", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"short_description_eng\", \"title_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 226, "fields": {"action_time": "2019-04-03T12:00:32.151Z", "user": 1, "content_type": 20, "object_id": "2", "object_repr": "Restaurant Website", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"image\"]}}]"}}, {"model": "admin.logentry", "pk": 227, "fields": {"action_time": "2019-04-03T12:01:05.643Z", "user": 1, "content_type": 20, "object_id": "4", "object_repr": "A Blog about a e commerce!", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"show_first_page\"]}}]"}}, {"model": "admin.logentry", "pk": 228, "fields": {"action_time": "2019-04-03T12:02:37.528Z", "user": 1, "content_type": 20, "object_id": "4", "object_repr": "A Blog about a e commerce!", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"image\"]}}]"}}, {"model": "admin.logentry", "pk": 229, "fields": {"action_time": "2019-04-03T12:03:37.519Z", "user": 1, "content_type": 20, "object_id": "4", "object_repr": "A Blog about a e commerce!", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"short_description_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 230, "fields": {"action_time": "2019-04-03T12:45:41.937Z", "user": 1, "content_type": 20, "object_id": "9", "object_repr": "stamatakos", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 231, "fields": {"action_time": "2019-04-03T12:47:13.134Z", "user": 1, "content_type": 20, "object_id": "9", "object_repr": "stamatakos", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"show_first_page\", \"short_description_eng\", \"title_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 232, "fields": {"action_time": "2019-06-02T09:58:44.615Z", "user": 1, "content_type": 36, "object_id": "1", "object_repr": "Portfolio", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 233, "fields": {"action_time": "2019-06-02T09:58:55.490Z", "user": 1, "content_type": 36, "object_id": "2", "object_repr": "Catalogue", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 234, "fields": {"action_time": "2019-06-02T09:59:06.617Z", "user": 1, "content_type": 36, "object_id": "3", "object_repr": "E- Commerce", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 235, "fields": {"action_time": "2019-06-02T09:59:24.300Z", "user": 1, "content_type": 36, "object_id": "4", "object_repr": "General Template", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 236, "fields": {"action_time": "2019-06-02T11:01:19.270Z", "user": 1, "content_type": 37, "object_id": "1", "object_repr": "Creative Tim Material Kit", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 237, "fields": {"action_time": "2019-06-02T11:02:13.865Z", "user": 1, "content_type": 37, "object_id": "1", "object_repr": "Creative Tim Material Kit", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"image\"]}}]"}}, {"model": "admin.logentry", "pk": 238, "fields": {"action_time": "2019-06-02T12:37:51.940Z", "user": 1, "content_type": 36, "object_id": "5", "object_repr": "Ui KIt", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 239, "fields": {"action_time": "2019-06-02T12:38:01.043Z", "user": 1, "content_type": 37, "object_id": "2", "object_repr": "Now UI KIT", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 240, "fields": {"action_time": "2019-06-02T13:00:36.331Z", "user": 1, "content_type": 37, "object_id": "3", "object_repr": "Panagea", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 241, "fields": {"action_time": "2019-06-24T13:30:54.787Z", "user": 1, "content_type": 7, "object_id": "1", "object_repr": "www.simply-chris.com", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"domain\", \"name\"]}}]"}}, {"model": "admin.logentry", "pk": 274, "fields": {"action_time": "2019-07-01T04:29:14.473Z", "user": 1, "content_type": 37, "object_id": "4", "object_repr": "Porto", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 275, "fields": {"action_time": "2019-07-01T04:32:47.647Z", "user": 1, "content_type": 37, "object_id": "5", "object_repr": "Mimosa", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 276, "fields": {"action_time": "2019-07-01T04:52:39.270Z", "user": 1, "content_type": 37, "object_id": "6", "object_repr": "http://nouthemes.com/html/exist/index.html#", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 277, "fields": {"action_time": "2019-07-01T04:52:53.084Z", "user": 1, "content_type": 37, "object_id": "6", "object_repr": "exist", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"title\"]}}]"}}, {"model": "admin.logentry", "pk": 278, "fields": {"action_time": "2019-07-01T04:57:34.963Z", "user": 1, "content_type": 37, "object_id": "6", "object_repr": "exist", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"image\"]}}]"}}, {"model": "admin.logentry", "pk": 279, "fields": {"action_time": "2019-09-26T05:02:14.213Z", "user": 1, "content_type": 37, "object_id": "7", "object_repr": "http://themes.pixelstrap.com/multikart/front-end/lookbook-demo.html#", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 280, "fields": {"action_time": "2019-09-26T05:03:53.575Z", "user": 1, "content_type": 37, "object_id": "7", "object_repr": "multicart", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"title\", \"image\"]}}]"}}, {"model": "admin.logentry", "pk": 281, "fields": {"action_time": "2019-09-26T05:04:31.603Z", "user": 1, "content_type": 37, "object_id": "7", "object_repr": "multicart", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"price\"]}}]"}}, {"model": "admin.logentry", "pk": 282, "fields": {"action_time": "2019-09-26T05:04:51.245Z", "user": 1, "content_type": 37, "object_id": "7", "object_repr": "multicart", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"url\"]}}]"}}, {"model": "admin.logentry", "pk": 283, "fields": {"action_time": "2019-09-26T05:05:57.703Z", "user": 1, "content_type": 37, "object_id": "8", "object_repr": "Lezada", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 284, "fields": {"action_time": "2019-09-26T05:06:37.346Z", "user": 1, "content_type": 37, "object_id": "9", "object_repr": "https://demo.hasthemes.com/mirora-preview/mirora/index-4.html", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 285, "fields": {"action_time": "2019-09-26T05:06:45.558Z", "user": 1, "content_type": 37, "object_id": "9", "object_repr": "https://demo.hasthemes.com/mirora-preview/mirora/index-4.html", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"image\"]}}]"}}, {"model": "admin.logentry", "pk": 286, "fields": {"action_time": "2019-09-26T05:06:52.384Z", "user": 1, "content_type": 37, "object_id": "9", "object_repr": "Mirora", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"title\"]}}]"}}, {"model": "admin.logentry", "pk": 287, "fields": {"action_time": "2019-09-26T05:07:00.904Z", "user": 1, "content_type": 37, "object_id": "8", "object_repr": "Lezada", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"image\"]}}]"}}, {"model": "admin.logentry", "pk": 288, "fields": {"action_time": "2019-10-04T12:13:47.045Z", "user": 1, "content_type": 20, "object_id": "10", "object_repr": "Simply-You", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 289, "fields": {"action_time": "2019-10-04T12:14:02.974Z", "user": 1, "content_type": 20, "object_id": "10", "object_repr": "Simply-You", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"show_first_page\"]}}]"}}, {"model": "admin.logentry", "pk": 290, "fields": {"action_time": "2019-10-04T12:15:39.435Z", "user": 1, "content_type": 20, "object_id": "10", "object_repr": "Simply-You", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"description_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 291, "fields": {"action_time": "2019-10-04T12:17:45.010Z", "user": 1, "content_type": 20, "object_id": "11", "object_repr": "Optika kotsalis", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 292, "fields": {"action_time": "2019-10-04T12:18:21.986Z", "user": 1, "content_type": 20, "object_id": "2", "object_repr": "diamantis.gr", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"title\", \"title_eng\"]}}]"}}, {"model": "admin.logentry", "pk": 293, "fields": {"action_time": "2019-10-04T12:18:58.290Z", "user": 1, "content_type": 20, "object_id": "11", "object_repr": "Optika kotsalis", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"description\", \"short_description_eng\"]}}]"}}]